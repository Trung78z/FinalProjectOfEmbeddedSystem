
ES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab18  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024d8  0800aca8  0800aca8  0000bca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d180  0800d180  0000f074  2**0
                  CONTENTS
  4 .ARM          00000008  0800d180  0800d180  0000e180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d188  0800d188  0000f074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d188  0800d188  0000e188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d18c  0800d18c  0000e18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800d190  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f074  2**0
                  CONTENTS
 10 .bss          00005694  20000074  20000074  0000f074  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  20005708  20005708  0000f074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f1af  00000000  00000000  0000f0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a64  00000000  00000000  0002e253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b0  00000000  00000000  00032cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002487e  00000000  00000000  00034668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021c78  00000000  00000000  00058ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cff14  00000000  00000000  0007ab5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014aa72  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 000013cd  00000000  00000000  0014aab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007310  00000000  00000000  0014be84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  00153194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ac90 	.word	0x0800ac90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800ac90 	.word	0x0800ac90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b96a 	b.w	8000ea8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	460c      	mov	r4, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14e      	bne.n	8000c96 <__udivmoddi4+0xaa>
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	458c      	cmp	ip, r1
 8000bfc:	4686      	mov	lr, r0
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	d962      	bls.n	8000cca <__udivmoddi4+0xde>
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	4091      	lsls	r1, r2
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c14:	4319      	orrs	r1, r3
 8000c16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1e:	fa1f f68c 	uxth.w	r6, ip
 8000c22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c32:	fb04 f106 	mul.w	r1, r4, r6
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x64>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c42:	f080 8112 	bcs.w	8000e6a <__udivmoddi4+0x27e>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 810f 	bls.w	8000e6a <__udivmoddi4+0x27e>
 8000c4c:	3c02      	subs	r4, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	fa1f f38e 	uxth.w	r3, lr
 8000c56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c62:	fb00 f606 	mul.w	r6, r0, r6
 8000c66:	429e      	cmp	r6, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x94>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c72:	f080 80fc 	bcs.w	8000e6e <__udivmoddi4+0x282>
 8000c76:	429e      	cmp	r6, r3
 8000c78:	f240 80f9 	bls.w	8000e6e <__udivmoddi4+0x282>
 8000c7c:	4463      	add	r3, ip
 8000c7e:	3802      	subs	r0, #2
 8000c80:	1b9b      	subs	r3, r3, r6
 8000c82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c86:	2100      	movs	r1, #0
 8000c88:	b11d      	cbz	r5, 8000c92 <__udivmoddi4+0xa6>
 8000c8a:	40d3      	lsrs	r3, r2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d905      	bls.n	8000ca6 <__udivmoddi4+0xba>
 8000c9a:	b10d      	cbz	r5, 8000ca0 <__udivmoddi4+0xb4>
 8000c9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e7f5      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000ca6:	fab3 f183 	clz	r1, r3
 8000caa:	2900      	cmp	r1, #0
 8000cac:	d146      	bne.n	8000d3c <__udivmoddi4+0x150>
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xcc>
 8000cb2:	4290      	cmp	r0, r2
 8000cb4:	f0c0 80f0 	bcc.w	8000e98 <__udivmoddi4+0x2ac>
 8000cb8:	1a86      	subs	r6, r0, r2
 8000cba:	eb64 0303 	sbc.w	r3, r4, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	2d00      	cmp	r5, #0
 8000cc2:	d0e6      	beq.n	8000c92 <__udivmoddi4+0xa6>
 8000cc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc8:	e7e3      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	f040 8090 	bne.w	8000df0 <__udivmoddi4+0x204>
 8000cd0:	eba1 040c 	sub.w	r4, r1, ip
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa1f f78c 	uxth.w	r7, ip
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb07 f006 	mul.w	r0, r7, r6
 8000cf2:	4298      	cmp	r0, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x11c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x11a>
 8000d00:	4298      	cmp	r0, r3
 8000d02:	f200 80cd 	bhi.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d06:	4626      	mov	r6, r4
 8000d08:	1a1c      	subs	r4, r3, r0
 8000d0a:	fa1f f38e 	uxth.w	r3, lr
 8000d0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d12:	fb08 4410 	mls	r4, r8, r0, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb00 f707 	mul.w	r7, r0, r7
 8000d1e:	429f      	cmp	r7, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x148>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x146>
 8000d2c:	429f      	cmp	r7, r3
 8000d2e:	f200 80b0 	bhi.w	8000e92 <__udivmoddi4+0x2a6>
 8000d32:	4620      	mov	r0, r4
 8000d34:	1bdb      	subs	r3, r3, r7
 8000d36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0x9c>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa22 f706 	lsr.w	r7, r2, r6
 8000d46:	431f      	orrs	r7, r3
 8000d48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d50:	ea43 030c 	orr.w	r3, r3, ip
 8000d54:	40f4      	lsrs	r4, r6
 8000d56:	fa00 f801 	lsl.w	r8, r0, r1
 8000d5a:	0c38      	lsrs	r0, r7, #16
 8000d5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d60:	fbb4 fef0 	udiv	lr, r4, r0
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	fb00 441e 	mls	r4, r0, lr, r4
 8000d6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d70:	fb0e f90c 	mul.w	r9, lr, ip
 8000d74:	45a1      	cmp	r9, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	d90a      	bls.n	8000d92 <__udivmoddi4+0x1a6>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d82:	f080 8084 	bcs.w	8000e8e <__udivmoddi4+0x2a2>
 8000d86:	45a1      	cmp	r9, r4
 8000d88:	f240 8081 	bls.w	8000e8e <__udivmoddi4+0x2a2>
 8000d8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	eba4 0409 	sub.w	r4, r4, r9
 8000d96:	fa1f f983 	uxth.w	r9, r3
 8000d9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000da2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000daa:	45a4      	cmp	ip, r4
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x1d2>
 8000dae:	193c      	adds	r4, r7, r4
 8000db0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db4:	d267      	bcs.n	8000e86 <__udivmoddi4+0x29a>
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d965      	bls.n	8000e86 <__udivmoddi4+0x29a>
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc6:	eba4 040c 	sub.w	r4, r4, ip
 8000dca:	429c      	cmp	r4, r3
 8000dcc:	46ce      	mov	lr, r9
 8000dce:	469c      	mov	ip, r3
 8000dd0:	d351      	bcc.n	8000e76 <__udivmoddi4+0x28a>
 8000dd2:	d04e      	beq.n	8000e72 <__udivmoddi4+0x286>
 8000dd4:	b155      	cbz	r5, 8000dec <__udivmoddi4+0x200>
 8000dd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dda:	eb64 040c 	sbc.w	r4, r4, ip
 8000dde:	fa04 f606 	lsl.w	r6, r4, r6
 8000de2:	40cb      	lsrs	r3, r1
 8000de4:	431e      	orrs	r6, r3
 8000de6:	40cc      	lsrs	r4, r1
 8000de8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	e750      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f103 	lsr.w	r1, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000e00:	4094      	lsls	r4, r2
 8000e02:	430c      	orrs	r4, r1
 8000e04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e0c:	fa1f f78c 	uxth.w	r7, ip
 8000e10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e14:	fb08 3110 	mls	r1, r8, r0, r3
 8000e18:	0c23      	lsrs	r3, r4, #16
 8000e1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1e:	fb00 f107 	mul.w	r1, r0, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x24c>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2e:	d22c      	bcs.n	8000e8a <__udivmoddi4+0x29e>
 8000e30:	4299      	cmp	r1, r3
 8000e32:	d92a      	bls.n	8000e8a <__udivmoddi4+0x29e>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e40:	fb08 3311 	mls	r3, r8, r1, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb01 f307 	mul.w	r3, r1, r7
 8000e4c:	42a3      	cmp	r3, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x276>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e58:	d213      	bcs.n	8000e82 <__udivmoddi4+0x296>
 8000e5a:	42a3      	cmp	r3, r4
 8000e5c:	d911      	bls.n	8000e82 <__udivmoddi4+0x296>
 8000e5e:	3902      	subs	r1, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	1ae4      	subs	r4, r4, r3
 8000e64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e68:	e739      	b.n	8000cde <__udivmoddi4+0xf2>
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	e6f0      	b.n	8000c50 <__udivmoddi4+0x64>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e706      	b.n	8000c80 <__udivmoddi4+0x94>
 8000e72:	45c8      	cmp	r8, r9
 8000e74:	d2ae      	bcs.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7e:	3801      	subs	r0, #1
 8000e80:	e7a8      	b.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e82:	4631      	mov	r1, r6
 8000e84:	e7ed      	b.n	8000e62 <__udivmoddi4+0x276>
 8000e86:	4603      	mov	r3, r0
 8000e88:	e799      	b.n	8000dbe <__udivmoddi4+0x1d2>
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	e7d4      	b.n	8000e38 <__udivmoddi4+0x24c>
 8000e8e:	46d6      	mov	lr, sl
 8000e90:	e77f      	b.n	8000d92 <__udivmoddi4+0x1a6>
 8000e92:	4463      	add	r3, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e74d      	b.n	8000d34 <__udivmoddi4+0x148>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	4623      	mov	r3, r4
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e70f      	b.n	8000cc0 <__udivmoddi4+0xd4>
 8000ea0:	3e02      	subs	r6, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	e730      	b.n	8000d08 <__udivmoddi4+0x11c>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2180      	movs	r1, #128	@ 0x80
 8000eba:	480c      	ldr	r0, [pc, #48]	@ (8000eec <ST7789_WriteCommand+0x40>)
 8000ebc:	f002 fd18 	bl	80038f0 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ec6:	4809      	ldr	r0, [pc, #36]	@ (8000eec <ST7789_WriteCommand+0x40>)
 8000ec8:	f002 fd12 	bl	80038f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000ecc:	1df9      	adds	r1, r7, #7
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4806      	ldr	r0, [pc, #24]	@ (8000ef0 <ST7789_WriteCommand+0x44>)
 8000ed6:	f003 fa90 	bl	80043fa <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000eda:	2201      	movs	r2, #1
 8000edc:	2180      	movs	r1, #128	@ 0x80
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <ST7789_WriteCommand+0x40>)
 8000ee0:	f002 fd06 	bl	80038f0 <HAL_GPIO_WritePin>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	20000a28 	.word	0x20000a28

08000ef4 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8000efe:	2200      	movs	r2, #0
 8000f00:	2180      	movs	r1, #128	@ 0x80
 8000f02:	4820      	ldr	r0, [pc, #128]	@ (8000f84 <ST7789_WriteData+0x90>)
 8000f04:	f002 fcf4 	bl	80038f0 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f0e:	481d      	ldr	r0, [pc, #116]	@ (8000f84 <ST7789_WriteData+0x90>)
 8000f10:	f002 fcee 	bl	80038f0 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8000f14:	e02a      	b.n	8000f6c <ST7789_WriteData+0x78>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	bf28      	it	cs
 8000f20:	4613      	movcs	r3, r2
 8000f22:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 8000f24:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <ST7789_WriteData+0x94>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d30e      	bcc.n	8000f4e <ST7789_WriteData+0x5a>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 8000f30:	89fb      	ldrh	r3, [r7, #14]
 8000f32:	461a      	mov	r2, r3
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	4815      	ldr	r0, [pc, #84]	@ (8000f8c <ST7789_WriteData+0x98>)
 8000f38:	f003 fd4c 	bl	80049d4 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8000f3c:	bf00      	nop
 8000f3e:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <ST7789_WriteData+0x98>)
 8000f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d1f8      	bne.n	8000f3e <ST7789_WriteData+0x4a>
 8000f4c:	e006      	b.n	8000f5c <ST7789_WriteData+0x68>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000f4e:	89fa      	ldrh	r2, [r7, #14]
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	480d      	ldr	r0, [pc, #52]	@ (8000f8c <ST7789_WriteData+0x98>)
 8000f58:	f003 fa4f 	bl	80043fa <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 8000f5c:	89fb      	ldrh	r3, [r7, #14]
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8000f64:	89fb      	ldrh	r3, [r7, #14]
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1d1      	bne.n	8000f16 <ST7789_WriteData+0x22>
	}

	ST7789_UnSelect();
 8000f72:	2201      	movs	r2, #1
 8000f74:	2180      	movs	r1, #128	@ 0x80
 8000f76:	4803      	ldr	r0, [pc, #12]	@ (8000f84 <ST7789_WriteData+0x90>)
 8000f78:	f002 fcba 	bl	80038f0 <HAL_GPIO_WritePin>
}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40020400 	.word	0x40020400
 8000f88:	20000010 	.word	0x20000010
 8000f8c:	20000a28 	.word	0x20000a28

08000f90 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2180      	movs	r1, #128	@ 0x80
 8000f9e:	480c      	ldr	r0, [pc, #48]	@ (8000fd0 <ST7789_WriteSmallData+0x40>)
 8000fa0:	f002 fca6 	bl	80038f0 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000faa:	4809      	ldr	r0, [pc, #36]	@ (8000fd0 <ST7789_WriteSmallData+0x40>)
 8000fac:	f002 fca0 	bl	80038f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000fb0:	1df9      	adds	r1, r7, #7
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <ST7789_WriteSmallData+0x44>)
 8000fba:	f003 fa1e 	bl	80043fa <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2180      	movs	r1, #128	@ 0x80
 8000fc2:	4803      	ldr	r0, [pc, #12]	@ (8000fd0 <ST7789_WriteSmallData+0x40>)
 8000fc4:	f002 fc94 	bl	80038f0 <HAL_GPIO_WritePin>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	20000a28 	.word	0x20000a28

08000fd8 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8000fe2:	2036      	movs	r0, #54	@ 0x36
 8000fe4:	f7ff ff62 	bl	8000eac <ST7789_WriteCommand>
	switch (m) {
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d81a      	bhi.n	8001024 <ST7789_SetRotation+0x4c>
 8000fee:	a201      	add	r2, pc, #4	@ (adr r2, 8000ff4 <ST7789_SetRotation+0x1c>)
 8000ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff4:	08001005 	.word	0x08001005
 8000ff8:	0800100d 	.word	0x0800100d
 8000ffc:	08001015 	.word	0x08001015
 8001000:	0800101d 	.word	0x0800101d
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001004:	20c0      	movs	r0, #192	@ 0xc0
 8001006:	f7ff ffc3 	bl	8000f90 <ST7789_WriteSmallData>
		break;
 800100a:	e00c      	b.n	8001026 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800100c:	20a0      	movs	r0, #160	@ 0xa0
 800100e:	f7ff ffbf 	bl	8000f90 <ST7789_WriteSmallData>
		break;
 8001012:	e008      	b.n	8001026 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff ffbb 	bl	8000f90 <ST7789_WriteSmallData>
		break;
 800101a:	e004      	b.n	8001026 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800101c:	2060      	movs	r0, #96	@ 0x60
 800101e:	f7ff ffb7 	bl	8000f90 <ST7789_WriteSmallData>
		break;
 8001022:	e000      	b.n	8001026 <ST7789_SetRotation+0x4e>
	default:
		break;
 8001024:	bf00      	nop
	}
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop

08001030 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	4604      	mov	r4, r0
 8001038:	4608      	mov	r0, r1
 800103a:	4611      	mov	r1, r2
 800103c:	461a      	mov	r2, r3
 800103e:	4623      	mov	r3, r4
 8001040:	80fb      	strh	r3, [r7, #6]
 8001042:	4603      	mov	r3, r0
 8001044:	80bb      	strh	r3, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	807b      	strh	r3, [r7, #2]
 800104a:	4613      	mov	r3, r2
 800104c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800104e:	2200      	movs	r2, #0
 8001050:	2180      	movs	r1, #128	@ 0x80
 8001052:	4824      	ldr	r0, [pc, #144]	@ (80010e4 <ST7789_SetAddressWindow+0xb4>)
 8001054:	f002 fc4c 	bl	80038f0 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	82fb      	strh	r3, [r7, #22]
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8001060:	88bb      	ldrh	r3, [r7, #4]
 8001062:	827b      	strh	r3, [r7, #18]
 8001064:	883b      	ldrh	r3, [r7, #0]
 8001066:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8001068:	202a      	movs	r0, #42	@ 0x2a
 800106a:	f7ff ff1f 	bl	8000eac <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 800106e:	8afb      	ldrh	r3, [r7, #22]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	b29b      	uxth	r3, r3
 8001074:	b2db      	uxtb	r3, r3
 8001076:	733b      	strb	r3, [r7, #12]
 8001078:	8afb      	ldrh	r3, [r7, #22]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	737b      	strb	r3, [r7, #13]
 800107e:	8abb      	ldrh	r3, [r7, #20]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	b29b      	uxth	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	73bb      	strb	r3, [r7, #14]
 8001088:	8abb      	ldrh	r3, [r7, #20]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	2104      	movs	r1, #4
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff2d 	bl	8000ef4 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 800109a:	202b      	movs	r0, #43	@ 0x2b
 800109c:	f7ff ff06 	bl	8000eac <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 80010a0:	8a7b      	ldrh	r3, [r7, #18]
 80010a2:	0a1b      	lsrs	r3, r3, #8
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	723b      	strb	r3, [r7, #8]
 80010aa:	8a7b      	ldrh	r3, [r7, #18]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	727b      	strb	r3, [r7, #9]
 80010b0:	8a3b      	ldrh	r3, [r7, #16]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	72bb      	strb	r3, [r7, #10]
 80010ba:	8a3b      	ldrh	r3, [r7, #16]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	2104      	movs	r1, #4
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff14 	bl	8000ef4 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 80010cc:	202c      	movs	r0, #44	@ 0x2c
 80010ce:	f7ff feed 	bl	8000eac <ST7789_WriteCommand>
	ST7789_UnSelect();
 80010d2:	2201      	movs	r2, #1
 80010d4:	2180      	movs	r1, #128	@ 0x80
 80010d6:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <ST7789_SetAddressWindow+0xb4>)
 80010d8:	f002 fc0a 	bl	80038f0 <HAL_GPIO_WritePin>
}
 80010dc:	bf00      	nop
 80010de:	371c      	adds	r7, #28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd90      	pop	{r4, r7, pc}
 80010e4:	40020400 	.word	0x40020400

080010e8 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b08b      	sub	sp, #44	@ 0x2c
 80010ec:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 80010ee:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80010f2:	2100      	movs	r1, #0
 80010f4:	484a      	ldr	r0, [pc, #296]	@ (8001220 <ST7789_Init+0x138>)
 80010f6:	f008 f8c3 	bl	8009280 <memset>
	#endif
	HAL_Delay(10);
 80010fa:	200a      	movs	r0, #10
 80010fc:	f001 fc68 	bl	80029d0 <HAL_Delay>
    ST7789_RST_Clr();
 8001100:	2200      	movs	r2, #0
 8001102:	2104      	movs	r1, #4
 8001104:	4847      	ldr	r0, [pc, #284]	@ (8001224 <ST7789_Init+0x13c>)
 8001106:	f002 fbf3 	bl	80038f0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800110a:	200a      	movs	r0, #10
 800110c:	f001 fc60 	bl	80029d0 <HAL_Delay>
    ST7789_RST_Set();
 8001110:	2201      	movs	r2, #1
 8001112:	2104      	movs	r1, #4
 8001114:	4843      	ldr	r0, [pc, #268]	@ (8001224 <ST7789_Init+0x13c>)
 8001116:	f002 fbeb 	bl	80038f0 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800111a:	2014      	movs	r0, #20
 800111c:	f001 fc58 	bl	80029d0 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8001120:	203a      	movs	r0, #58	@ 0x3a
 8001122:	f7ff fec3 	bl	8000eac <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8001126:	2055      	movs	r0, #85	@ 0x55
 8001128:	f7ff ff32 	bl	8000f90 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800112c:	20b2      	movs	r0, #178	@ 0xb2
 800112e:	f7ff febd 	bl	8000eac <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001132:	4a3d      	ldr	r2, [pc, #244]	@ (8001228 <ST7789_Init+0x140>)
 8001134:	f107 0320 	add.w	r3, r7, #32
 8001138:	e892 0003 	ldmia.w	r2, {r0, r1}
 800113c:	6018      	str	r0, [r3, #0]
 800113e:	3304      	adds	r3, #4
 8001140:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	2105      	movs	r1, #5
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fed3 	bl	8000ef4 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 800114e:	2002      	movs	r0, #2
 8001150:	f7ff ff42 	bl	8000fd8 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8001154:	20b7      	movs	r0, #183	@ 0xb7
 8001156:	f7ff fea9 	bl	8000eac <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 800115a:	2035      	movs	r0, #53	@ 0x35
 800115c:	f7ff ff18 	bl	8000f90 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8001160:	20bb      	movs	r0, #187	@ 0xbb
 8001162:	f7ff fea3 	bl	8000eac <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8001166:	2019      	movs	r0, #25
 8001168:	f7ff ff12 	bl	8000f90 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 800116c:	20c0      	movs	r0, #192	@ 0xc0
 800116e:	f7ff fe9d 	bl	8000eac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8001172:	202c      	movs	r0, #44	@ 0x2c
 8001174:	f7ff ff0c 	bl	8000f90 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8001178:	20c2      	movs	r0, #194	@ 0xc2
 800117a:	f7ff fe97 	bl	8000eac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 800117e:	2001      	movs	r0, #1
 8001180:	f7ff ff06 	bl	8000f90 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8001184:	20c3      	movs	r0, #195	@ 0xc3
 8001186:	f7ff fe91 	bl	8000eac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 800118a:	2012      	movs	r0, #18
 800118c:	f7ff ff00 	bl	8000f90 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8001190:	20c4      	movs	r0, #196	@ 0xc4
 8001192:	f7ff fe8b 	bl	8000eac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8001196:	2020      	movs	r0, #32
 8001198:	f7ff fefa 	bl	8000f90 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 800119c:	20c6      	movs	r0, #198	@ 0xc6
 800119e:	f7ff fe85 	bl	8000eac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 80011a2:	200f      	movs	r0, #15
 80011a4:	f7ff fef4 	bl	8000f90 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 80011a8:	20d0      	movs	r0, #208	@ 0xd0
 80011aa:	f7ff fe7f 	bl	8000eac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 80011ae:	20a4      	movs	r0, #164	@ 0xa4
 80011b0:	f7ff feee 	bl	8000f90 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 80011b4:	20a1      	movs	r0, #161	@ 0xa1
 80011b6:	f7ff feeb 	bl	8000f90 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 80011ba:	20e0      	movs	r0, #224	@ 0xe0
 80011bc:	f7ff fe76 	bl	8000eac <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 80011c0:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <ST7789_Init+0x144>)
 80011c2:	f107 0410 	add.w	r4, r7, #16
 80011c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c8:	c407      	stmia	r4!, {r0, r1, r2}
 80011ca:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	210e      	movs	r1, #14
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fe8e 	bl	8000ef4 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 80011d8:	20e1      	movs	r0, #225	@ 0xe1
 80011da:	f7ff fe67 	bl	8000eac <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <ST7789_Init+0x148>)
 80011e0:	463c      	mov	r4, r7
 80011e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e4:	c407      	stmia	r4!, {r0, r1, r2}
 80011e6:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80011e8:	463b      	mov	r3, r7
 80011ea:	210e      	movs	r1, #14
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fe81 	bl	8000ef4 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 80011f2:	2021      	movs	r0, #33	@ 0x21
 80011f4:	f7ff fe5a 	bl	8000eac <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 80011f8:	2011      	movs	r0, #17
 80011fa:	f7ff fe57 	bl	8000eac <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 80011fe:	2013      	movs	r0, #19
 8001200:	f7ff fe54 	bl	8000eac <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8001204:	2029      	movs	r0, #41	@ 0x29
 8001206:	f7ff fe51 	bl	8000eac <ST7789_WriteCommand>

	HAL_Delay(50);
 800120a:	2032      	movs	r0, #50	@ 0x32
 800120c:	f001 fbe0 	bl	80029d0 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8001210:	2000      	movs	r0, #0
 8001212:	f000 f80f 	bl	8001234 <ST7789_Fill_Color>
}
 8001216:	bf00      	nop
 8001218:	372c      	adds	r7, #44	@ 0x2c
 800121a:	46bd      	mov	sp, r7
 800121c:	bd90      	pop	{r4, r7, pc}
 800121e:	bf00      	nop
 8001220:	20000090 	.word	0x20000090
 8001224:	40020400 	.word	0x40020400
 8001228:	0800aca8 	.word	0x0800aca8
 800122c:	0800acb0 	.word	0x0800acb0
 8001230:	0800acc0 	.word	0x0800acc0

08001234 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 800123e:	f240 133f 	movw	r3, #319	@ 0x13f
 8001242:	22ef      	movs	r2, #239	@ 0xef
 8001244:	2100      	movs	r1, #0
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff fef2 	bl	8001030 <ST7789_SetAddressWindow>
	ST7789_Select();
 800124c:	2200      	movs	r2, #0
 800124e:	2180      	movs	r1, #128	@ 0x80
 8001250:	4810      	ldr	r0, [pc, #64]	@ (8001294 <ST7789_Fill_Color+0x60>)
 8001252:	f002 fb4d 	bl	80038f0 <HAL_GPIO_WritePin>

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001256:	2300      	movs	r3, #0
 8001258:	81fb      	strh	r3, [r7, #14]
 800125a:	e00e      	b.n	800127a <ST7789_Fill_Color+0x46>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001262:	4619      	mov	r1, r3
 8001264:	480c      	ldr	r0, [pc, #48]	@ (8001298 <ST7789_Fill_Color+0x64>)
 8001266:	f008 f80b 	bl	8009280 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 800126a:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 800126e:	480a      	ldr	r0, [pc, #40]	@ (8001298 <ST7789_Fill_Color+0x64>)
 8001270:	f7ff fe40 	bl	8000ef4 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001274:	89fb      	ldrh	r3, [r7, #14]
 8001276:	3301      	adds	r3, #1
 8001278:	81fb      	strh	r3, [r7, #14]
 800127a:	89fb      	ldrh	r3, [r7, #14]
 800127c:	2b3f      	cmp	r3, #63	@ 0x3f
 800127e:	d9ed      	bls.n	800125c <ST7789_Fill_Color+0x28>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8001280:	2201      	movs	r2, #1
 8001282:	2180      	movs	r1, #128	@ 0x80
 8001284:	4803      	ldr	r0, [pc, #12]	@ (8001294 <ST7789_Fill_Color+0x60>)
 8001286:	f002 fb33 	bl	80038f0 <HAL_GPIO_WritePin>
}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40020400 	.word	0x40020400
 8001298:	20000090 	.word	0x20000090

0800129c <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
 80012a6:	460b      	mov	r3, r1
 80012a8:	80bb      	strh	r3, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	2bef      	cmp	r3, #239	@ 0xef
 80012b2:	d822      	bhi.n	80012fa <ST7789_DrawPixel+0x5e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80012b4:	88bb      	ldrh	r3, [r7, #4]
 80012b6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80012ba:	d21e      	bcs.n	80012fa <ST7789_DrawPixel+0x5e>
	
	ST7789_SetAddressWindow(x, y, x, y);
 80012bc:	88bb      	ldrh	r3, [r7, #4]
 80012be:	88fa      	ldrh	r2, [r7, #6]
 80012c0:	88b9      	ldrh	r1, [r7, #4]
 80012c2:	88f8      	ldrh	r0, [r7, #6]
 80012c4:	f7ff feb4 	bl	8001030 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 80012c8:	887b      	ldrh	r3, [r7, #2]
 80012ca:	0a1b      	lsrs	r3, r3, #8
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	733b      	strb	r3, [r7, #12]
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 80012d8:	2200      	movs	r2, #0
 80012da:	2180      	movs	r1, #128	@ 0x80
 80012dc:	4809      	ldr	r0, [pc, #36]	@ (8001304 <ST7789_DrawPixel+0x68>)
 80012de:	f002 fb07 	bl	80038f0 <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	2102      	movs	r1, #2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fe03 	bl	8000ef4 <ST7789_WriteData>
	ST7789_UnSelect();
 80012ee:	2201      	movs	r2, #1
 80012f0:	2180      	movs	r1, #128	@ 0x80
 80012f2:	4804      	ldr	r0, [pc, #16]	@ (8001304 <ST7789_DrawPixel+0x68>)
 80012f4:	f002 fafc 	bl	80038f0 <HAL_GPIO_WritePin>
 80012f8:	e000      	b.n	80012fc <ST7789_DrawPixel+0x60>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80012fa:	bf00      	nop
}
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40020400 	.word	0x40020400

08001308 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
 800130e:	4604      	mov	r4, r0
 8001310:	4608      	mov	r0, r1
 8001312:	4611      	mov	r1, r2
 8001314:	461a      	mov	r2, r3
 8001316:	4623      	mov	r3, r4
 8001318:	80fb      	strh	r3, [r7, #6]
 800131a:	4603      	mov	r3, r0
 800131c:	80bb      	strh	r3, [r7, #4]
 800131e:	460b      	mov	r3, r1
 8001320:	807b      	strh	r3, [r7, #2]
 8001322:	4613      	mov	r3, r2
 8001324:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8001326:	883a      	ldrh	r2, [r7, #0]
 8001328:	88bb      	ldrh	r3, [r7, #4]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001330:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001334:	8879      	ldrh	r1, [r7, #2]
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	1acb      	subs	r3, r1, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	bfb8      	it	lt
 800133e:	425b      	neglt	r3, r3
 8001340:	429a      	cmp	r2, r3
 8001342:	bfcc      	ite	gt
 8001344:	2301      	movgt	r3, #1
 8001346:	2300      	movle	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	827b      	strh	r3, [r7, #18]
    if (steep) {
 800134c:	8a7b      	ldrh	r3, [r7, #18]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00b      	beq.n	800136a <ST7789_DrawLine+0x62>
		swap = x0;
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 8001356:	88bb      	ldrh	r3, [r7, #4]
 8001358:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 800135a:	8a3b      	ldrh	r3, [r7, #16]
 800135c:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 8001362:	883b      	ldrh	r3, [r7, #0]
 8001364:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 8001366:	8a3b      	ldrh	r3, [r7, #16]
 8001368:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 800136a:	88fa      	ldrh	r2, [r7, #6]
 800136c:	887b      	ldrh	r3, [r7, #2]
 800136e:	429a      	cmp	r2, r3
 8001370:	d90b      	bls.n	800138a <ST7789_DrawLine+0x82>
		swap = x0;
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 800137a:	8a3b      	ldrh	r3, [r7, #16]
 800137c:	807b      	strh	r3, [r7, #2]

		swap = y0;
 800137e:	88bb      	ldrh	r3, [r7, #4]
 8001380:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 8001382:	883b      	ldrh	r3, [r7, #0]
 8001384:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 8001386:	8a3b      	ldrh	r3, [r7, #16]
 8001388:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	b29b      	uxth	r3, r3
 8001392:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 8001394:	883a      	ldrh	r2, [r7, #0]
 8001396:	88bb      	ldrh	r3, [r7, #4]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	bfb8      	it	lt
 800139e:	425b      	neglt	r3, r3
 80013a0:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 80013a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013a6:	0fda      	lsrs	r2, r3, #31
 80013a8:	4413      	add	r3, r2
 80013aa:	105b      	asrs	r3, r3, #1
 80013ac:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 80013ae:	88ba      	ldrh	r2, [r7, #4]
 80013b0:	883b      	ldrh	r3, [r7, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d202      	bcs.n	80013bc <ST7789_DrawLine+0xb4>
        ystep = 1;
 80013b6:	2301      	movs	r3, #1
 80013b8:	82bb      	strh	r3, [r7, #20]
 80013ba:	e028      	b.n	800140e <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 80013bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013c0:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 80013c2:	e024      	b.n	800140e <ST7789_DrawLine+0x106>
        if (steep) {
 80013c4:	8a7b      	ldrh	r3, [r7, #18]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d006      	beq.n	80013d8 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 80013ca:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80013cc:	88f9      	ldrh	r1, [r7, #6]
 80013ce:	88bb      	ldrh	r3, [r7, #4]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff63 	bl	800129c <ST7789_DrawPixel>
 80013d6:	e005      	b.n	80013e4 <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 80013d8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80013da:	88b9      	ldrh	r1, [r7, #4]
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff5c 	bl	800129c <ST7789_DrawPixel>
        }
        err -= dy;
 80013e4:	8afa      	ldrh	r2, [r7, #22]
 80013e6:	89bb      	ldrh	r3, [r7, #12]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 80013ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	da08      	bge.n	8001408 <ST7789_DrawLine+0x100>
            y0 += ystep;
 80013f6:	8aba      	ldrh	r2, [r7, #20]
 80013f8:	88bb      	ldrh	r3, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80013fe:	8afa      	ldrh	r2, [r7, #22]
 8001400:	89fb      	ldrh	r3, [r7, #14]
 8001402:	4413      	add	r3, r2
 8001404:	b29b      	uxth	r3, r3
 8001406:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	3301      	adds	r3, #1
 800140c:	80fb      	strh	r3, [r7, #6]
 800140e:	88fa      	ldrh	r2, [r7, #6]
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	429a      	cmp	r2, r3
 8001414:	d9d6      	bls.n	80013c4 <ST7789_DrawLine+0xbc>
        }
    }
}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd90      	pop	{r4, r7, pc}

08001420 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001420:	b082      	sub	sp, #8
 8001422:	b580      	push	{r7, lr}
 8001424:	b088      	sub	sp, #32
 8001426:	af00      	add	r7, sp, #0
 8001428:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800142a:	4603      	mov	r3, r0
 800142c:	80fb      	strh	r3, [r7, #6]
 800142e:	460b      	mov	r3, r1
 8001430:	80bb      	strh	r3, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8001436:	2200      	movs	r2, #0
 8001438:	2180      	movs	r1, #128	@ 0x80
 800143a:	4837      	ldr	r0, [pc, #220]	@ (8001518 <ST7789_WriteChar+0xf8>)
 800143c:	f002 fa58 	bl	80038f0 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8001440:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001444:	461a      	mov	r2, r3
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	4413      	add	r3, r2
 800144a:	b29b      	uxth	r3, r3
 800144c:	3b01      	subs	r3, #1
 800144e:	b29a      	uxth	r2, r3
 8001450:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001454:	4619      	mov	r1, r3
 8001456:	88bb      	ldrh	r3, [r7, #4]
 8001458:	440b      	add	r3, r1
 800145a:	b29b      	uxth	r3, r3
 800145c:	3b01      	subs	r3, #1
 800145e:	b29b      	uxth	r3, r3
 8001460:	88b9      	ldrh	r1, [r7, #4]
 8001462:	88f8      	ldrh	r0, [r7, #6]
 8001464:	f7ff fde4 	bl	8001030 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
 800146c:	e041      	b.n	80014f2 <ST7789_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 800146e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	3b20      	subs	r3, #32
 8001474:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001478:	fb01 f303 	mul.w	r3, r1, r3
 800147c:	4619      	mov	r1, r3
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	440b      	add	r3, r1
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
 800148e:	e027      	b.n	80014e0 <ST7789_WriteChar+0xc0>
			if ((b << j) & 0x8000) {
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00e      	beq.n	80014be <ST7789_WriteChar+0x9e>
				uint8_t data[] = {color >> 8, color & 0xFF};
 80014a0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	743b      	strb	r3, [r7, #16]
 80014aa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	2102      	movs	r1, #2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fd1c 	bl	8000ef4 <ST7789_WriteData>
 80014bc:	e00d      	b.n	80014da <ST7789_WriteChar+0xba>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 80014be:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	733b      	strb	r3, [r7, #12]
 80014c8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	2102      	movs	r1, #2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fd0d 	bl	8000ef4 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	3301      	adds	r3, #1
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014e4:	461a      	mov	r2, r3
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d3d1      	bcc.n	8001490 <ST7789_WriteChar+0x70>
	for (i = 0; i < font.height; i++) {
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	3301      	adds	r3, #1
 80014f0:	61fb      	str	r3, [r7, #28]
 80014f2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80014f6:	461a      	mov	r2, r3
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d3b7      	bcc.n	800146e <ST7789_WriteChar+0x4e>
			}
		}
	}
	ST7789_UnSelect();
 80014fe:	2201      	movs	r2, #1
 8001500:	2180      	movs	r1, #128	@ 0x80
 8001502:	4805      	ldr	r0, [pc, #20]	@ (8001518 <ST7789_WriteChar+0xf8>)
 8001504:	f002 f9f4 	bl	80038f0 <HAL_GPIO_WritePin>
}
 8001508:	bf00      	nop
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001512:	b002      	add	sp, #8
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40020400 	.word	0x40020400

0800151c <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800151c:	b082      	sub	sp, #8
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af04      	add	r7, sp, #16
 8001524:	603a      	str	r2, [r7, #0]
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	4603      	mov	r3, r0
 800152a:	80fb      	strh	r3, [r7, #6]
 800152c:	460b      	mov	r3, r1
 800152e:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8001530:	2200      	movs	r2, #0
 8001532:	2180      	movs	r1, #128	@ 0x80
 8001534:	4822      	ldr	r0, [pc, #136]	@ (80015c0 <ST7789_WriteString+0xa4>)
 8001536:	f002 f9db 	bl	80038f0 <HAL_GPIO_WritePin>
	while (*str) {
 800153a:	e02e      	b.n	800159a <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	7d3a      	ldrb	r2, [r7, #20]
 8001540:	4413      	add	r3, r2
 8001542:	2bef      	cmp	r3, #239	@ 0xef
 8001544:	dd14      	ble.n	8001570 <ST7789_WriteString+0x54>
			x = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800154a:	7d7b      	ldrb	r3, [r7, #21]
 800154c:	461a      	mov	r2, r3
 800154e:	88bb      	ldrh	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8001554:	88bb      	ldrh	r3, [r7, #4]
 8001556:	7d7a      	ldrb	r2, [r7, #21]
 8001558:	4413      	add	r3, r2
 800155a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800155e:	da21      	bge.n	80015a4 <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b20      	cmp	r3, #32
 8001566:	d103      	bne.n	8001570 <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	3301      	adds	r3, #1
 800156c:	603b      	str	r3, [r7, #0]
				continue;
 800156e:	e014      	b.n	800159a <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	781a      	ldrb	r2, [r3, #0]
 8001574:	88b9      	ldrh	r1, [r7, #4]
 8001576:	88f8      	ldrh	r0, [r7, #6]
 8001578:	8c3b      	ldrh	r3, [r7, #32]
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	8bbb      	ldrh	r3, [r7, #28]
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f7ff ff4b 	bl	8001420 <ST7789_WriteChar>
		x += font.width;
 800158a:	7d3b      	ldrb	r3, [r7, #20]
 800158c:	461a      	mov	r2, r3
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	4413      	add	r3, r2
 8001592:	80fb      	strh	r3, [r7, #6]
		str++;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	3301      	adds	r3, #1
 8001598:	603b      	str	r3, [r7, #0]
	while (*str) {
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1cc      	bne.n	800153c <ST7789_WriteString+0x20>
 80015a2:	e000      	b.n	80015a6 <ST7789_WriteString+0x8a>
				break;
 80015a4:	bf00      	nop
	}
	ST7789_UnSelect();
 80015a6:	2201      	movs	r2, #1
 80015a8:	2180      	movs	r1, #128	@ 0x80
 80015aa:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <ST7789_WriteString+0xa4>)
 80015ac:	f002 f9a0 	bl	80038f0 <HAL_GPIO_WritePin>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015ba:	b002      	add	sp, #8
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40020400 	.word	0x40020400

080015c4 <ST7789_DrawFilledCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle
 * @return  none
 */
void ST7789_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b089      	sub	sp, #36	@ 0x24
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	4604      	mov	r4, r0
 80015cc:	4608      	mov	r0, r1
 80015ce:	4611      	mov	r1, r2
 80015d0:	461a      	mov	r2, r3
 80015d2:	4623      	mov	r3, r4
 80015d4:	80fb      	strh	r3, [r7, #6]
 80015d6:	4603      	mov	r3, r0
 80015d8:	80bb      	strh	r3, [r7, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	807b      	strh	r3, [r7, #2]
 80015de:	4613      	mov	r3, r2
 80015e0:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80015e2:	2200      	movs	r2, #0
 80015e4:	2180      	movs	r1, #128	@ 0x80
 80015e6:	4869      	ldr	r0, [pc, #420]	@ (800178c <ST7789_DrawFilledCircle+0x1c8>)
 80015e8:	f002 f982 	bl	80038f0 <HAL_GPIO_WritePin>
	int16_t f = 1 - r;
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	f1c3 0301 	rsb	r3, r3, #1
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80015f6:	2301      	movs	r3, #1
 80015f8:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80015fa:	887b      	ldrh	r3, [r7, #2]
 80015fc:	461a      	mov	r2, r3
 80015fe:	03d2      	lsls	r2, r2, #15
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	b29b      	uxth	r3, r3
 8001606:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800160c:	887b      	ldrh	r3, [r7, #2]
 800160e:	81fb      	strh	r3, [r7, #14]

	ST7789_DrawPixel(x0, y0 + r, color);
 8001610:	88f8      	ldrh	r0, [r7, #6]
 8001612:	88ba      	ldrh	r2, [r7, #4]
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	4413      	add	r3, r2
 8001618:	b29b      	uxth	r3, r3
 800161a:	883a      	ldrh	r2, [r7, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff fe3d 	bl	800129c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 8001622:	88f8      	ldrh	r0, [r7, #6]
 8001624:	88ba      	ldrh	r2, [r7, #4]
 8001626:	887b      	ldrh	r3, [r7, #2]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	b29b      	uxth	r3, r3
 800162c:	883a      	ldrh	r2, [r7, #0]
 800162e:	4619      	mov	r1, r3
 8001630:	f7ff fe34 	bl	800129c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 8001634:	88fa      	ldrh	r2, [r7, #6]
 8001636:	887b      	ldrh	r3, [r7, #2]
 8001638:	4413      	add	r3, r2
 800163a:	b29b      	uxth	r3, r3
 800163c:	88b9      	ldrh	r1, [r7, #4]
 800163e:	883a      	ldrh	r2, [r7, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fe2b 	bl	800129c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8001646:	88fa      	ldrh	r2, [r7, #6]
 8001648:	887b      	ldrh	r3, [r7, #2]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	b29b      	uxth	r3, r3
 800164e:	88b9      	ldrh	r1, [r7, #4]
 8001650:	883a      	ldrh	r2, [r7, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fe22 	bl	800129c <ST7789_DrawPixel>
	ST7789_DrawLine(x0 - r, y0, x0 + r, y0, color);
 8001658:	88fa      	ldrh	r2, [r7, #6]
 800165a:	887b      	ldrh	r3, [r7, #2]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	b298      	uxth	r0, r3
 8001660:	88b9      	ldrh	r1, [r7, #4]
 8001662:	88fa      	ldrh	r2, [r7, #6]
 8001664:	887b      	ldrh	r3, [r7, #2]
 8001666:	4413      	add	r3, r2
 8001668:	b29a      	uxth	r2, r3
 800166a:	88bc      	ldrh	r4, [r7, #4]
 800166c:	883b      	ldrh	r3, [r7, #0]
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	4623      	mov	r3, r4
 8001672:	f7ff fe49 	bl	8001308 <ST7789_DrawLine>

	while (x < y) {
 8001676:	e079      	b.n	800176c <ST7789_DrawFilledCircle+0x1a8>
		if (f >= 0) {
 8001678:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0e      	blt.n	800169e <ST7789_DrawFilledCircle+0xda>
			y--;
 8001680:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001684:	b29b      	uxth	r3, r3
 8001686:	3b01      	subs	r3, #1
 8001688:	b29b      	uxth	r3, r3
 800168a:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 800168c:	8a7b      	ldrh	r3, [r7, #18]
 800168e:	3302      	adds	r3, #2
 8001690:	b29b      	uxth	r3, r3
 8001692:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8001694:	8afa      	ldrh	r2, [r7, #22]
 8001696:	8a7b      	ldrh	r3, [r7, #18]
 8001698:	4413      	add	r3, r2
 800169a:	b29b      	uxth	r3, r3
 800169c:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 800169e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	3301      	adds	r3, #1
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80016aa:	8abb      	ldrh	r3, [r7, #20]
 80016ac:	3302      	adds	r3, #2
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80016b2:	8afa      	ldrh	r2, [r7, #22]
 80016b4:	8abb      	ldrh	r3, [r7, #20]
 80016b6:	4413      	add	r3, r2
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 80016bc:	88fa      	ldrh	r2, [r7, #6]
 80016be:	8a3b      	ldrh	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	b298      	uxth	r0, r3
 80016c4:	88ba      	ldrh	r2, [r7, #4]
 80016c6:	89fb      	ldrh	r3, [r7, #14]
 80016c8:	4413      	add	r3, r2
 80016ca:	b299      	uxth	r1, r3
 80016cc:	88fa      	ldrh	r2, [r7, #6]
 80016ce:	8a3b      	ldrh	r3, [r7, #16]
 80016d0:	4413      	add	r3, r2
 80016d2:	b29c      	uxth	r4, r3
 80016d4:	88ba      	ldrh	r2, [r7, #4]
 80016d6:	89fb      	ldrh	r3, [r7, #14]
 80016d8:	4413      	add	r3, r2
 80016da:	b29a      	uxth	r2, r3
 80016dc:	883b      	ldrh	r3, [r7, #0]
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	4613      	mov	r3, r2
 80016e2:	4622      	mov	r2, r4
 80016e4:	f7ff fe10 	bl	8001308 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 80016e8:	88fa      	ldrh	r2, [r7, #6]
 80016ea:	8a3b      	ldrh	r3, [r7, #16]
 80016ec:	4413      	add	r3, r2
 80016ee:	b298      	uxth	r0, r3
 80016f0:	88ba      	ldrh	r2, [r7, #4]
 80016f2:	89fb      	ldrh	r3, [r7, #14]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	b299      	uxth	r1, r3
 80016f8:	88fa      	ldrh	r2, [r7, #6]
 80016fa:	8a3b      	ldrh	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	b29c      	uxth	r4, r3
 8001700:	88ba      	ldrh	r2, [r7, #4]
 8001702:	89fb      	ldrh	r3, [r7, #14]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	b29a      	uxth	r2, r3
 8001708:	883b      	ldrh	r3, [r7, #0]
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	4613      	mov	r3, r2
 800170e:	4622      	mov	r2, r4
 8001710:	f7ff fdfa 	bl	8001308 <ST7789_DrawLine>

		ST7789_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 8001714:	88fa      	ldrh	r2, [r7, #6]
 8001716:	89fb      	ldrh	r3, [r7, #14]
 8001718:	4413      	add	r3, r2
 800171a:	b298      	uxth	r0, r3
 800171c:	88ba      	ldrh	r2, [r7, #4]
 800171e:	8a3b      	ldrh	r3, [r7, #16]
 8001720:	4413      	add	r3, r2
 8001722:	b299      	uxth	r1, r3
 8001724:	88fa      	ldrh	r2, [r7, #6]
 8001726:	89fb      	ldrh	r3, [r7, #14]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	b29c      	uxth	r4, r3
 800172c:	88ba      	ldrh	r2, [r7, #4]
 800172e:	8a3b      	ldrh	r3, [r7, #16]
 8001730:	4413      	add	r3, r2
 8001732:	b29a      	uxth	r2, r3
 8001734:	883b      	ldrh	r3, [r7, #0]
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	4613      	mov	r3, r2
 800173a:	4622      	mov	r2, r4
 800173c:	f7ff fde4 	bl	8001308 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 8001740:	88fa      	ldrh	r2, [r7, #6]
 8001742:	89fb      	ldrh	r3, [r7, #14]
 8001744:	4413      	add	r3, r2
 8001746:	b298      	uxth	r0, r3
 8001748:	88ba      	ldrh	r2, [r7, #4]
 800174a:	8a3b      	ldrh	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	b299      	uxth	r1, r3
 8001750:	88fa      	ldrh	r2, [r7, #6]
 8001752:	89fb      	ldrh	r3, [r7, #14]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	b29c      	uxth	r4, r3
 8001758:	88ba      	ldrh	r2, [r7, #4]
 800175a:	8a3b      	ldrh	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	b29a      	uxth	r2, r3
 8001760:	883b      	ldrh	r3, [r7, #0]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	4613      	mov	r3, r2
 8001766:	4622      	mov	r2, r4
 8001768:	f7ff fdce 	bl	8001308 <ST7789_DrawLine>
	while (x < y) {
 800176c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001770:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001774:	429a      	cmp	r2, r3
 8001776:	f6ff af7f 	blt.w	8001678 <ST7789_DrawFilledCircle+0xb4>
	}
	ST7789_UnSelect();
 800177a:	2201      	movs	r2, #1
 800177c:	2180      	movs	r1, #128	@ 0x80
 800177e:	4803      	ldr	r0, [pc, #12]	@ (800178c <ST7789_DrawFilledCircle+0x1c8>)
 8001780:	f002 f8b6 	bl	80038f0 <HAL_GPIO_WritePin>
}
 8001784:	bf00      	nop
 8001786:	371c      	adds	r7, #28
 8001788:	46bd      	mov	sp, r7
 800178a:	bd90      	pop	{r4, r7, pc}
 800178c:	40020400 	.word	0x40020400

08001790 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001796:	463b      	mov	r3, r7
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800179e:	4b14      	ldr	r3, [pc, #80]	@ (80017f0 <MX_DAC_Init+0x60>)
 80017a0:	4a14      	ldr	r2, [pc, #80]	@ (80017f4 <MX_DAC_Init+0x64>)
 80017a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80017a4:	4812      	ldr	r0, [pc, #72]	@ (80017f0 <MX_DAC_Init+0x60>)
 80017a6:	f001 fa19 	bl	8002bdc <HAL_DAC_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80017b0:	f000 fd02 	bl	80021b8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80017bc:	463b      	mov	r3, r7
 80017be:	2200      	movs	r2, #0
 80017c0:	4619      	mov	r1, r3
 80017c2:	480b      	ldr	r0, [pc, #44]	@ (80017f0 <MX_DAC_Init+0x60>)
 80017c4:	f001 fb0d 	bl	8002de2 <HAL_DAC_ConfigChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80017ce:	f000 fcf3 	bl	80021b8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80017d2:	463b      	mov	r3, r7
 80017d4:	2210      	movs	r2, #16
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	@ (80017f0 <MX_DAC_Init+0x60>)
 80017da:	f001 fb02 	bl	8002de2 <HAL_DAC_ConfigChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80017e4:	f000 fce8 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200009f0 	.word	0x200009f0
 80017f4:	40007400 	.word	0x40007400

080017f8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	@ 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a1b      	ldr	r2, [pc, #108]	@ (8001884 <HAL_DAC_MspInit+0x8c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d12f      	bne.n	800187a <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	4b1a      	ldr	r3, [pc, #104]	@ (8001888 <HAL_DAC_MspInit+0x90>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	4a19      	ldr	r2, [pc, #100]	@ (8001888 <HAL_DAC_MspInit+0x90>)
 8001824:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001828:	6413      	str	r3, [r2, #64]	@ 0x40
 800182a:	4b17      	ldr	r3, [pc, #92]	@ (8001888 <HAL_DAC_MspInit+0x90>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <HAL_DAC_MspInit+0x90>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	4a12      	ldr	r2, [pc, #72]	@ (8001888 <HAL_DAC_MspInit+0x90>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6313      	str	r3, [r2, #48]	@ 0x30
 8001846:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <HAL_DAC_MspInit+0x90>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001852:	2330      	movs	r3, #48	@ 0x30
 8001854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001856:	2303      	movs	r3, #3
 8001858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	4809      	ldr	r0, [pc, #36]	@ (800188c <HAL_DAC_MspInit+0x94>)
 8001866:	f001 fe8f 	bl	8003588 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	210f      	movs	r1, #15
 800186e:	2036      	movs	r0, #54	@ 0x36
 8001870:	f001 f98a 	bl	8002b88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001874:	2036      	movs	r0, #54	@ 0x36
 8001876:	f001 f9a3 	bl	8002bc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	@ 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40007400 	.word	0x40007400
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000

08001890 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <MX_DMA_Init+0x4c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	4a0f      	ldr	r2, [pc, #60]	@ (80018dc <MX_DMA_Init+0x4c>)
 80018a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a6:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <MX_DMA_Init+0x4c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2105      	movs	r1, #5
 80018b6:	2038      	movs	r0, #56	@ 0x38
 80018b8:	f001 f966 	bl	8002b88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018bc:	2038      	movs	r0, #56	@ 0x38
 80018be:	f001 f97f 	bl	8002bc0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2105      	movs	r1, #5
 80018c6:	203b      	movs	r0, #59	@ 0x3b
 80018c8:	f001 f95e 	bl	8002b88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80018cc:	203b      	movs	r0, #59	@ 0x3b
 80018ce:	f001 f977 	bl	8002bc0 <HAL_NVIC_EnableIRQ>

}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800

080018e0 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of buttonSemaphore */
	buttonSemaphoreHandle = osSemaphoreNew(1, 0, &buttonSemaphore_attributes);
 80018e4:	4a14      	ldr	r2, [pc, #80]	@ (8001938 <MX_FREERTOS_Init+0x58>)
 80018e6:	2100      	movs	r1, #0
 80018e8:	2001      	movs	r0, #1
 80018ea:	f004 fa8a 	bl	8005e02 <osSemaphoreNew>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4a12      	ldr	r2, [pc, #72]	@ (800193c <MX_FREERTOS_Init+0x5c>)
 80018f2:	6013      	str	r3, [r2, #0]

	/* creation of dac */
	dacHandle = osSemaphoreNew(1, 0, &dac_attributes);
 80018f4:	4a12      	ldr	r2, [pc, #72]	@ (8001940 <MX_FREERTOS_Init+0x60>)
 80018f6:	2100      	movs	r1, #0
 80018f8:	2001      	movs	r0, #1
 80018fa:	f004 fa82 	bl	8005e02 <osSemaphoreNew>
 80018fe:	4603      	mov	r3, r0
 8001900:	4a10      	ldr	r2, [pc, #64]	@ (8001944 <MX_FREERTOS_Init+0x64>)
 8001902:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of TouchPin */
	TouchPinHandle = osThreadNew(StartDefaultTask, NULL, &TouchPin_attributes);
 8001904:	4a10      	ldr	r2, [pc, #64]	@ (8001948 <MX_FREERTOS_Init+0x68>)
 8001906:	2100      	movs	r1, #0
 8001908:	4810      	ldr	r0, [pc, #64]	@ (800194c <MX_FREERTOS_Init+0x6c>)
 800190a:	f004 f9cd 	bl	8005ca8 <osThreadNew>
 800190e:	4603      	mov	r3, r0
 8001910:	4a0f      	ldr	r2, [pc, #60]	@ (8001950 <MX_FREERTOS_Init+0x70>)
 8001912:	6013      	str	r3, [r2, #0]

	/* creation of dac_play */
	dac_playHandle = osThreadNew(DacPlayTask, NULL, &dac_play_attributes);
 8001914:	4a0f      	ldr	r2, [pc, #60]	@ (8001954 <MX_FREERTOS_Init+0x74>)
 8001916:	2100      	movs	r1, #0
 8001918:	480f      	ldr	r0, [pc, #60]	@ (8001958 <MX_FREERTOS_Init+0x78>)
 800191a:	f004 f9c5 	bl	8005ca8 <osThreadNew>
 800191e:	4603      	mov	r3, r0
 8001920:	4a0e      	ldr	r2, [pc, #56]	@ (800195c <MX_FREERTOS_Init+0x7c>)
 8001922:	6013      	str	r3, [r2, #0]

	/* creation of dac_buttun */
	dac_buttunHandle = osThreadNew(DacButtonPlay, NULL, &dac_buttun_attributes);
 8001924:	4a0e      	ldr	r2, [pc, #56]	@ (8001960 <MX_FREERTOS_Init+0x80>)
 8001926:	2100      	movs	r1, #0
 8001928:	480e      	ldr	r0, [pc, #56]	@ (8001964 <MX_FREERTOS_Init+0x84>)
 800192a:	f004 f9bd 	bl	8005ca8 <osThreadNew>
 800192e:	4603      	mov	r3, r0
 8001930:	4a0d      	ldr	r2, [pc, #52]	@ (8001968 <MX_FREERTOS_Init+0x88>)
 8001932:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	0800cf24 	.word	0x0800cf24
 800193c:	20000a1c 	.word	0x20000a1c
 8001940:	0800cf34 	.word	0x0800cf34
 8001944:	20000a20 	.word	0x20000a20
 8001948:	0800ceb8 	.word	0x0800ceb8
 800194c:	080019d5 	.word	0x080019d5
 8001950:	20000a10 	.word	0x20000a10
 8001954:	0800cedc 	.word	0x0800cedc
 8001958:	08001b3d 	.word	0x08001b3d
 800195c:	20000a14 	.word	0x20000a14
 8001960:	0800cf00 	.word	0x0800cf00
 8001964:	08001b95 	.word	0x08001b95
 8001968:	20000a18 	.word	0x20000a18

0800196c <HAL_GPIO_EXTI_Callback>:
 */

bool check = false;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
	osDelay(500);
 8001976:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800197a:	f004 fa27 	bl	8005dcc <osDelay>
	if (GPIO_Pin == TP_IRQ_Pin)
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	2b10      	cmp	r3, #16
 8001982:	d10a      	bne.n	800199a <HAL_GPIO_EXTI_Callback+0x2e>
	{
		osSemaphoreRelease(buttonSemaphoreHandle);
 8001984:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <HAL_GPIO_EXTI_Callback+0x54>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f004 fb15 	bl	8005fb8 <osSemaphoreRelease>
		HAL_UART_Transmit(&huart2, (uint8_t *)"2\n\r", strlen("2\n\r"), 100);
 800198e:	2364      	movs	r3, #100	@ 0x64
 8001990:	2203      	movs	r2, #3
 8001992:	490c      	ldr	r1, [pc, #48]	@ (80019c4 <HAL_GPIO_EXTI_Callback+0x58>)
 8001994:	480c      	ldr	r0, [pc, #48]	@ (80019c8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001996:	f003 fd3d 	bl	8005414 <HAL_UART_Transmit>
	}
	if (GPIO_Pin == BTN1_Pin)
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d108      	bne.n	80019b2 <HAL_GPIO_EXTI_Callback+0x46>
	{
		check = true;
 80019a0:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x60>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
		osSemaphoreRelease(dacHandle);
 80019a6:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0x64>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f004 fb04 	bl	8005fb8 <osSemaphoreRelease>

	else
	{
		check = false;
	}
}
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_EXTI_Callback+0x4c>
		check = false;
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x60>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000a1c 	.word	0x20000a1c
 80019c4:	0800ad78 	.word	0x0800ad78
 80019c8:	20000b8c 	.word	0x20000b8c
 80019cc:	20000a24 	.word	0x20000a24
 80019d0:	20000a20 	.word	0x20000a20

080019d4 <StartDefaultTask>:

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b092      	sub	sp, #72	@ 0x48
 80019d8:	af02      	add	r7, sp, #8
 80019da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartDefaultTask */

	initScreen();
 80019dc:	f000 f910 	bl	8001c00 <initScreen>
	/* Infinite loop */
	for (;;)
	{
		osSemaphoreAcquire(buttonSemaphoreHandle, portMAX_DELAY);
 80019e0:	4b52      	ldr	r3, [pc, #328]	@ (8001b2c <StartDefaultTask+0x158>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	4618      	mov	r0, r3
 80019ea:	f004 fa93 	bl	8005f14 <osSemaphoreAcquire>
		uint16_t x, y;

		if (XPT2046_TouchPressed())
 80019ee:	f000 fee7 	bl	80027c0 <XPT2046_TouchPressed>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d075      	beq.n	8001ae4 <StartDefaultTask+0x110>
		{

			if (XPT2046_TouchGetCoordinates(&x, &y))
 80019f8:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80019fc:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 feec 	bl	80027e0 <XPT2046_TouchGetCoordinates>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8089 	beq.w	8001b22 <StartDefaultTask+0x14e>
			{
				char buffer[50];
				snprintf(buffer, sizeof(buffer), "X: %d, Y: %d\r\n", x, y);
 8001a10:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001a12:	461a      	mov	r2, r3
 8001a14:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001a16:	f107 0008 	add.w	r0, r7, #8
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	4a44      	ldr	r2, [pc, #272]	@ (8001b30 <StartDefaultTask+0x15c>)
 8001a20:	2132      	movs	r1, #50	@ 0x32
 8001a22:	f007 fbf9 	bl	8009218 <sniprintf>
				HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer),
 8001a26:	f107 0308 	add.w	r3, r7, #8
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fbd0 	bl	80001d0 <strlen>
 8001a30:	4603      	mov	r3, r0
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	f107 0108 	add.w	r1, r7, #8
 8001a38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a3c:	483d      	ldr	r0, [pc, #244]	@ (8001b34 <StartDefaultTask+0x160>)
 8001a3e:	f003 fce9 	bl	8005414 <HAL_UART_Transmit>
								  1000);

				if (x > 170 && x < 220 && y > 60 && y < 100)
 8001a42:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001a44:	2baa      	cmp	r3, #170	@ 0xaa
 8001a46:	d915      	bls.n	8001a74 <StartDefaultTask+0xa0>
 8001a48:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001a4a:	2bdb      	cmp	r3, #219	@ 0xdb
 8001a4c:	d812      	bhi.n	8001a74 <StartDefaultTask+0xa0>
 8001a4e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001a50:	2b3c      	cmp	r3, #60	@ 0x3c
 8001a52:	d90f      	bls.n	8001a74 <StartDefaultTask+0xa0>
 8001a54:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001a56:	2b63      	cmp	r3, #99	@ 0x63
 8001a58:	d80c      	bhi.n	8001a74 <StartDefaultTask+0xa0>
				{
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	4836      	ldr	r0, [pc, #216]	@ (8001b38 <StartDefaultTask+0x164>)
 8001a60:	f001 ff46 	bl	80038f0 <HAL_GPIO_WritePin>
					ST7789_DrawFilledCircle(180, 90, 20, YELLOW);
 8001a64:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a68:	2214      	movs	r2, #20
 8001a6a:	215a      	movs	r1, #90	@ 0x5a
 8001a6c:	20b4      	movs	r0, #180	@ 0xb4
 8001a6e:	f7ff fda9 	bl	80015c4 <ST7789_DrawFilledCircle>
 8001a72:	e056      	b.n	8001b22 <StartDefaultTask+0x14e>
				}
				else if (x > 170 && x < 220 && y > 140 && y < 180)
 8001a74:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001a76:	2baa      	cmp	r3, #170	@ 0xaa
 8001a78:	d915      	bls.n	8001aa6 <StartDefaultTask+0xd2>
 8001a7a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001a7c:	2bdb      	cmp	r3, #219	@ 0xdb
 8001a7e:	d812      	bhi.n	8001aa6 <StartDefaultTask+0xd2>
 8001a80:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001a82:	2b8c      	cmp	r3, #140	@ 0x8c
 8001a84:	d90f      	bls.n	8001aa6 <StartDefaultTask+0xd2>
 8001a86:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001a88:	2bb3      	cmp	r3, #179	@ 0xb3
 8001a8a:	d80c      	bhi.n	8001aa6 <StartDefaultTask+0xd2>
				{
					HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	2102      	movs	r1, #2
 8001a90:	4829      	ldr	r0, [pc, #164]	@ (8001b38 <StartDefaultTask+0x164>)
 8001a92:	f001 ff2d 	bl	80038f0 <HAL_GPIO_WritePin>
					ST7789_DrawFilledCircle(180, 160, 20, YELLOW);
 8001a96:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a9a:	2214      	movs	r2, #20
 8001a9c:	21a0      	movs	r1, #160	@ 0xa0
 8001a9e:	20b4      	movs	r0, #180	@ 0xb4
 8001aa0:	f7ff fd90 	bl	80015c4 <ST7789_DrawFilledCircle>
 8001aa4:	e03d      	b.n	8001b22 <StartDefaultTask+0x14e>
				}

				else if (x > 170 && x < 220 && y > 210 && y < 270)
 8001aa6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001aa8:	2baa      	cmp	r3, #170	@ 0xaa
 8001aaa:	d93a      	bls.n	8001b22 <StartDefaultTask+0x14e>
 8001aac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001aae:	2bdb      	cmp	r3, #219	@ 0xdb
 8001ab0:	d837      	bhi.n	8001b22 <StartDefaultTask+0x14e>
 8001ab2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001ab4:	2bd2      	cmp	r3, #210	@ 0xd2
 8001ab6:	d934      	bls.n	8001b22 <StartDefaultTask+0x14e>
 8001ab8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001aba:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8001abe:	d230      	bcs.n	8001b22 <StartDefaultTask+0x14e>
				{
					HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	481c      	ldr	r0, [pc, #112]	@ (8001b38 <StartDefaultTask+0x164>)
 8001ac6:	f001 ff13 	bl	80038f0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001aca:	2201      	movs	r2, #1
 8001acc:	2101      	movs	r1, #1
 8001ace:	481a      	ldr	r0, [pc, #104]	@ (8001b38 <StartDefaultTask+0x164>)
 8001ad0:	f001 ff0e 	bl	80038f0 <HAL_GPIO_WritePin>
					ST7789_DrawFilledCircle(180, 230, 20, YELLOW);
 8001ad4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001ad8:	2214      	movs	r2, #20
 8001ada:	21e6      	movs	r1, #230	@ 0xe6
 8001adc:	20b4      	movs	r0, #180	@ 0xb4
 8001ade:	f7ff fd71 	bl	80015c4 <ST7789_DrawFilledCircle>
 8001ae2:	e01e      	b.n	8001b22 <StartDefaultTask+0x14e>
				}
			}
		}
		else
		{
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2102      	movs	r1, #2
 8001ae8:	4813      	ldr	r0, [pc, #76]	@ (8001b38 <StartDefaultTask+0x164>)
 8001aea:	f001 ff01 	bl	80038f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2101      	movs	r1, #1
 8001af2:	4811      	ldr	r0, [pc, #68]	@ (8001b38 <StartDefaultTask+0x164>)
 8001af4:	f001 fefc 	bl	80038f0 <HAL_GPIO_WritePin>
			ST7789_DrawFilledCircle(180, 230, 20, RED);
 8001af8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001afc:	2214      	movs	r2, #20
 8001afe:	21e6      	movs	r1, #230	@ 0xe6
 8001b00:	20b4      	movs	r0, #180	@ 0xb4
 8001b02:	f7ff fd5f 	bl	80015c4 <ST7789_DrawFilledCircle>
			ST7789_DrawFilledCircle(180, 160, 20, RED);
 8001b06:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001b0a:	2214      	movs	r2, #20
 8001b0c:	21a0      	movs	r1, #160	@ 0xa0
 8001b0e:	20b4      	movs	r0, #180	@ 0xb4
 8001b10:	f7ff fd58 	bl	80015c4 <ST7789_DrawFilledCircle>
			ST7789_DrawFilledCircle(180, 90, 20, RED);
 8001b14:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001b18:	2214      	movs	r2, #20
 8001b1a:	215a      	movs	r1, #90	@ 0x5a
 8001b1c:	20b4      	movs	r0, #180	@ 0xb4
 8001b1e:	f7ff fd51 	bl	80015c4 <ST7789_DrawFilledCircle>
		}
		osDelay(100);
 8001b22:	2064      	movs	r0, #100	@ 0x64
 8001b24:	f004 f952 	bl	8005dcc <osDelay>
	{
 8001b28:	e75a      	b.n	80019e0 <StartDefaultTask+0xc>
 8001b2a:	bf00      	nop
 8001b2c:	20000a1c 	.word	0x20000a1c
 8001b30:	0800ad7c 	.word	0x0800ad7c
 8001b34:	20000b8c 	.word	0x20000b8c
 8001b38:	40020400 	.word	0x40020400

08001b3c <DacPlayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DacPlayTask */
void DacPlayTask(void *argument)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN DacPlayTask */
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001b44:	2110      	movs	r1, #16
 8001b46:	4810      	ldr	r0, [pc, #64]	@ (8001b88 <DacPlayTask+0x4c>)
 8001b48:	f001 f86a 	bl	8002c20 <HAL_DAC_Start>
	GenerateSineWave();
 8001b4c:	f000 f928 	bl	8001da0 <GenerateSineWave>
	for (;;)
	{

		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, sine_wave_play[sampleIndex]);
 8001b50:	4b0e      	ldr	r3, [pc, #56]	@ (8001b8c <DacPlayTask+0x50>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b0e      	ldr	r3, [pc, #56]	@ (8001b90 <DacPlayTask+0x54>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2110      	movs	r1, #16
 8001b62:	4809      	ldr	r0, [pc, #36]	@ (8001b88 <DacPlayTask+0x4c>)
 8001b64:	f001 f909 	bl	8002d7a <HAL_DAC_SetValue>
		if (sampleIndex >= SAMPLES)
 8001b68:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <DacPlayTask+0x54>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b09      	cmp	r3, #9
 8001b6e:	d902      	bls.n	8001b76 <DacPlayTask+0x3a>
			sampleIndex = 0;
 8001b70:	4b07      	ldr	r3, [pc, #28]	@ (8001b90 <DacPlayTask+0x54>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]

		sampleIndex++;
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <DacPlayTask+0x54>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	4a04      	ldr	r2, [pc, #16]	@ (8001b90 <DacPlayTask+0x54>)
 8001b7e:	6013      	str	r3, [r2, #0]
		osDelay(1);
 8001b80:	2001      	movs	r0, #1
 8001b82:	f004 f923 	bl	8005dcc <osDelay>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, sine_wave_play[sampleIndex]);
 8001b86:	e7e3      	b.n	8001b50 <DacPlayTask+0x14>
 8001b88:	200009f0 	.word	0x200009f0
 8001b8c:	20000a04 	.word	0x20000a04
 8001b90:	20000a0c 	.word	0x20000a0c

08001b94 <DacButtonPlay>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DacButtonPlay */
void DacButtonPlay(void *argument)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN DacButtonPlay */
	/* Infinite loop */
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001b9c:	2110      	movs	r1, #16
 8001b9e:	4814      	ldr	r0, [pc, #80]	@ (8001bf0 <DacButtonPlay+0x5c>)
 8001ba0:	f001 f83e 	bl	8002c20 <HAL_DAC_Start>
	GenerateSineWave2();
 8001ba4:	f000 f960 	bl	8001e68 <GenerateSineWave2>
	for (;;)
	{
		if (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) ==GPIO_PIN_RESET)
 8001ba8:	2101      	movs	r1, #1
 8001baa:	4812      	ldr	r0, [pc, #72]	@ (8001bf4 <DacButtonPlay+0x60>)
 8001bac:	f001 fe88 	bl	80038c0 <HAL_GPIO_ReadPin>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f8      	bne.n	8001ba8 <DacButtonPlay+0x14>
		{
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, sine_wave[sampleIndex]);
 8001bb6:	4b10      	ldr	r3, [pc, #64]	@ (8001bf8 <DacButtonPlay+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <DacButtonPlay+0x68>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2110      	movs	r1, #16
 8001bc8:	4809      	ldr	r0, [pc, #36]	@ (8001bf0 <DacButtonPlay+0x5c>)
 8001bca:	f001 f8d6 	bl	8002d7a <HAL_DAC_SetValue>
			if (sampleIndex >= SAMPLES)
 8001bce:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <DacButtonPlay+0x68>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b09      	cmp	r3, #9
 8001bd4:	d902      	bls.n	8001bdc <DacButtonPlay+0x48>
				sampleIndex = 0;
 8001bd6:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <DacButtonPlay+0x68>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

			sampleIndex++;
 8001bdc:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <DacButtonPlay+0x68>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	4a06      	ldr	r2, [pc, #24]	@ (8001bfc <DacButtonPlay+0x68>)
 8001be4:	6013      	str	r3, [r2, #0]
			osDelay(1);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f004 f8f0 	bl	8005dcc <osDelay>
		if (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) ==GPIO_PIN_RESET)
 8001bec:	e7dc      	b.n	8001ba8 <DacButtonPlay+0x14>
 8001bee:	bf00      	nop
 8001bf0:	200009f0 	.word	0x200009f0
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	20000a08 	.word	0x20000a08
 8001bfc:	20000a0c 	.word	0x20000a0c

08001c00 <initScreen>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void initScreen()
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af04      	add	r7, sp, #16
	ST7789_Fill_Color(WHITE);
 8001c06:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001c0a:	f7ff fb13 	bl	8001234 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Embedded HCMUS", Font_16x26, GREEN, WHITE);
 8001c0e:	4b58      	ldr	r3, [pc, #352]	@ (8001d70 <initScreen+0x170>)
 8001c10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c14:	9202      	str	r2, [sp, #8]
 8001c16:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001c1a:	9201      	str	r2, [sp, #4]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	9200      	str	r2, [sp, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a54      	ldr	r2, [pc, #336]	@ (8001d74 <initScreen+0x174>)
 8001c24:	210a      	movs	r1, #10
 8001c26:	200a      	movs	r0, #10
 8001c28:	f7ff fc78 	bl	800151c <ST7789_WriteString>

	ST7789_WriteString(40, 50, "BTN1", Font_11x18, RED, WHITE);
 8001c2c:	4b52      	ldr	r3, [pc, #328]	@ (8001d78 <initScreen+0x178>)
 8001c2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c32:	9202      	str	r2, [sp, #8]
 8001c34:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001c38:	9201      	str	r2, [sp, #4]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	9200      	str	r2, [sp, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a4e      	ldr	r2, [pc, #312]	@ (8001d7c <initScreen+0x17c>)
 8001c42:	2132      	movs	r1, #50	@ 0x32
 8001c44:	2028      	movs	r0, #40	@ 0x28
 8001c46:	f7ff fc69 	bl	800151c <ST7789_WriteString>
	ST7789_DrawFilledCircle(60, 90, 20, BLUE);
 8001c4a:	231f      	movs	r3, #31
 8001c4c:	2214      	movs	r2, #20
 8001c4e:	215a      	movs	r1, #90	@ 0x5a
 8001c50:	203c      	movs	r0, #60	@ 0x3c
 8001c52:	f7ff fcb7 	bl	80015c4 <ST7789_DrawFilledCircle>

	ST7789_WriteString(160, 50, "LED1", Font_11x18, RED, WHITE);
 8001c56:	4b48      	ldr	r3, [pc, #288]	@ (8001d78 <initScreen+0x178>)
 8001c58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c5c:	9202      	str	r2, [sp, #8]
 8001c5e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001c62:	9201      	str	r2, [sp, #4]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	9200      	str	r2, [sp, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a45      	ldr	r2, [pc, #276]	@ (8001d80 <initScreen+0x180>)
 8001c6c:	2132      	movs	r1, #50	@ 0x32
 8001c6e:	20a0      	movs	r0, #160	@ 0xa0
 8001c70:	f7ff fc54 	bl	800151c <ST7789_WriteString>
	ST7789_DrawFilledCircle(180, 90, 20, RED);
 8001c74:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001c78:	2214      	movs	r2, #20
 8001c7a:	215a      	movs	r1, #90	@ 0x5a
 8001c7c:	20b4      	movs	r0, #180	@ 0xb4
 8001c7e:	f7ff fca1 	bl	80015c4 <ST7789_DrawFilledCircle>

	ST7789_WriteString(40, 120, "BTN2", Font_11x18, RED, WHITE);
 8001c82:	4b3d      	ldr	r3, [pc, #244]	@ (8001d78 <initScreen+0x178>)
 8001c84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c88:	9202      	str	r2, [sp, #8]
 8001c8a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001c8e:	9201      	str	r2, [sp, #4]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	9200      	str	r2, [sp, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a3b      	ldr	r2, [pc, #236]	@ (8001d84 <initScreen+0x184>)
 8001c98:	2178      	movs	r1, #120	@ 0x78
 8001c9a:	2028      	movs	r0, #40	@ 0x28
 8001c9c:	f7ff fc3e 	bl	800151c <ST7789_WriteString>
	ST7789_DrawFilledCircle(60, 160, 20, BLUE);
 8001ca0:	231f      	movs	r3, #31
 8001ca2:	2214      	movs	r2, #20
 8001ca4:	21a0      	movs	r1, #160	@ 0xa0
 8001ca6:	203c      	movs	r0, #60	@ 0x3c
 8001ca8:	f7ff fc8c 	bl	80015c4 <ST7789_DrawFilledCircle>

	ST7789_WriteString(160, 120, "LED2", Font_11x18, RED, WHITE);
 8001cac:	4b32      	ldr	r3, [pc, #200]	@ (8001d78 <initScreen+0x178>)
 8001cae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cb2:	9202      	str	r2, [sp, #8]
 8001cb4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001cb8:	9201      	str	r2, [sp, #4]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	9200      	str	r2, [sp, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a31      	ldr	r2, [pc, #196]	@ (8001d88 <initScreen+0x188>)
 8001cc2:	2178      	movs	r1, #120	@ 0x78
 8001cc4:	20a0      	movs	r0, #160	@ 0xa0
 8001cc6:	f7ff fc29 	bl	800151c <ST7789_WriteString>
	ST7789_DrawFilledCircle(180, 160, 20, RED);
 8001cca:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001cce:	2214      	movs	r2, #20
 8001cd0:	21a0      	movs	r1, #160	@ 0xa0
 8001cd2:	20b4      	movs	r0, #180	@ 0xb4
 8001cd4:	f7ff fc76 	bl	80015c4 <ST7789_DrawFilledCircle>

	ST7789_WriteString(20, 190, "BTN_DUAL", Font_11x18, RED, WHITE);
 8001cd8:	4b27      	ldr	r3, [pc, #156]	@ (8001d78 <initScreen+0x178>)
 8001cda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cde:	9202      	str	r2, [sp, #8]
 8001ce0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001ce4:	9201      	str	r2, [sp, #4]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	9200      	str	r2, [sp, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a27      	ldr	r2, [pc, #156]	@ (8001d8c <initScreen+0x18c>)
 8001cee:	21be      	movs	r1, #190	@ 0xbe
 8001cf0:	2014      	movs	r0, #20
 8001cf2:	f7ff fc13 	bl	800151c <ST7789_WriteString>
	ST7789_DrawFilledCircle(60, 230, 20, BLUE);
 8001cf6:	231f      	movs	r3, #31
 8001cf8:	2214      	movs	r2, #20
 8001cfa:	21e6      	movs	r1, #230	@ 0xe6
 8001cfc:	203c      	movs	r0, #60	@ 0x3c
 8001cfe:	f7ff fc61 	bl	80015c4 <ST7789_DrawFilledCircle>

	ST7789_WriteString(140, 190, "DUAL_LED", Font_11x18, RED, WHITE);
 8001d02:	4b1d      	ldr	r3, [pc, #116]	@ (8001d78 <initScreen+0x178>)
 8001d04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d08:	9202      	str	r2, [sp, #8]
 8001d0a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001d0e:	9201      	str	r2, [sp, #4]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	9200      	str	r2, [sp, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1e      	ldr	r2, [pc, #120]	@ (8001d90 <initScreen+0x190>)
 8001d18:	21be      	movs	r1, #190	@ 0xbe
 8001d1a:	208c      	movs	r0, #140	@ 0x8c
 8001d1c:	f7ff fbfe 	bl	800151c <ST7789_WriteString>
	ST7789_DrawFilledCircle(180, 230, 20, RED);
 8001d20:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001d24:	2214      	movs	r2, #20
 8001d26:	21e6      	movs	r1, #230	@ 0xe6
 8001d28:	20b4      	movs	r0, #180	@ 0xb4
 8001d2a:	f7ff fc4b 	bl	80015c4 <ST7789_DrawFilledCircle>
	ST7789_WriteString(30, 270, "20200381-21200370", Font_11x18, BLUE, WHITE);
 8001d2e:	4b12      	ldr	r3, [pc, #72]	@ (8001d78 <initScreen+0x178>)
 8001d30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d34:	9202      	str	r2, [sp, #8]
 8001d36:	221f      	movs	r2, #31
 8001d38:	9201      	str	r2, [sp, #4]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	9200      	str	r2, [sp, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a14      	ldr	r2, [pc, #80]	@ (8001d94 <initScreen+0x194>)
 8001d42:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8001d46:	201e      	movs	r0, #30
 8001d48:	f7ff fbe8 	bl	800151c <ST7789_WriteString>
	ST7789_WriteString(30, 290, "  Trung -  Viet", Font_11x18, BLUE, WHITE);
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <initScreen+0x178>)
 8001d4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d52:	9202      	str	r2, [sp, #8]
 8001d54:	221f      	movs	r2, #31
 8001d56:	9201      	str	r2, [sp, #4]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	9200      	str	r2, [sp, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d98 <initScreen+0x198>)
 8001d60:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8001d64:	201e      	movs	r0, #30
 8001d66:	f7ff fbd9 	bl	800151c <ST7789_WriteString>
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000008 	.word	0x20000008
 8001d74:	0800ad8c 	.word	0x0800ad8c
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	0800ad9c 	.word	0x0800ad9c
 8001d80:	0800ada4 	.word	0x0800ada4
 8001d84:	0800adac 	.word	0x0800adac
 8001d88:	0800adb4 	.word	0x0800adb4
 8001d8c:	0800adbc 	.word	0x0800adbc
 8001d90:	0800adc8 	.word	0x0800adc8
 8001d94:	0800add4 	.word	0x0800add4
 8001d98:	0800ade8 	.word	0x0800ade8
 8001d9c:	00000000 	.word	0x00000000

08001da0 <GenerateSineWave>:
void GenerateSineWave()
{
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
	for (int i = 0; i < SAMPLES; i++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	e047      	b.n	8001e3c <GenerateSineWave+0x9c>
	{
		sine_wave_play[i] = ((sin(i * 2 * pi / SAMPLES) + 1) * res_12b / 2);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe fbb7 	bl	8000524 <__aeabi_i2d>
 8001db6:	a32a      	add	r3, pc, #168	@ (adr r3, 8001e60 <GenerateSineWave+0xc0>)
 8001db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbc:	f7fe fc1c 	bl	80005f8 <__aeabi_dmul>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	4b20      	ldr	r3, [pc, #128]	@ (8001e50 <GenerateSineWave+0xb0>)
 8001dce:	f7fe fd3d 	bl	800084c <__aeabi_ddiv>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	ec43 2b17 	vmov	d7, r2, r3
 8001dda:	eeb0 0a47 	vmov.f32	s0, s14
 8001dde:	eef0 0a67 	vmov.f32	s1, s15
 8001de2:	f007 ff25 	bl	8009c30 <sin>
 8001de6:	ec51 0b10 	vmov	r0, r1, d0
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	4b19      	ldr	r3, [pc, #100]	@ (8001e54 <GenerateSineWave+0xb4>)
 8001df0:	f7fe fa4c 	bl	800028c <__adddf3>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <GenerateSineWave+0xb8>)
 8001e02:	f7fe fbf9 	bl	80005f8 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e16:	f7fe fd19 	bl	800084c <__aeabi_ddiv>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <GenerateSineWave+0xbc>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	18d4      	adds	r4, r2, r3
 8001e2c:	f7fe fea6 	bl	8000b7c <__aeabi_d2uiz>
 8001e30:	4603      	mov	r3, r0
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	8023      	strh	r3, [r4, #0]
	for (int i = 0; i < SAMPLES; i++)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b09      	cmp	r3, #9
 8001e40:	ddb4      	ble.n	8001dac <GenerateSineWave+0xc>
	}
}
 8001e42:	bf00      	nop
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd90      	pop	{r4, r7, pc}
 8001e4c:	f3af 8000 	nop.w
 8001e50:	40240000 	.word	0x40240000
 8001e54:	3ff00000 	.word	0x3ff00000
 8001e58:	40b00000 	.word	0x40b00000
 8001e5c:	20000a04 	.word	0x20000a04
 8001e60:	d2412aee 	.word	0xd2412aee
 8001e64:	400921e9 	.word	0x400921e9

08001e68 <GenerateSineWave2>:
void GenerateSineWave2()
{
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
	for (int i = 0; i < SAMPLES; i++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	e047      	b.n	8001f04 <GenerateSineWave2+0x9c>
	{
		sine_wave[i] = ((sin(i * 2 * pi / SAMPLES) + 1) * res_8b / 2);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fb53 	bl	8000524 <__aeabi_i2d>
 8001e7e:	a32b      	add	r3, pc, #172	@ (adr r3, 8001f2c <GenerateSineWave2+0xc4>)
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	f7fe fbb8 	bl	80005f8 <__aeabi_dmul>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	4b22      	ldr	r3, [pc, #136]	@ (8001f20 <GenerateSineWave2+0xb8>)
 8001e96:	f7fe fcd9 	bl	800084c <__aeabi_ddiv>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	ec43 2b17 	vmov	d7, r2, r3
 8001ea2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ea6:	eef0 0a67 	vmov.f32	s1, s15
 8001eaa:	f007 fec1 	bl	8009c30 <sin>
 8001eae:	ec51 0b10 	vmov	r0, r1, d0
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <GenerateSineWave2+0xbc>)
 8001eb8:	f7fe f9e8 	bl	800028c <__adddf3>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	a314      	add	r3, pc, #80	@ (adr r3, 8001f18 <GenerateSineWave2+0xb0>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	f7fe fb95 	bl	80005f8 <__aeabi_dmul>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ede:	f7fe fcb5 	bl	800084c <__aeabi_ddiv>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4b0f      	ldr	r3, [pc, #60]	@ (8001f28 <GenerateSineWave2+0xc0>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	18d4      	adds	r4, r2, r3
 8001ef4:	f7fe fe42 	bl	8000b7c <__aeabi_d2uiz>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	8023      	strh	r3, [r4, #0]
	for (int i = 0; i < SAMPLES; i++)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3301      	adds	r3, #1
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b09      	cmp	r3, #9
 8001f08:	ddb4      	ble.n	8001e74 <GenerateSineWave2+0xc>
	}
}
 8001f0a:	bf00      	nop
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd90      	pop	{r4, r7, pc}
 8001f14:	f3af 8000 	nop.w
 8001f18:	00000000 	.word	0x00000000
 8001f1c:	406ea000 	.word	0x406ea000
 8001f20:	40240000 	.word	0x40240000
 8001f24:	3ff00000 	.word	0x3ff00000
 8001f28:	20000a08 	.word	0x20000a08
 8001f2c:	d2412aee 	.word	0xd2412aee
 8001f30:	400921e9 	.word	0x400921e9

08001f34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3a:	f107 030c 	add.w	r3, r7, #12
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
 8001f48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	4b43      	ldr	r3, [pc, #268]	@ (800205c <MX_GPIO_Init+0x128>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	4a42      	ldr	r2, [pc, #264]	@ (800205c <MX_GPIO_Init+0x128>)
 8001f54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5a:	4b40      	ldr	r3, [pc, #256]	@ (800205c <MX_GPIO_Init+0x128>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	4b3c      	ldr	r3, [pc, #240]	@ (800205c <MX_GPIO_Init+0x128>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	4a3b      	ldr	r2, [pc, #236]	@ (800205c <MX_GPIO_Init+0x128>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f76:	4b39      	ldr	r3, [pc, #228]	@ (800205c <MX_GPIO_Init+0x128>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	603b      	str	r3, [r7, #0]
 8001f86:	4b35      	ldr	r3, [pc, #212]	@ (800205c <MX_GPIO_Init+0x128>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	4a34      	ldr	r2, [pc, #208]	@ (800205c <MX_GPIO_Init+0x128>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f92:	4b32      	ldr	r3, [pc, #200]	@ (800205c <MX_GPIO_Init+0x128>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LCD_CS_Pin|LCD_DC_Pin
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f240 3183 	movw	r1, #899	@ 0x383
 8001fa4:	482e      	ldr	r0, [pc, #184]	@ (8002060 <MX_GPIO_Init+0x12c>)
 8001fa6:	f001 fca3 	bl	80038f0 <HAL_GPIO_WritePin>
                          |TP_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_BL_Pin, GPIO_PIN_SET);
 8001faa:	2201      	movs	r2, #1
 8001fac:	2144      	movs	r1, #68	@ 0x44
 8001fae:	482c      	ldr	r0, [pc, #176]	@ (8002060 <MX_GPIO_Init+0x12c>)
 8001fb0:	f001 fc9e 	bl	80038f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fb8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc2:	f107 030c 	add.w	r3, r7, #12
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4826      	ldr	r0, [pc, #152]	@ (8002064 <MX_GPIO_Init+0x130>)
 8001fca:	f001 fadd 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	481e      	ldr	r0, [pc, #120]	@ (8002060 <MX_GPIO_Init+0x12c>)
 8001fe6:	f001 facf 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_BL_Pin|LCD_CS_Pin|LCD_DC_Pin
 8001fea:	f44f 7371 	mov.w	r3, #964	@ 0x3c4
 8001fee:	60fb      	str	r3, [r7, #12]
                          |TP_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	f107 030c 	add.w	r3, r7, #12
 8002000:	4619      	mov	r1, r3
 8002002:	4817      	ldr	r0, [pc, #92]	@ (8002060 <MX_GPIO_Init+0x12c>)
 8002004:	f001 fac0 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8002008:	2310      	movs	r3, #16
 800200a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800200c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002010:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002012:	2301      	movs	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002016:	f107 030c 	add.w	r3, r7, #12
 800201a:	4619      	mov	r1, r3
 800201c:	4810      	ldr	r0, [pc, #64]	@ (8002060 <MX_GPIO_Init+0x12c>)
 800201e:	f001 fab3 	bl	8003588 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002022:	2200      	movs	r2, #0
 8002024:	2105      	movs	r1, #5
 8002026:	2006      	movs	r0, #6
 8002028:	f000 fdae 	bl	8002b88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800202c:	2006      	movs	r0, #6
 800202e:	f000 fdc7 	bl	8002bc0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2105      	movs	r1, #5
 8002036:	2007      	movs	r0, #7
 8002038:	f000 fda6 	bl	8002b88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800203c:	2007      	movs	r0, #7
 800203e:	f000 fdbf 	bl	8002bc0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	210f      	movs	r1, #15
 8002046:	200a      	movs	r0, #10
 8002048:	f000 fd9e 	bl	8002b88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800204c:	200a      	movs	r0, #10
 800204e:	f000 fdb7 	bl	8002bc0 <HAL_NVIC_EnableIRQ>

}
 8002052:	bf00      	nop
 8002054:	3720      	adds	r7, #32
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800
 8002060:	40020400 	.word	0x40020400
 8002064:	40020000 	.word	0x40020000

08002068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800206c:	f000 fc6e 	bl	800294c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002070:	f000 f828 	bl	80020c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002074:	f7ff ff5e 	bl	8001f34 <MX_GPIO_Init>
  MX_DMA_Init();
 8002078:	f7ff fc0a 	bl	8001890 <MX_DMA_Init>
  MX_SPI1_Init();
 800207c:	f000 f8a2 	bl	80021c4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002080:	f000 faea 	bl	8002658 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8002084:	f7ff fb84 	bl	8001790 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8002088:	2201      	movs	r2, #1
 800208a:	2101      	movs	r1, #1
 800208c:	480b      	ldr	r0, [pc, #44]	@ (80020bc <main+0x54>)
 800208e:	f001 fc2f 	bl	80038f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8002092:	2201      	movs	r2, #1
 8002094:	2102      	movs	r1, #2
 8002096:	4809      	ldr	r0, [pc, #36]	@ (80020bc <main+0x54>)
 8002098:	f001 fc2a 	bl	80038f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET);
 800209c:	2201      	movs	r2, #1
 800209e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020a2:	4807      	ldr	r0, [pc, #28]	@ (80020c0 <main+0x58>)
 80020a4:	f001 fc24 	bl	80038f0 <HAL_GPIO_WritePin>
	ST7789_Init();
 80020a8:	f7ff f81e 	bl	80010e8 <ST7789_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80020ac:	f003 fdb2 	bl	8005c14 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80020b0:	f7ff fc16 	bl	80018e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80020b4:	f003 fdd2 	bl	8005c5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <main+0x50>
 80020bc:	40020000 	.word	0x40020000
 80020c0:	40020400 	.word	0x40020400

080020c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b094      	sub	sp, #80	@ 0x50
 80020c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ca:	f107 0320 	add.w	r3, r7, #32
 80020ce:	2230      	movs	r2, #48	@ 0x30
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f007 f8d4 	bl	8009280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e8:	2300      	movs	r3, #0
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	4b27      	ldr	r3, [pc, #156]	@ (800218c <SystemClock_Config+0xc8>)
 80020ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f0:	4a26      	ldr	r2, [pc, #152]	@ (800218c <SystemClock_Config+0xc8>)
 80020f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f8:	4b24      	ldr	r3, [pc, #144]	@ (800218c <SystemClock_Config+0xc8>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002104:	2300      	movs	r3, #0
 8002106:	607b      	str	r3, [r7, #4]
 8002108:	4b21      	ldr	r3, [pc, #132]	@ (8002190 <SystemClock_Config+0xcc>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a20      	ldr	r2, [pc, #128]	@ (8002190 <SystemClock_Config+0xcc>)
 800210e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4b1e      	ldr	r3, [pc, #120]	@ (8002190 <SystemClock_Config+0xcc>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002120:	2301      	movs	r3, #1
 8002122:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002124:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800212a:	2302      	movs	r3, #2
 800212c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800212e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002132:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002134:	2304      	movs	r3, #4
 8002136:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002138:	2354      	movs	r3, #84	@ 0x54
 800213a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800213c:	2302      	movs	r3, #2
 800213e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002140:	2304      	movs	r3, #4
 8002142:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002144:	f107 0320 	add.w	r3, r7, #32
 8002148:	4618      	mov	r0, r3
 800214a:	f001 fc03 	bl	8003954 <HAL_RCC_OscConfig>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002154:	f000 f830 	bl	80021b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002158:	230f      	movs	r3, #15
 800215a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800215c:	2302      	movs	r3, #2
 800215e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002164:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002168:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800216e:	f107 030c 	add.w	r3, r7, #12
 8002172:	2102      	movs	r1, #2
 8002174:	4618      	mov	r0, r3
 8002176:	f001 fe65 	bl	8003e44 <HAL_RCC_ClockConfig>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002180:	f000 f81a 	bl	80021b8 <Error_Handler>
  }
}
 8002184:	bf00      	nop
 8002186:	3750      	adds	r7, #80	@ 0x50
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40023800 	.word	0x40023800
 8002190:	40007000 	.word	0x40007000

08002194 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a04      	ldr	r2, [pc, #16]	@ (80021b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021a6:	f000 fbf3 	bl	8002990 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40001000 	.word	0x40001000

080021b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021bc:	b672      	cpsid	i
}
 80021be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <Error_Handler+0x8>

080021c4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80021c8:	4b17      	ldr	r3, [pc, #92]	@ (8002228 <MX_SPI1_Init+0x64>)
 80021ca:	4a18      	ldr	r2, [pc, #96]	@ (800222c <MX_SPI1_Init+0x68>)
 80021cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021ce:	4b16      	ldr	r3, [pc, #88]	@ (8002228 <MX_SPI1_Init+0x64>)
 80021d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021d6:	4b14      	ldr	r3, [pc, #80]	@ (8002228 <MX_SPI1_Init+0x64>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021dc:	4b12      	ldr	r3, [pc, #72]	@ (8002228 <MX_SPI1_Init+0x64>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021e2:	4b11      	ldr	r3, [pc, #68]	@ (8002228 <MX_SPI1_Init+0x64>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002228 <MX_SPI1_Init+0x64>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002228 <MX_SPI1_Init+0x64>)
 80021f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80021f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <MX_SPI1_Init+0x64>)
 80021f8:	2228      	movs	r2, #40	@ 0x28
 80021fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <MX_SPI1_Init+0x64>)
 80021fe:	2200      	movs	r2, #0
 8002200:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002202:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <MX_SPI1_Init+0x64>)
 8002204:	2200      	movs	r2, #0
 8002206:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002208:	4b07      	ldr	r3, [pc, #28]	@ (8002228 <MX_SPI1_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800220e:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <MX_SPI1_Init+0x64>)
 8002210:	220a      	movs	r2, #10
 8002212:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002214:	4804      	ldr	r0, [pc, #16]	@ (8002228 <MX_SPI1_Init+0x64>)
 8002216:	f002 f867 	bl	80042e8 <HAL_SPI_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002220:	f7ff ffca 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000a28 	.word	0x20000a28
 800222c:	40013000 	.word	0x40013000

08002230 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	@ 0x28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a56      	ldr	r2, [pc, #344]	@ (80023a8 <HAL_SPI_MspInit+0x178>)
 800224e:	4293      	cmp	r3, r2
 8002250:	f040 80a6 	bne.w	80023a0 <HAL_SPI_MspInit+0x170>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002254:	2300      	movs	r3, #0
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	4b54      	ldr	r3, [pc, #336]	@ (80023ac <HAL_SPI_MspInit+0x17c>)
 800225a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225c:	4a53      	ldr	r2, [pc, #332]	@ (80023ac <HAL_SPI_MspInit+0x17c>)
 800225e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002262:	6453      	str	r3, [r2, #68]	@ 0x44
 8002264:	4b51      	ldr	r3, [pc, #324]	@ (80023ac <HAL_SPI_MspInit+0x17c>)
 8002266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002268:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	4b4d      	ldr	r3, [pc, #308]	@ (80023ac <HAL_SPI_MspInit+0x17c>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002278:	4a4c      	ldr	r2, [pc, #304]	@ (80023ac <HAL_SPI_MspInit+0x17c>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002280:	4b4a      	ldr	r3, [pc, #296]	@ (80023ac <HAL_SPI_MspInit+0x17c>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228c:	2300      	movs	r3, #0
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	4b46      	ldr	r3, [pc, #280]	@ (80023ac <HAL_SPI_MspInit+0x17c>)
 8002292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002294:	4a45      	ldr	r2, [pc, #276]	@ (80023ac <HAL_SPI_MspInit+0x17c>)
 8002296:	f043 0302 	orr.w	r3, r3, #2
 800229a:	6313      	str	r3, [r2, #48]	@ 0x30
 800229c:	4b43      	ldr	r3, [pc, #268]	@ (80023ac <HAL_SPI_MspInit+0x17c>)
 800229e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = MISO_Pin|MOSI_Pin;
 80022a8:	23c0      	movs	r3, #192	@ 0xc0
 80022aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b0:	2301      	movs	r3, #1
 80022b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b4:	2303      	movs	r3, #3
 80022b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022b8:	2305      	movs	r3, #5
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4619      	mov	r1, r3
 80022c2:	483b      	ldr	r0, [pc, #236]	@ (80023b0 <HAL_SPI_MspInit+0x180>)
 80022c4:	f001 f960 	bl	8003588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCLK_Pin;
 80022c8:	2308      	movs	r3, #8
 80022ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d0:	2301      	movs	r3, #1
 80022d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d4:	2303      	movs	r3, #3
 80022d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022d8:	2305      	movs	r3, #5
 80022da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCLK_GPIO_Port, &GPIO_InitStruct);
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4619      	mov	r1, r3
 80022e2:	4834      	ldr	r0, [pc, #208]	@ (80023b4 <HAL_SPI_MspInit+0x184>)
 80022e4:	f001 f950 	bl	8003588 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80022e8:	4b33      	ldr	r3, [pc, #204]	@ (80023b8 <HAL_SPI_MspInit+0x188>)
 80022ea:	4a34      	ldr	r2, [pc, #208]	@ (80023bc <HAL_SPI_MspInit+0x18c>)
 80022ec:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80022ee:	4b32      	ldr	r3, [pc, #200]	@ (80023b8 <HAL_SPI_MspInit+0x188>)
 80022f0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80022f4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022f6:	4b30      	ldr	r3, [pc, #192]	@ (80023b8 <HAL_SPI_MspInit+0x188>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022fc:	4b2e      	ldr	r3, [pc, #184]	@ (80023b8 <HAL_SPI_MspInit+0x188>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002302:	4b2d      	ldr	r3, [pc, #180]	@ (80023b8 <HAL_SPI_MspInit+0x188>)
 8002304:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002308:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800230a:	4b2b      	ldr	r3, [pc, #172]	@ (80023b8 <HAL_SPI_MspInit+0x188>)
 800230c:	2200      	movs	r2, #0
 800230e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002310:	4b29      	ldr	r3, [pc, #164]	@ (80023b8 <HAL_SPI_MspInit+0x188>)
 8002312:	2200      	movs	r2, #0
 8002314:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002316:	4b28      	ldr	r3, [pc, #160]	@ (80023b8 <HAL_SPI_MspInit+0x188>)
 8002318:	2200      	movs	r2, #0
 800231a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800231c:	4b26      	ldr	r3, [pc, #152]	@ (80023b8 <HAL_SPI_MspInit+0x188>)
 800231e:	2200      	movs	r2, #0
 8002320:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002322:	4b25      	ldr	r3, [pc, #148]	@ (80023b8 <HAL_SPI_MspInit+0x188>)
 8002324:	2200      	movs	r2, #0
 8002326:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002328:	4823      	ldr	r0, [pc, #140]	@ (80023b8 <HAL_SPI_MspInit+0x188>)
 800232a:	f000 fdbd 	bl	8002ea8 <HAL_DMA_Init>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8002334:	f7ff ff40 	bl	80021b8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a1f      	ldr	r2, [pc, #124]	@ (80023b8 <HAL_SPI_MspInit+0x188>)
 800233c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800233e:	4a1e      	ldr	r2, [pc, #120]	@ (80023b8 <HAL_SPI_MspInit+0x188>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002344:	4b1e      	ldr	r3, [pc, #120]	@ (80023c0 <HAL_SPI_MspInit+0x190>)
 8002346:	4a1f      	ldr	r2, [pc, #124]	@ (80023c4 <HAL_SPI_MspInit+0x194>)
 8002348:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800234a:	4b1d      	ldr	r3, [pc, #116]	@ (80023c0 <HAL_SPI_MspInit+0x190>)
 800234c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002350:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002352:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <HAL_SPI_MspInit+0x190>)
 8002354:	2240      	movs	r2, #64	@ 0x40
 8002356:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002358:	4b19      	ldr	r3, [pc, #100]	@ (80023c0 <HAL_SPI_MspInit+0x190>)
 800235a:	2200      	movs	r2, #0
 800235c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800235e:	4b18      	ldr	r3, [pc, #96]	@ (80023c0 <HAL_SPI_MspInit+0x190>)
 8002360:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002364:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002366:	4b16      	ldr	r3, [pc, #88]	@ (80023c0 <HAL_SPI_MspInit+0x190>)
 8002368:	2200      	movs	r2, #0
 800236a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800236c:	4b14      	ldr	r3, [pc, #80]	@ (80023c0 <HAL_SPI_MspInit+0x190>)
 800236e:	2200      	movs	r2, #0
 8002370:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002372:	4b13      	ldr	r3, [pc, #76]	@ (80023c0 <HAL_SPI_MspInit+0x190>)
 8002374:	2200      	movs	r2, #0
 8002376:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002378:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <HAL_SPI_MspInit+0x190>)
 800237a:	2200      	movs	r2, #0
 800237c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800237e:	4b10      	ldr	r3, [pc, #64]	@ (80023c0 <HAL_SPI_MspInit+0x190>)
 8002380:	2200      	movs	r2, #0
 8002382:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002384:	480e      	ldr	r0, [pc, #56]	@ (80023c0 <HAL_SPI_MspInit+0x190>)
 8002386:	f000 fd8f 	bl	8002ea8 <HAL_DMA_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8002390:	f7ff ff12 	bl	80021b8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <HAL_SPI_MspInit+0x190>)
 8002398:	649a      	str	r2, [r3, #72]	@ 0x48
 800239a:	4a09      	ldr	r2, [pc, #36]	@ (80023c0 <HAL_SPI_MspInit+0x190>)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80023a0:	bf00      	nop
 80023a2:	3728      	adds	r7, #40	@ 0x28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40013000 	.word	0x40013000
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40020000 	.word	0x40020000
 80023b4:	40020400 	.word	0x40020400
 80023b8:	20000a80 	.word	0x20000a80
 80023bc:	40026410 	.word	0x40026410
 80023c0:	20000ae0 	.word	0x20000ae0
 80023c4:	40026458 	.word	0x40026458

080023c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	4b12      	ldr	r3, [pc, #72]	@ (800241c <HAL_MspInit+0x54>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	4a11      	ldr	r2, [pc, #68]	@ (800241c <HAL_MspInit+0x54>)
 80023d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023de:	4b0f      	ldr	r3, [pc, #60]	@ (800241c <HAL_MspInit+0x54>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <HAL_MspInit+0x54>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	4a0a      	ldr	r2, [pc, #40]	@ (800241c <HAL_MspInit+0x54>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023fa:	4b08      	ldr	r3, [pc, #32]	@ (800241c <HAL_MspInit+0x54>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002406:	2200      	movs	r2, #0
 8002408:	210f      	movs	r1, #15
 800240a:	f06f 0001 	mvn.w	r0, #1
 800240e:	f000 fbbb 	bl	8002b88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800

08002420 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08e      	sub	sp, #56	@ 0x38
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	4b33      	ldr	r3, [pc, #204]	@ (8002504 <HAL_InitTick+0xe4>)
 8002436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002438:	4a32      	ldr	r2, [pc, #200]	@ (8002504 <HAL_InitTick+0xe4>)
 800243a:	f043 0310 	orr.w	r3, r3, #16
 800243e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002440:	4b30      	ldr	r3, [pc, #192]	@ (8002504 <HAL_InitTick+0xe4>)
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800244c:	f107 0210 	add.w	r2, r7, #16
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f001 ff14 	bl	8004284 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d103      	bne.n	800246e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002466:	f001 fee5 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 800246a:	6378      	str	r0, [r7, #52]	@ 0x34
 800246c:	e004      	b.n	8002478 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800246e:	f001 fee1 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8002472:	4603      	mov	r3, r0
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800247a:	4a23      	ldr	r2, [pc, #140]	@ (8002508 <HAL_InitTick+0xe8>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	0c9b      	lsrs	r3, r3, #18
 8002482:	3b01      	subs	r3, #1
 8002484:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002486:	4b21      	ldr	r3, [pc, #132]	@ (800250c <HAL_InitTick+0xec>)
 8002488:	4a21      	ldr	r2, [pc, #132]	@ (8002510 <HAL_InitTick+0xf0>)
 800248a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800248c:	4b1f      	ldr	r3, [pc, #124]	@ (800250c <HAL_InitTick+0xec>)
 800248e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002492:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002494:	4a1d      	ldr	r2, [pc, #116]	@ (800250c <HAL_InitTick+0xec>)
 8002496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002498:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800249a:	4b1c      	ldr	r3, [pc, #112]	@ (800250c <HAL_InitTick+0xec>)
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a0:	4b1a      	ldr	r3, [pc, #104]	@ (800250c <HAL_InitTick+0xec>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a6:	4b19      	ldr	r3, [pc, #100]	@ (800250c <HAL_InitTick+0xec>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80024ac:	4817      	ldr	r0, [pc, #92]	@ (800250c <HAL_InitTick+0xec>)
 80024ae:	f002 fcbf 	bl	8004e30 <HAL_TIM_Base_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80024b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d11b      	bne.n	80024f8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80024c0:	4812      	ldr	r0, [pc, #72]	@ (800250c <HAL_InitTick+0xec>)
 80024c2:	f002 fd0f 	bl	8004ee4 <HAL_TIM_Base_Start_IT>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80024cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d111      	bne.n	80024f8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024d4:	2036      	movs	r0, #54	@ 0x36
 80024d6:	f000 fb73 	bl	8002bc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b0f      	cmp	r3, #15
 80024de:	d808      	bhi.n	80024f2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80024e0:	2200      	movs	r2, #0
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	2036      	movs	r0, #54	@ 0x36
 80024e6:	f000 fb4f 	bl	8002b88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002514 <HAL_InitTick+0xf4>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	e002      	b.n	80024f8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80024f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3738      	adds	r7, #56	@ 0x38
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40023800 	.word	0x40023800
 8002508:	431bde83 	.word	0x431bde83
 800250c:	20000b40 	.word	0x20000b40
 8002510:	40001000 	.word	0x40001000
 8002514:	20000018 	.word	0x20000018

08002518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800251c:	bf00      	nop
 800251e:	e7fd      	b.n	800251c <NMI_Handler+0x4>

08002520 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002524:	bf00      	nop
 8002526:	e7fd      	b.n	8002524 <HardFault_Handler+0x4>

08002528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <MemManage_Handler+0x4>

08002530 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <BusFault_Handler+0x4>

08002538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <UsageFault_Handler+0x4>

08002540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8002552:	2001      	movs	r0, #1
 8002554:	f001 f9e6 	bl	8003924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}

0800255c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8002560:	2002      	movs	r0, #2
 8002562:	f001 f9df 	bl	8003924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}

0800256a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 800256e:	2010      	movs	r0, #16
 8002570:	f001 f9d8 	bl	8003924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	bd80      	pop	{r7, pc}

08002578 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 800257c:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <TIM6_DAC_IRQHandler+0x20>)
 800257e:	791b      	ldrb	r3, [r3, #4]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8002586:	4804      	ldr	r0, [pc, #16]	@ (8002598 <TIM6_DAC_IRQHandler+0x20>)
 8002588:	f000 fba1 	bl	8002cce <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800258c:	4803      	ldr	r0, [pc, #12]	@ (800259c <TIM6_DAC_IRQHandler+0x24>)
 800258e:	f002 fd19 	bl	8004fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	200009f0 	.word	0x200009f0
 800259c:	20000b40 	.word	0x20000b40

080025a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80025a4:	4802      	ldr	r0, [pc, #8]	@ (80025b0 <DMA2_Stream0_IRQHandler+0x10>)
 80025a6:	f000 fd85 	bl	80030b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000a80 	.word	0x20000a80

080025b4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80025b8:	4802      	ldr	r0, [pc, #8]	@ (80025c4 <DMA2_Stream3_IRQHandler+0x10>)
 80025ba:	f000 fd7b 	bl	80030b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000ae0 	.word	0x20000ae0

080025c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d0:	4a14      	ldr	r2, [pc, #80]	@ (8002624 <_sbrk+0x5c>)
 80025d2:	4b15      	ldr	r3, [pc, #84]	@ (8002628 <_sbrk+0x60>)
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025dc:	4b13      	ldr	r3, [pc, #76]	@ (800262c <_sbrk+0x64>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d102      	bne.n	80025ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e4:	4b11      	ldr	r3, [pc, #68]	@ (800262c <_sbrk+0x64>)
 80025e6:	4a12      	ldr	r2, [pc, #72]	@ (8002630 <_sbrk+0x68>)
 80025e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ea:	4b10      	ldr	r3, [pc, #64]	@ (800262c <_sbrk+0x64>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d207      	bcs.n	8002608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025f8:	f006 fea0 	bl	800933c <__errno>
 80025fc:	4603      	mov	r3, r0
 80025fe:	220c      	movs	r2, #12
 8002600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
 8002606:	e009      	b.n	800261c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002608:	4b08      	ldr	r3, [pc, #32]	@ (800262c <_sbrk+0x64>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800260e:	4b07      	ldr	r3, [pc, #28]	@ (800262c <_sbrk+0x64>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	4a05      	ldr	r2, [pc, #20]	@ (800262c <_sbrk+0x64>)
 8002618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800261a:	68fb      	ldr	r3, [r7, #12]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20020000 	.word	0x20020000
 8002628:	00004000 	.word	0x00004000
 800262c:	20000b88 	.word	0x20000b88
 8002630:	20005708 	.word	0x20005708

08002634 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002638:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <SystemInit+0x20>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263e:	4a05      	ldr	r2, [pc, #20]	@ (8002654 <SystemInit+0x20>)
 8002640:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002644:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800265c:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <MX_USART2_UART_Init+0x4c>)
 800265e:	4a12      	ldr	r2, [pc, #72]	@ (80026a8 <MX_USART2_UART_Init+0x50>)
 8002660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002662:	4b10      	ldr	r3, [pc, #64]	@ (80026a4 <MX_USART2_UART_Init+0x4c>)
 8002664:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800266a:	4b0e      	ldr	r3, [pc, #56]	@ (80026a4 <MX_USART2_UART_Init+0x4c>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002670:	4b0c      	ldr	r3, [pc, #48]	@ (80026a4 <MX_USART2_UART_Init+0x4c>)
 8002672:	2200      	movs	r2, #0
 8002674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002676:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <MX_USART2_UART_Init+0x4c>)
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800267c:	4b09      	ldr	r3, [pc, #36]	@ (80026a4 <MX_USART2_UART_Init+0x4c>)
 800267e:	220c      	movs	r2, #12
 8002680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002682:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <MX_USART2_UART_Init+0x4c>)
 8002684:	2200      	movs	r2, #0
 8002686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <MX_USART2_UART_Init+0x4c>)
 800268a:	2200      	movs	r2, #0
 800268c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800268e:	4805      	ldr	r0, [pc, #20]	@ (80026a4 <MX_USART2_UART_Init+0x4c>)
 8002690:	f002 fe70 	bl	8005374 <HAL_UART_Init>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800269a:	f7ff fd8d 	bl	80021b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000b8c 	.word	0x20000b8c
 80026a8:	40004400 	.word	0x40004400

080026ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	@ 0x28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a19      	ldr	r2, [pc, #100]	@ (8002730 <HAL_UART_MspInit+0x84>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d12b      	bne.n	8002726 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	4b18      	ldr	r3, [pc, #96]	@ (8002734 <HAL_UART_MspInit+0x88>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	4a17      	ldr	r2, [pc, #92]	@ (8002734 <HAL_UART_MspInit+0x88>)
 80026d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026de:	4b15      	ldr	r3, [pc, #84]	@ (8002734 <HAL_UART_MspInit+0x88>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <HAL_UART_MspInit+0x88>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	4a10      	ldr	r2, [pc, #64]	@ (8002734 <HAL_UART_MspInit+0x88>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002734 <HAL_UART_MspInit+0x88>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002706:	230c      	movs	r3, #12
 8002708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002712:	2303      	movs	r3, #3
 8002714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002716:	2307      	movs	r3, #7
 8002718:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271a:	f107 0314 	add.w	r3, r7, #20
 800271e:	4619      	mov	r1, r3
 8002720:	4805      	ldr	r0, [pc, #20]	@ (8002738 <HAL_UART_MspInit+0x8c>)
 8002722:	f000 ff31 	bl	8003588 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002726:	bf00      	nop
 8002728:	3728      	adds	r7, #40	@ 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40004400 	.word	0x40004400
 8002734:	40023800 	.word	0x40023800
 8002738:	40020000 	.word	0x40020000

0800273c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800273c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002774 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002740:	f7ff ff78 	bl	8002634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002744:	480c      	ldr	r0, [pc, #48]	@ (8002778 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002746:	490d      	ldr	r1, [pc, #52]	@ (800277c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002748:	4a0d      	ldr	r2, [pc, #52]	@ (8002780 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800274a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800274c:	e002      	b.n	8002754 <LoopCopyDataInit>

0800274e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800274e:	58d4      	ldr	r4, [r2, r3]

  str r4, [r0, r3]
 8002750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002752:	3304      	adds	r3, #4

08002754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002758:	d3f9      	bcc.n	800274e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800275a:	4a0a      	ldr	r2, [pc, #40]	@ (8002784 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800275c:	4c0a      	ldr	r4, [pc, #40]	@ (8002788 <LoopFillZerobss+0x22>)
  movs r3, #0
 800275e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002760:	e001      	b.n	8002766 <LoopFillZerobss>

08002762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002764:	3204      	adds	r2, #4

08002766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002768:	d3fb      	bcc.n	8002762 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800276a:	f006 fded 	bl	8009348 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800276e:	f7ff fc7b 	bl	8002068 <main>
  bx  lr    
 8002772:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002774:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800277c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002780:	0800d190 	.word	0x0800d190
  ldr r2, =_sbss
 8002784:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002788:	20005708 	.word	0x20005708

0800278c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800278c:	e7fe      	b.n	800278c <ADC_IRQHandler>
	...

08002790 <XPT2046_TouchSelect>:
}

#endif /* SOFTWARE_SPI */

static void XPT2046_TouchSelect()
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 8002794:	2200      	movs	r2, #0
 8002796:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800279a:	4802      	ldr	r0, [pc, #8]	@ (80027a4 <XPT2046_TouchSelect+0x14>)
 800279c:	f001 f8a8 	bl	80038f0 <HAL_GPIO_WritePin>
}
 80027a0:	bf00      	nop
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40020400 	.word	0x40020400

080027a8 <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 80027ac:	2201      	movs	r2, #1
 80027ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027b2:	4802      	ldr	r0, [pc, #8]	@ (80027bc <XPT2046_TouchUnselect+0x14>)
 80027b4:	f001 f89c 	bl	80038f0 <HAL_GPIO_WritePin>
}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40020400 	.word	0x40020400

080027c0 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(XPT2046_IRQ_GPIO_Port, XPT2046_IRQ_Pin) == GPIO_PIN_RESET;
 80027c4:	2110      	movs	r1, #16
 80027c6:	4805      	ldr	r0, [pc, #20]	@ (80027dc <XPT2046_TouchPressed+0x1c>)
 80027c8:	f001 f87a 	bl	80038c0 <HAL_GPIO_ReadPin>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	bf0c      	ite	eq
 80027d2:	2301      	moveq	r3, #1
 80027d4:	2300      	movne	r3, #0
 80027d6:	b2db      	uxtb	r3, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40020400 	.word	0x40020400

080027e0 <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08c      	sub	sp, #48	@ 0x30
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

#endif /* SOFTWARE_SPI */

    XPT2046_TouchSelect();
 80027ea:	f7ff ffd1 	bl	8002790 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t avg_y = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < 16; i++)
 80027fa:	2300      	movs	r3, #0
 80027fc:	77bb      	strb	r3, [r7, #30]
 80027fe:	e03f      	b.n	8002880 <XPT2046_TouchGetCoordinates+0xa0>
    {
        if(!XPT2046_TouchPressed())
 8002800:	f7ff ffde 	bl	80027c0 <XPT2046_TouchPressed>
 8002804:	4603      	mov	r3, r0
 8002806:	f083 0301 	eor.w	r3, r3, #1
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d13b      	bne.n	8002888 <XPT2046_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 8002810:	7ffb      	ldrb	r3, [r7, #31]
 8002812:	3301      	adds	r3, #1
 8002814:	77fb      	strb	r3, [r7, #31]
	   x_raw[0] = spi_read_byte();
	   x_raw[1] = spi_read_byte();

#else

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8002816:	f04f 33ff 	mov.w	r3, #4294967295
 800281a:	2201      	movs	r2, #1
 800281c:	4945      	ldr	r1, [pc, #276]	@ (8002934 <XPT2046_TouchGetCoordinates+0x154>)
 800281e:	4846      	ldr	r0, [pc, #280]	@ (8002938 <XPT2046_TouchGetCoordinates+0x158>)
 8002820:	f001 fdeb 	bl	80043fa <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8002824:	f107 0210 	add.w	r2, r7, #16
 8002828:	f04f 33ff 	mov.w	r3, #4294967295
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	2302      	movs	r3, #2
 8002830:	4942      	ldr	r1, [pc, #264]	@ (800293c <XPT2046_TouchGetCoordinates+0x15c>)
 8002832:	4841      	ldr	r0, [pc, #260]	@ (8002938 <XPT2046_TouchGetCoordinates+0x158>)
 8002834:	f001 ff25 	bl	8004682 <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8002838:	f04f 33ff 	mov.w	r3, #4294967295
 800283c:	2201      	movs	r2, #1
 800283e:	4940      	ldr	r1, [pc, #256]	@ (8002940 <XPT2046_TouchGetCoordinates+0x160>)
 8002840:	483d      	ldr	r0, [pc, #244]	@ (8002938 <XPT2046_TouchGetCoordinates+0x158>)
 8002842:	f001 fdda 	bl	80043fa <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8002846:	f107 020c 	add.w	r2, r7, #12
 800284a:	f04f 33ff 	mov.w	r3, #4294967295
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	2302      	movs	r3, #2
 8002852:	493a      	ldr	r1, [pc, #232]	@ (800293c <XPT2046_TouchGetCoordinates+0x15c>)
 8002854:	4838      	ldr	r0, [pc, #224]	@ (8002938 <XPT2046_TouchGetCoordinates+0x158>)
 8002856:	f001 ff14 	bl	8004682 <HAL_SPI_TransmitReceive>

#endif /* SOFTWARE_SPI */

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 800285a:	7b3b      	ldrb	r3, [r7, #12]
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	7b7a      	ldrb	r2, [r7, #13]
 8002860:	4313      	orrs	r3, r2
 8002862:	461a      	mov	r2, r3
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	4413      	add	r3, r2
 8002868:	627b      	str	r3, [r7, #36]	@ 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 800286a:	7c3b      	ldrb	r3, [r7, #16]
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	7c7a      	ldrb	r2, [r7, #17]
 8002870:	4313      	orrs	r3, r2
 8002872:	461a      	mov	r2, r3
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	4413      	add	r3, r2
 8002878:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 16; i++)
 800287a:	7fbb      	ldrb	r3, [r7, #30]
 800287c:	3301      	adds	r3, #1
 800287e:	77bb      	strb	r3, [r7, #30]
 8002880:	7fbb      	ldrb	r3, [r7, #30]
 8002882:	2b0f      	cmp	r3, #15
 8002884:	d9bc      	bls.n	8002800 <XPT2046_TouchGetCoordinates+0x20>
 8002886:	e000      	b.n	800288a <XPT2046_TouchGetCoordinates+0xaa>
            break;
 8002888:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 800288a:	f7ff ff8d 	bl	80027a8 <XPT2046_TouchUnselect>

    if(nsamples < 16)
 800288e:	7ffb      	ldrb	r3, [r7, #31]
 8002890:	2b0f      	cmp	r3, #15
 8002892:	d801      	bhi.n	8002898 <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 8002894:	2300      	movs	r3, #0
 8002896:	e049      	b.n	800292c <XPT2046_TouchGetCoordinates+0x14c>

    uint32_t raw_x = (avg_x / 16);
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	f640 5247 	movw	r2, #3399	@ 0xd47
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d802      	bhi.n	80028ae <XPT2046_TouchGetCoordinates+0xce>
 80028a8:	f640 5348 	movw	r3, #3400	@ 0xd48
 80028ac:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	f247 1248 	movw	r2, #29000	@ 0x7148
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d902      	bls.n	80028be <XPT2046_TouchGetCoordinates+0xde>
 80028b8:	f247 1348 	movw	r3, #29000	@ 0x7148
 80028bc:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 16);
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	091b      	lsrs	r3, r3, #4
 80028c2:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f640 42e3 	movw	r2, #3299	@ 0xce3
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d802      	bhi.n	80028d4 <XPT2046_TouchGetCoordinates+0xf4>
 80028ce:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80028d2:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80028da:	4293      	cmp	r3, r2
 80028dc:	d902      	bls.n	80028e4 <XPT2046_TouchGetCoordinates+0x104>
 80028de:	f247 5330 	movw	r3, #30000	@ 0x7530
 80028e2:	617b      	str	r3, [r7, #20]
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#elif (ORIENTATION == 1)
	*x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#elif (ORIENTATION == 2)
    *x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4613      	mov	r3, r2
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	f5a3 2347 	sub.w	r3, r3, #815104	@ 0xc7000
 80028f2:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 80028f6:	4a13      	ldr	r2, [pc, #76]	@ (8002944 <XPT2046_TouchGetCoordinates+0x164>)
 80028f8:	fba2 2303 	umull	r2, r3, r2, r3
 80028fc:	0b5b      	lsrs	r3, r3, #13
 80028fe:	b29a      	uxth	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	801a      	strh	r2, [r3, #0]
    *y = XPT2046_SCALE_Y - (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	019b      	lsls	r3, r3, #6
 800290e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8002912:	f5a3 53e8 	sub.w	r3, r3, #7424	@ 0x1d00
 8002916:	4a0c      	ldr	r2, [pc, #48]	@ (8002948 <XPT2046_TouchGetCoordinates+0x168>)
 8002918:	fba2 2303 	umull	r2, r3, r2, r3
 800291c:	0b5b      	lsrs	r3, r3, #13
 800291e:	b29b      	uxth	r3, r3
 8002920:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002924:	b29a      	uxth	r2, r3
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	801a      	strh	r2, [r3, #0]
#elif (ORIENTATION == 3)
    *x = XPT2046_SCALE_X - (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#endif

    return true;
 800292a:	2301      	movs	r3, #1
}
 800292c:	4618      	mov	r0, r3
 800292e:	3728      	adds	r7, #40	@ 0x28
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	0800cf5c 	.word	0x0800cf5c
 8002938:	20000a28 	.word	0x20000a28
 800293c:	0800cf60 	.word	0x0800cf60
 8002940:	0800cf64 	.word	0x0800cf64
 8002944:	51eb851f 	.word	0x51eb851f
 8002948:	4e8b8659 	.word	0x4e8b8659

0800294c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002950:	4b0e      	ldr	r3, [pc, #56]	@ (800298c <HAL_Init+0x40>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0d      	ldr	r2, [pc, #52]	@ (800298c <HAL_Init+0x40>)
 8002956:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800295a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800295c:	4b0b      	ldr	r3, [pc, #44]	@ (800298c <HAL_Init+0x40>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0a      	ldr	r2, [pc, #40]	@ (800298c <HAL_Init+0x40>)
 8002962:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002966:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002968:	4b08      	ldr	r3, [pc, #32]	@ (800298c <HAL_Init+0x40>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a07      	ldr	r2, [pc, #28]	@ (800298c <HAL_Init+0x40>)
 800296e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002974:	2003      	movs	r0, #3
 8002976:	f000 f8fc 	bl	8002b72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800297a:	200f      	movs	r0, #15
 800297c:	f7ff fd50 	bl	8002420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002980:	f7ff fd22 	bl	80023c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023c00 	.word	0x40023c00

08002990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002994:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_IncTick+0x20>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <HAL_IncTick+0x24>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	4a04      	ldr	r2, [pc, #16]	@ (80029b4 <HAL_IncTick+0x24>)
 80029a2:	6013      	str	r3, [r2, #0]
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	2000001c 	.word	0x2000001c
 80029b4:	20000bd4 	.word	0x20000bd4

080029b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return uwTick;
 80029bc:	4b03      	ldr	r3, [pc, #12]	@ (80029cc <HAL_GetTick+0x14>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000bd4 	.word	0x20000bd4

080029d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d8:	f7ff ffee 	bl	80029b8 <HAL_GetTick>
 80029dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e8:	d005      	beq.n	80029f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002a14 <HAL_Delay+0x44>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4413      	add	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029f6:	bf00      	nop
 80029f8:	f7ff ffde 	bl	80029b8 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d8f7      	bhi.n	80029f8 <HAL_Delay+0x28>
  {
  }
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	2000001c 	.word	0x2000001c

08002a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a28:	4b0c      	ldr	r3, [pc, #48]	@ (8002a5c <__NVIC_SetPriorityGrouping+0x44>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a34:	4013      	ands	r3, r2
 8002a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a4a:	4a04      	ldr	r2, [pc, #16]	@ (8002a5c <__NVIC_SetPriorityGrouping+0x44>)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	60d3      	str	r3, [r2, #12]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a64:	4b04      	ldr	r3, [pc, #16]	@ (8002a78 <__NVIC_GetPriorityGrouping+0x18>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	0a1b      	lsrs	r3, r3, #8
 8002a6a:	f003 0307 	and.w	r3, r3, #7
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	db0b      	blt.n	8002aa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	f003 021f 	and.w	r2, r3, #31
 8002a94:	4907      	ldr	r1, [pc, #28]	@ (8002ab4 <__NVIC_EnableIRQ+0x38>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	e000e100 	.word	0xe000e100

08002ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	db0a      	blt.n	8002ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	490c      	ldr	r1, [pc, #48]	@ (8002b04 <__NVIC_SetPriority+0x4c>)
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	0112      	lsls	r2, r2, #4
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	440b      	add	r3, r1
 8002adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae0:	e00a      	b.n	8002af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4908      	ldr	r1, [pc, #32]	@ (8002b08 <__NVIC_SetPriority+0x50>)
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	3b04      	subs	r3, #4
 8002af0:	0112      	lsls	r2, r2, #4
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	440b      	add	r3, r1
 8002af6:	761a      	strb	r2, [r3, #24]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000e100 	.word	0xe000e100
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	@ 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f1c3 0307 	rsb	r3, r3, #7
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	bf28      	it	cs
 8002b2a:	2304      	movcs	r3, #4
 8002b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3304      	adds	r3, #4
 8002b32:	2b06      	cmp	r3, #6
 8002b34:	d902      	bls.n	8002b3c <NVIC_EncodePriority+0x30>
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3b03      	subs	r3, #3
 8002b3a:	e000      	b.n	8002b3e <NVIC_EncodePriority+0x32>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b40:	f04f 32ff 	mov.w	r2, #4294967295
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43da      	mvns	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	401a      	ands	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b54:	f04f 31ff 	mov.w	r1, #4294967295
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	43d9      	mvns	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	4313      	orrs	r3, r2
         );
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3724      	adds	r7, #36	@ 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ff4c 	bl	8002a18 <__NVIC_SetPriorityGrouping>
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
 8002b94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b9a:	f7ff ff61 	bl	8002a60 <__NVIC_GetPriorityGrouping>
 8002b9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	68b9      	ldr	r1, [r7, #8]
 8002ba4:	6978      	ldr	r0, [r7, #20]
 8002ba6:	f7ff ffb1 	bl	8002b0c <NVIC_EncodePriority>
 8002baa:	4602      	mov	r2, r0
 8002bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff ff80 	bl	8002ab8 <__NVIC_SetPriority>
}
 8002bb8:	bf00      	nop
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff ff54 	bl	8002a7c <__NVIC_EnableIRQ>
}
 8002bd4:	bf00      	nop
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e014      	b.n	8002c18 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	791b      	ldrb	r3, [r3, #4]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d105      	bne.n	8002c04 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe fdfa 	bl	80017f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e046      	b.n	8002cc2 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	795b      	ldrb	r3, [r3, #5]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_DAC_Start+0x20>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e040      	b.n	8002cc2 <HAL_DAC_Start+0xa2>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6819      	ldr	r1, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2201      	movs	r2, #1
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10f      	bne.n	8002c8a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002c74:	2b3c      	cmp	r3, #60	@ 0x3c
 8002c76:	d11d      	bne.n	8002cb4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	e014      	b.n	8002cb4 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	213c      	movs	r1, #60	@ 0x3c
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d107      	bne.n	8002cb4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0202 	orr.w	r2, r2, #2
 8002cb2:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce4:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01d      	beq.n	8002d2c <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d018      	beq.n	8002d2c <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f043 0201 	orr.w	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d14:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d24:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f851 	bl	8002dce <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d01d      	beq.n	8002d72 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d018      	beq.n	8002d72 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2204      	movs	r2, #4
 8002d44:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f043 0202 	orr.w	r2, r3, #2
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002d5a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002d6a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f891 	bl	8002e94 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8002d72:	bf00      	nop
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b087      	sub	sp, #28
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e015      	b.n	8002dc2 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	3308      	adds	r3, #8
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	e004      	b.n	8002db8 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4413      	add	r3, r2
 8002db4:	3314      	adds	r3, #20
 8002db6:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b089      	sub	sp, #36	@ 0x24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_DAC_ConfigChannel+0x1c>
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e042      	b.n	8002e88 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	795b      	ldrb	r3, [r3, #5]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_DAC_ConfigChannel+0x2c>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e03c      	b.n	8002e88 <HAL_DAC_ConfigChannel+0xa6>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2202      	movs	r2, #2
 8002e18:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6819      	ldr	r1, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	22c0      	movs	r2, #192	@ 0xc0
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43da      	mvns	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	400a      	ands	r2, r1
 8002e78:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002e86:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3724      	adds	r7, #36	@ 0x24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002eb4:	f7ff fd80 	bl	80029b8 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e099      	b.n	8002ff8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ee4:	e00f      	b.n	8002f06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ee6:	f7ff fd67 	bl	80029b8 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b05      	cmp	r3, #5
 8002ef2:	d908      	bls.n	8002f06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2203      	movs	r2, #3
 8002efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e078      	b.n	8002ff8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1e8      	bne.n	8002ee6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	4b38      	ldr	r3, [pc, #224]	@ (8003000 <HAL_DMA_Init+0x158>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d107      	bne.n	8002f70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f023 0307 	bic.w	r3, r3, #7
 8002f86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d117      	bne.n	8002fca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00e      	beq.n	8002fca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fa6f 	bl	8003490 <DMA_CheckFifoParam>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2240      	movs	r2, #64	@ 0x40
 8002fbc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e016      	b.n	8002ff8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fa26 	bl	8003424 <DMA_CalcBaseAndBitshift>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe0:	223f      	movs	r2, #63	@ 0x3f
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	f010803f 	.word	0xf010803f

08003004 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_DMA_Start_IT+0x26>
 8003026:	2302      	movs	r3, #2
 8003028:	e040      	b.n	80030ac <HAL_DMA_Start_IT+0xa8>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b01      	cmp	r3, #1
 800303c:	d12f      	bne.n	800309e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2202      	movs	r2, #2
 8003042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f9b8 	bl	80033c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305c:	223f      	movs	r2, #63	@ 0x3f
 800305e:	409a      	lsls	r2, r3
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0216 	orr.w	r2, r2, #22
 8003072:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d007      	beq.n	800308c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0208 	orr.w	r2, r2, #8
 800308a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	e005      	b.n	80030aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
 80030a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030c0:	4b8e      	ldr	r3, [pc, #568]	@ (80032fc <HAL_DMA_IRQHandler+0x248>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a8e      	ldr	r2, [pc, #568]	@ (8003300 <HAL_DMA_IRQHandler+0x24c>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	0a9b      	lsrs	r3, r3, #10
 80030cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030de:	2208      	movs	r2, #8
 80030e0:	409a      	lsls	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01a      	beq.n	8003120 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d013      	beq.n	8003120 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0204 	bic.w	r2, r2, #4
 8003106:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310c:	2208      	movs	r2, #8
 800310e:	409a      	lsls	r2, r3
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003118:	f043 0201 	orr.w	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003124:	2201      	movs	r2, #1
 8003126:	409a      	lsls	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d012      	beq.n	8003156 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00b      	beq.n	8003156 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003142:	2201      	movs	r2, #1
 8003144:	409a      	lsls	r2, r3
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800314e:	f043 0202 	orr.w	r2, r3, #2
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315a:	2204      	movs	r2, #4
 800315c:	409a      	lsls	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4013      	ands	r3, r2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d012      	beq.n	800318c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00b      	beq.n	800318c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003178:	2204      	movs	r2, #4
 800317a:	409a      	lsls	r2, r3
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003184:	f043 0204 	orr.w	r2, r3, #4
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003190:	2210      	movs	r2, #16
 8003192:	409a      	lsls	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d043      	beq.n	8003224 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d03c      	beq.n	8003224 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ae:	2210      	movs	r2, #16
 80031b0:	409a      	lsls	r2, r3
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d018      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d108      	bne.n	80031e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d024      	beq.n	8003224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	4798      	blx	r3
 80031e2:	e01f      	b.n	8003224 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01b      	beq.n	8003224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	4798      	blx	r3
 80031f4:	e016      	b.n	8003224 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003200:	2b00      	cmp	r3, #0
 8003202:	d107      	bne.n	8003214 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0208 	bic.w	r2, r2, #8
 8003212:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003228:	2220      	movs	r2, #32
 800322a:	409a      	lsls	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 808f 	beq.w	8003354 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0310 	and.w	r3, r3, #16
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 8087 	beq.w	8003354 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324a:	2220      	movs	r2, #32
 800324c:	409a      	lsls	r2, r3
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b05      	cmp	r3, #5
 800325c:	d136      	bne.n	80032cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0216 	bic.w	r2, r2, #22
 800326c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695a      	ldr	r2, [r3, #20]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800327c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d103      	bne.n	800328e <HAL_DMA_IRQHandler+0x1da>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0208 	bic.w	r2, r2, #8
 800329c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a2:	223f      	movs	r2, #63	@ 0x3f
 80032a4:	409a      	lsls	r2, r3
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d07e      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	4798      	blx	r3
        }
        return;
 80032ca:	e079      	b.n	80033c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d01d      	beq.n	8003316 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10d      	bne.n	8003304 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d031      	beq.n	8003354 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	4798      	blx	r3
 80032f8:	e02c      	b.n	8003354 <HAL_DMA_IRQHandler+0x2a0>
 80032fa:	bf00      	nop
 80032fc:	20000014 	.word	0x20000014
 8003300:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d023      	beq.n	8003354 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	4798      	blx	r3
 8003314:	e01e      	b.n	8003354 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10f      	bne.n	8003344 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0210 	bic.w	r2, r2, #16
 8003332:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003358:	2b00      	cmp	r3, #0
 800335a:	d032      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d022      	beq.n	80033ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2205      	movs	r2, #5
 800336c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0201 	bic.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	3301      	adds	r3, #1
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	429a      	cmp	r2, r3
 800338a:	d307      	bcc.n	800339c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f2      	bne.n	8003380 <HAL_DMA_IRQHandler+0x2cc>
 800339a:	e000      	b.n	800339e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800339c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d005      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	4798      	blx	r3
 80033be:	e000      	b.n	80033c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80033c0:	bf00      	nop
    }
  }
}
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80033e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b40      	cmp	r3, #64	@ 0x40
 80033f4:	d108      	bne.n	8003408 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003406:	e007      	b.n	8003418 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	60da      	str	r2, [r3, #12]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	3b10      	subs	r3, #16
 8003434:	4a14      	ldr	r2, [pc, #80]	@ (8003488 <DMA_CalcBaseAndBitshift+0x64>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	091b      	lsrs	r3, r3, #4
 800343c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800343e:	4a13      	ldr	r2, [pc, #76]	@ (800348c <DMA_CalcBaseAndBitshift+0x68>)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4413      	add	r3, r2
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b03      	cmp	r3, #3
 8003450:	d909      	bls.n	8003466 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800345a:	f023 0303 	bic.w	r3, r3, #3
 800345e:	1d1a      	adds	r2, r3, #4
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	659a      	str	r2, [r3, #88]	@ 0x58
 8003464:	e007      	b.n	8003476 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800346e:	f023 0303 	bic.w	r3, r3, #3
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	aaaaaaab 	.word	0xaaaaaaab
 800348c:	0800cf68 	.word	0x0800cf68

08003490 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d11f      	bne.n	80034ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d856      	bhi.n	800355e <DMA_CheckFifoParam+0xce>
 80034b0:	a201      	add	r2, pc, #4	@ (adr r2, 80034b8 <DMA_CheckFifoParam+0x28>)
 80034b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b6:	bf00      	nop
 80034b8:	080034c9 	.word	0x080034c9
 80034bc:	080034db 	.word	0x080034db
 80034c0:	080034c9 	.word	0x080034c9
 80034c4:	0800355f 	.word	0x0800355f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d046      	beq.n	8003562 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d8:	e043      	b.n	8003562 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034e2:	d140      	bne.n	8003566 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e8:	e03d      	b.n	8003566 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034f2:	d121      	bne.n	8003538 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d837      	bhi.n	800356a <DMA_CheckFifoParam+0xda>
 80034fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003500 <DMA_CheckFifoParam+0x70>)
 80034fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003500:	08003511 	.word	0x08003511
 8003504:	08003517 	.word	0x08003517
 8003508:	08003511 	.word	0x08003511
 800350c:	08003529 	.word	0x08003529
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
      break;
 8003514:	e030      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d025      	beq.n	800356e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003526:	e022      	b.n	800356e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003530:	d11f      	bne.n	8003572 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003536:	e01c      	b.n	8003572 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d903      	bls.n	8003546 <DMA_CheckFifoParam+0xb6>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b03      	cmp	r3, #3
 8003542:	d003      	beq.n	800354c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003544:	e018      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	73fb      	strb	r3, [r7, #15]
      break;
 800354a:	e015      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003550:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00e      	beq.n	8003576 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	73fb      	strb	r3, [r7, #15]
      break;
 800355c:	e00b      	b.n	8003576 <DMA_CheckFifoParam+0xe6>
      break;
 800355e:	bf00      	nop
 8003560:	e00a      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      break;
 8003562:	bf00      	nop
 8003564:	e008      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      break;
 8003566:	bf00      	nop
 8003568:	e006      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      break;
 800356a:	bf00      	nop
 800356c:	e004      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      break;
 800356e:	bf00      	nop
 8003570:	e002      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      break;   
 8003572:	bf00      	nop
 8003574:	e000      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      break;
 8003576:	bf00      	nop
    }
  } 
  
  return status; 
 8003578:	7bfb      	ldrb	r3, [r7, #15]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop

08003588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003588:	b480      	push	{r7}
 800358a:	b089      	sub	sp, #36	@ 0x24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800359a:	2300      	movs	r3, #0
 800359c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	e16b      	b.n	800387c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035a4:	2201      	movs	r2, #1
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	429a      	cmp	r2, r3
 80035be:	f040 815a 	bne.w	8003876 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d005      	beq.n	80035da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d130      	bne.n	800363c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	2203      	movs	r2, #3
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43db      	mvns	r3, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4313      	orrs	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003610:	2201      	movs	r2, #1
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	f003 0201 	and.w	r2, r3, #1
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	2b03      	cmp	r3, #3
 8003646:	d017      	beq.n	8003678 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	2203      	movs	r2, #3
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d123      	bne.n	80036cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	08da      	lsrs	r2, r3, #3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3208      	adds	r2, #8
 800368c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003690:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	220f      	movs	r2, #15
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	08da      	lsrs	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3208      	adds	r2, #8
 80036c6:	69b9      	ldr	r1, [r7, #24]
 80036c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	2203      	movs	r2, #3
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4013      	ands	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 0203 	and.w	r2, r3, #3
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80b4 	beq.w	8003876 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	4b60      	ldr	r3, [pc, #384]	@ (8003894 <HAL_GPIO_Init+0x30c>)
 8003714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003716:	4a5f      	ldr	r2, [pc, #380]	@ (8003894 <HAL_GPIO_Init+0x30c>)
 8003718:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800371c:	6453      	str	r3, [r2, #68]	@ 0x44
 800371e:	4b5d      	ldr	r3, [pc, #372]	@ (8003894 <HAL_GPIO_Init+0x30c>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800372a:	4a5b      	ldr	r2, [pc, #364]	@ (8003898 <HAL_GPIO_Init+0x310>)
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	089b      	lsrs	r3, r3, #2
 8003730:	3302      	adds	r3, #2
 8003732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	220f      	movs	r2, #15
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a52      	ldr	r2, [pc, #328]	@ (800389c <HAL_GPIO_Init+0x314>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d02b      	beq.n	80037ae <HAL_GPIO_Init+0x226>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a51      	ldr	r2, [pc, #324]	@ (80038a0 <HAL_GPIO_Init+0x318>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d025      	beq.n	80037aa <HAL_GPIO_Init+0x222>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a50      	ldr	r2, [pc, #320]	@ (80038a4 <HAL_GPIO_Init+0x31c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d01f      	beq.n	80037a6 <HAL_GPIO_Init+0x21e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a4f      	ldr	r2, [pc, #316]	@ (80038a8 <HAL_GPIO_Init+0x320>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d019      	beq.n	80037a2 <HAL_GPIO_Init+0x21a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a4e      	ldr	r2, [pc, #312]	@ (80038ac <HAL_GPIO_Init+0x324>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <HAL_GPIO_Init+0x216>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a4d      	ldr	r2, [pc, #308]	@ (80038b0 <HAL_GPIO_Init+0x328>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00d      	beq.n	800379a <HAL_GPIO_Init+0x212>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a4c      	ldr	r2, [pc, #304]	@ (80038b4 <HAL_GPIO_Init+0x32c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d007      	beq.n	8003796 <HAL_GPIO_Init+0x20e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a4b      	ldr	r2, [pc, #300]	@ (80038b8 <HAL_GPIO_Init+0x330>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d101      	bne.n	8003792 <HAL_GPIO_Init+0x20a>
 800378e:	2307      	movs	r3, #7
 8003790:	e00e      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 8003792:	2308      	movs	r3, #8
 8003794:	e00c      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 8003796:	2306      	movs	r3, #6
 8003798:	e00a      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 800379a:	2305      	movs	r3, #5
 800379c:	e008      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 800379e:	2304      	movs	r3, #4
 80037a0:	e006      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 80037a2:	2303      	movs	r3, #3
 80037a4:	e004      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e002      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 80037ae:	2300      	movs	r3, #0
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	f002 0203 	and.w	r2, r2, #3
 80037b6:	0092      	lsls	r2, r2, #2
 80037b8:	4093      	lsls	r3, r2
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037c0:	4935      	ldr	r1, [pc, #212]	@ (8003898 <HAL_GPIO_Init+0x310>)
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	089b      	lsrs	r3, r3, #2
 80037c6:	3302      	adds	r3, #2
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ce:	4b3b      	ldr	r3, [pc, #236]	@ (80038bc <HAL_GPIO_Init+0x334>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037f2:	4a32      	ldr	r2, [pc, #200]	@ (80038bc <HAL_GPIO_Init+0x334>)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037f8:	4b30      	ldr	r3, [pc, #192]	@ (80038bc <HAL_GPIO_Init+0x334>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800381c:	4a27      	ldr	r2, [pc, #156]	@ (80038bc <HAL_GPIO_Init+0x334>)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003822:	4b26      	ldr	r3, [pc, #152]	@ (80038bc <HAL_GPIO_Init+0x334>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003846:	4a1d      	ldr	r2, [pc, #116]	@ (80038bc <HAL_GPIO_Init+0x334>)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800384c:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <HAL_GPIO_Init+0x334>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003870:	4a12      	ldr	r2, [pc, #72]	@ (80038bc <HAL_GPIO_Init+0x334>)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3301      	adds	r3, #1
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	2b0f      	cmp	r3, #15
 8003880:	f67f ae90 	bls.w	80035a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	3724      	adds	r7, #36	@ 0x24
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	40013800 	.word	0x40013800
 800389c:	40020000 	.word	0x40020000
 80038a0:	40020400 	.word	0x40020400
 80038a4:	40020800 	.word	0x40020800
 80038a8:	40020c00 	.word	0x40020c00
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40021400 	.word	0x40021400
 80038b4:	40021800 	.word	0x40021800
 80038b8:	40021c00 	.word	0x40021c00
 80038bc:	40013c00 	.word	0x40013c00

080038c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	887b      	ldrh	r3, [r7, #2]
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
 80038dc:	e001      	b.n	80038e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038de:	2300      	movs	r3, #0
 80038e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	807b      	strh	r3, [r7, #2]
 80038fc:	4613      	mov	r3, r2
 80038fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003900:	787b      	ldrb	r3, [r7, #1]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003906:	887a      	ldrh	r2, [r7, #2]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800390c:	e003      	b.n	8003916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800390e:	887b      	ldrh	r3, [r7, #2]
 8003910:	041a      	lsls	r2, r3, #16
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	619a      	str	r2, [r3, #24]
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800392e:	4b08      	ldr	r3, [pc, #32]	@ (8003950 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	88fb      	ldrh	r3, [r7, #6]
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d006      	beq.n	8003948 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800393a:	4a05      	ldr	r2, [pc, #20]	@ (8003950 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fe f812 	bl	800196c <HAL_GPIO_EXTI_Callback>
  }
}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40013c00 	.word	0x40013c00

08003954 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e267      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d075      	beq.n	8003a5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003972:	4b88      	ldr	r3, [pc, #544]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b04      	cmp	r3, #4
 800397c:	d00c      	beq.n	8003998 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397e:	4b85      	ldr	r3, [pc, #532]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003986:	2b08      	cmp	r3, #8
 8003988:	d112      	bne.n	80039b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398a:	4b82      	ldr	r3, [pc, #520]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003992:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003996:	d10b      	bne.n	80039b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003998:	4b7e      	ldr	r3, [pc, #504]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d05b      	beq.n	8003a5c <HAL_RCC_OscConfig+0x108>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d157      	bne.n	8003a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e242      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b8:	d106      	bne.n	80039c8 <HAL_RCC_OscConfig+0x74>
 80039ba:	4b76      	ldr	r3, [pc, #472]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a75      	ldr	r2, [pc, #468]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e01d      	b.n	8003a04 <HAL_RCC_OscConfig+0xb0>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x98>
 80039d2:	4b70      	ldr	r3, [pc, #448]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a6f      	ldr	r2, [pc, #444]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b6d      	ldr	r3, [pc, #436]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6c      	ldr	r2, [pc, #432]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e00b      	b.n	8003a04 <HAL_RCC_OscConfig+0xb0>
 80039ec:	4b69      	ldr	r3, [pc, #420]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a68      	ldr	r2, [pc, #416]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4b66      	ldr	r3, [pc, #408]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a65      	ldr	r2, [pc, #404]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fe ffd4 	bl	80029b8 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fe ffd0 	bl	80029b8 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	@ 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e207      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	4b5b      	ldr	r3, [pc, #364]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0xc0>
 8003a32:	e014      	b.n	8003a5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fe ffc0 	bl	80029b8 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fe ffbc 	bl	80029b8 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	@ 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e1f3      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	4b51      	ldr	r3, [pc, #324]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0xe8>
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d063      	beq.n	8003b32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a76:	4b47      	ldr	r3, [pc, #284]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d11c      	bne.n	8003abc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a82:	4b44      	ldr	r3, [pc, #272]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d116      	bne.n	8003abc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8e:	4b41      	ldr	r3, [pc, #260]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x152>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e1c7      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa6:	4b3b      	ldr	r3, [pc, #236]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4937      	ldr	r1, [pc, #220]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aba:	e03a      	b.n	8003b32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac4:	4b34      	ldr	r3, [pc, #208]	@ (8003b98 <HAL_RCC_OscConfig+0x244>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fe ff75 	bl	80029b8 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fe ff71 	bl	80029b8 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e1a8      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af0:	4b28      	ldr	r3, [pc, #160]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4925      	ldr	r1, [pc, #148]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	600b      	str	r3, [r1, #0]
 8003b04:	e015      	b.n	8003b32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b06:	4b24      	ldr	r3, [pc, #144]	@ (8003b98 <HAL_RCC_OscConfig+0x244>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fe ff54 	bl	80029b8 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b14:	f7fe ff50 	bl	80029b8 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e187      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b26:	4b1b      	ldr	r3, [pc, #108]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d036      	beq.n	8003bac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d016      	beq.n	8003b74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b46:	4b15      	ldr	r3, [pc, #84]	@ (8003b9c <HAL_RCC_OscConfig+0x248>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7fe ff34 	bl	80029b8 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b54:	f7fe ff30 	bl	80029b8 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e167      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b66:	4b0b      	ldr	r3, [pc, #44]	@ (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003b68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x200>
 8003b72:	e01b      	b.n	8003bac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b74:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <HAL_RCC_OscConfig+0x248>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7a:	f7fe ff1d 	bl	80029b8 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b80:	e00e      	b.n	8003ba0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b82:	f7fe ff19 	bl	80029b8 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d907      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e150      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
 8003b94:	40023800 	.word	0x40023800
 8003b98:	42470000 	.word	0x42470000
 8003b9c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba0:	4b88      	ldr	r3, [pc, #544]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1ea      	bne.n	8003b82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8097 	beq.w	8003ce8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bbe:	4b81      	ldr	r3, [pc, #516]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10f      	bne.n	8003bea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	4b7d      	ldr	r3, [pc, #500]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd2:	4a7c      	ldr	r2, [pc, #496]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bda:	4b7a      	ldr	r3, [pc, #488]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be6:	2301      	movs	r3, #1
 8003be8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bea:	4b77      	ldr	r3, [pc, #476]	@ (8003dc8 <HAL_RCC_OscConfig+0x474>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d118      	bne.n	8003c28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf6:	4b74      	ldr	r3, [pc, #464]	@ (8003dc8 <HAL_RCC_OscConfig+0x474>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a73      	ldr	r2, [pc, #460]	@ (8003dc8 <HAL_RCC_OscConfig+0x474>)
 8003bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c02:	f7fe fed9 	bl	80029b8 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0a:	f7fe fed5 	bl	80029b8 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e10c      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1c:	4b6a      	ldr	r3, [pc, #424]	@ (8003dc8 <HAL_RCC_OscConfig+0x474>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d106      	bne.n	8003c3e <HAL_RCC_OscConfig+0x2ea>
 8003c30:	4b64      	ldr	r3, [pc, #400]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c34:	4a63      	ldr	r2, [pc, #396]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c3c:	e01c      	b.n	8003c78 <HAL_RCC_OscConfig+0x324>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b05      	cmp	r3, #5
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x30c>
 8003c46:	4b5f      	ldr	r3, [pc, #380]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4a:	4a5e      	ldr	r2, [pc, #376]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	f043 0304 	orr.w	r3, r3, #4
 8003c50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c52:	4b5c      	ldr	r3, [pc, #368]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c56:	4a5b      	ldr	r2, [pc, #364]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c5e:	e00b      	b.n	8003c78 <HAL_RCC_OscConfig+0x324>
 8003c60:	4b58      	ldr	r3, [pc, #352]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c64:	4a57      	ldr	r2, [pc, #348]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c66:	f023 0301 	bic.w	r3, r3, #1
 8003c6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c6c:	4b55      	ldr	r3, [pc, #340]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c70:	4a54      	ldr	r2, [pc, #336]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c72:	f023 0304 	bic.w	r3, r3, #4
 8003c76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d015      	beq.n	8003cac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fe fe9a 	bl	80029b8 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c88:	f7fe fe96 	bl	80029b8 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e0cb      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9e:	4b49      	ldr	r3, [pc, #292]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0ee      	beq.n	8003c88 <HAL_RCC_OscConfig+0x334>
 8003caa:	e014      	b.n	8003cd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cac:	f7fe fe84 	bl	80029b8 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb4:	f7fe fe80 	bl	80029b8 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e0b5      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cca:	4b3e      	ldr	r3, [pc, #248]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1ee      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cd6:	7dfb      	ldrb	r3, [r7, #23]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d105      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cdc:	4b39      	ldr	r3, [pc, #228]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce0:	4a38      	ldr	r2, [pc, #224]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003ce2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ce6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80a1 	beq.w	8003e34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cf2:	4b34      	ldr	r3, [pc, #208]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d05c      	beq.n	8003db8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d141      	bne.n	8003d8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d06:	4b31      	ldr	r3, [pc, #196]	@ (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fe fe54 	bl	80029b8 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d14:	f7fe fe50 	bl	80029b8 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e087      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d26:	4b27      	ldr	r3, [pc, #156]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69da      	ldr	r2, [r3, #28]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d40:	019b      	lsls	r3, r3, #6
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d48:	085b      	lsrs	r3, r3, #1
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	041b      	lsls	r3, r3, #16
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d54:	061b      	lsls	r3, r3, #24
 8003d56:	491b      	ldr	r1, [pc, #108]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d62:	f7fe fe29 	bl	80029b8 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6a:	f7fe fe25 	bl	80029b8 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e05c      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d7c:	4b11      	ldr	r3, [pc, #68]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x416>
 8003d88:	e054      	b.n	8003e34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8a:	4b10      	ldr	r3, [pc, #64]	@ (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fe fe12 	bl	80029b8 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fe fe0e 	bl	80029b8 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e045      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	4b06      	ldr	r3, [pc, #24]	@ (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x444>
 8003db6:	e03d      	b.n	8003e34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d107      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e038      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40007000 	.word	0x40007000
 8003dcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e40 <HAL_RCC_OscConfig+0x4ec>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d028      	beq.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d121      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d11a      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e00:	4013      	ands	r3, r2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d111      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d107      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800

08003e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0cc      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e58:	4b68      	ldr	r3, [pc, #416]	@ (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d90c      	bls.n	8003e80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b65      	ldr	r3, [pc, #404]	@ (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6e:	4b63      	ldr	r3, [pc, #396]	@ (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e0b8      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d020      	beq.n	8003ece <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e98:	4b59      	ldr	r3, [pc, #356]	@ (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a58      	ldr	r2, [pc, #352]	@ (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ea2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb0:	4b53      	ldr	r3, [pc, #332]	@ (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	4a52      	ldr	r2, [pc, #328]	@ (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003eba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ebc:	4b50      	ldr	r3, [pc, #320]	@ (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	494d      	ldr	r1, [pc, #308]	@ (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d044      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d107      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee2:	4b47      	ldr	r3, [pc, #284]	@ (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d119      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e07f      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d107      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f02:	4b3f      	ldr	r3, [pc, #252]	@ (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e06f      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f12:	4b3b      	ldr	r3, [pc, #236]	@ (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e067      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f22:	4b37      	ldr	r3, [pc, #220]	@ (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f023 0203 	bic.w	r2, r3, #3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4934      	ldr	r1, [pc, #208]	@ (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f34:	f7fe fd40 	bl	80029b8 <HAL_GetTick>
 8003f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f3c:	f7fe fd3c 	bl	80029b8 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e04f      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f52:	4b2b      	ldr	r3, [pc, #172]	@ (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 020c 	and.w	r2, r3, #12
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d1eb      	bne.n	8003f3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f64:	4b25      	ldr	r3, [pc, #148]	@ (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d20c      	bcs.n	8003f8c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f72:	4b22      	ldr	r3, [pc, #136]	@ (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7a:	4b20      	ldr	r3, [pc, #128]	@ (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e032      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f98:	4b19      	ldr	r3, [pc, #100]	@ (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4916      	ldr	r1, [pc, #88]	@ (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fb6:	4b12      	ldr	r3, [pc, #72]	@ (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	490e      	ldr	r1, [pc, #56]	@ (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fca:	f000 f821 	bl	8004010 <HAL_RCC_GetSysClockFreq>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	490a      	ldr	r1, [pc, #40]	@ (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003fdc:	5ccb      	ldrb	r3, [r1, r3]
 8003fde:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe2:	4a09      	ldr	r2, [pc, #36]	@ (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003fe6:	4b09      	ldr	r3, [pc, #36]	@ (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe fa18 	bl	8002420 <HAL_InitTick>

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40023c00 	.word	0x40023c00
 8004000:	40023800 	.word	0x40023800
 8004004:	0800cf44 	.word	0x0800cf44
 8004008:	20000014 	.word	0x20000014
 800400c:	20000018 	.word	0x20000018

08004010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004014:	b094      	sub	sp, #80	@ 0x50
 8004016:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004028:	4b79      	ldr	r3, [pc, #484]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 030c 	and.w	r3, r3, #12
 8004030:	2b08      	cmp	r3, #8
 8004032:	d00d      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0x40>
 8004034:	2b08      	cmp	r3, #8
 8004036:	f200 80e1 	bhi.w	80041fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <HAL_RCC_GetSysClockFreq+0x34>
 800403e:	2b04      	cmp	r3, #4
 8004040:	d003      	beq.n	800404a <HAL_RCC_GetSysClockFreq+0x3a>
 8004042:	e0db      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004044:	4b73      	ldr	r3, [pc, #460]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x204>)
 8004046:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004048:	e0db      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800404a:	4b73      	ldr	r3, [pc, #460]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x208>)
 800404c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800404e:	e0d8      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004050:	4b6f      	ldr	r3, [pc, #444]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004058:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800405a:	4b6d      	ldr	r3, [pc, #436]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d063      	beq.n	800412e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004066:	4b6a      	ldr	r3, [pc, #424]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	099b      	lsrs	r3, r3, #6
 800406c:	2200      	movs	r2, #0
 800406e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004070:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004078:	633b      	str	r3, [r7, #48]	@ 0x30
 800407a:	2300      	movs	r3, #0
 800407c:	637b      	str	r3, [r7, #52]	@ 0x34
 800407e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004082:	4622      	mov	r2, r4
 8004084:	462b      	mov	r3, r5
 8004086:	f04f 0000 	mov.w	r0, #0
 800408a:	f04f 0100 	mov.w	r1, #0
 800408e:	0159      	lsls	r1, r3, #5
 8004090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004094:	0150      	lsls	r0, r2, #5
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4621      	mov	r1, r4
 800409c:	1a51      	subs	r1, r2, r1
 800409e:	6139      	str	r1, [r7, #16]
 80040a0:	4629      	mov	r1, r5
 80040a2:	eb63 0301 	sbc.w	r3, r3, r1
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040b4:	4659      	mov	r1, fp
 80040b6:	018b      	lsls	r3, r1, #6
 80040b8:	4651      	mov	r1, sl
 80040ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040be:	4651      	mov	r1, sl
 80040c0:	018a      	lsls	r2, r1, #6
 80040c2:	4651      	mov	r1, sl
 80040c4:	ebb2 0801 	subs.w	r8, r2, r1
 80040c8:	4659      	mov	r1, fp
 80040ca:	eb63 0901 	sbc.w	r9, r3, r1
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040e2:	4690      	mov	r8, r2
 80040e4:	4699      	mov	r9, r3
 80040e6:	4623      	mov	r3, r4
 80040e8:	eb18 0303 	adds.w	r3, r8, r3
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	462b      	mov	r3, r5
 80040f0:	eb49 0303 	adc.w	r3, r9, r3
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004102:	4629      	mov	r1, r5
 8004104:	024b      	lsls	r3, r1, #9
 8004106:	4621      	mov	r1, r4
 8004108:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800410c:	4621      	mov	r1, r4
 800410e:	024a      	lsls	r2, r1, #9
 8004110:	4610      	mov	r0, r2
 8004112:	4619      	mov	r1, r3
 8004114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004116:	2200      	movs	r2, #0
 8004118:	62bb      	str	r3, [r7, #40]	@ 0x28
 800411a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800411c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004120:	f7fc fd4c 	bl	8000bbc <__aeabi_uldivmod>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4613      	mov	r3, r2
 800412a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800412c:	e058      	b.n	80041e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800412e:	4b38      	ldr	r3, [pc, #224]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	099b      	lsrs	r3, r3, #6
 8004134:	2200      	movs	r2, #0
 8004136:	4618      	mov	r0, r3
 8004138:	4611      	mov	r1, r2
 800413a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800413e:	623b      	str	r3, [r7, #32]
 8004140:	2300      	movs	r3, #0
 8004142:	627b      	str	r3, [r7, #36]	@ 0x24
 8004144:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004148:	4642      	mov	r2, r8
 800414a:	464b      	mov	r3, r9
 800414c:	f04f 0000 	mov.w	r0, #0
 8004150:	f04f 0100 	mov.w	r1, #0
 8004154:	0159      	lsls	r1, r3, #5
 8004156:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800415a:	0150      	lsls	r0, r2, #5
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4641      	mov	r1, r8
 8004162:	ebb2 0a01 	subs.w	sl, r2, r1
 8004166:	4649      	mov	r1, r9
 8004168:	eb63 0b01 	sbc.w	fp, r3, r1
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004178:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800417c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004180:	ebb2 040a 	subs.w	r4, r2, sl
 8004184:	eb63 050b 	sbc.w	r5, r3, fp
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	00eb      	lsls	r3, r5, #3
 8004192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004196:	00e2      	lsls	r2, r4, #3
 8004198:	4614      	mov	r4, r2
 800419a:	461d      	mov	r5, r3
 800419c:	4643      	mov	r3, r8
 800419e:	18e3      	adds	r3, r4, r3
 80041a0:	603b      	str	r3, [r7, #0]
 80041a2:	464b      	mov	r3, r9
 80041a4:	eb45 0303 	adc.w	r3, r5, r3
 80041a8:	607b      	str	r3, [r7, #4]
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041b6:	4629      	mov	r1, r5
 80041b8:	028b      	lsls	r3, r1, #10
 80041ba:	4621      	mov	r1, r4
 80041bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041c0:	4621      	mov	r1, r4
 80041c2:	028a      	lsls	r2, r1, #10
 80041c4:	4610      	mov	r0, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ca:	2200      	movs	r2, #0
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	61fa      	str	r2, [r7, #28]
 80041d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041d4:	f7fc fcf2 	bl	8000bbc <__aeabi_uldivmod>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4613      	mov	r3, r2
 80041de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80041e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	0c1b      	lsrs	r3, r3, #16
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	3301      	adds	r3, #1
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80041f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041fa:	e002      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041fc:	4b05      	ldr	r3, [pc, #20]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x204>)
 80041fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004204:	4618      	mov	r0, r3
 8004206:	3750      	adds	r7, #80	@ 0x50
 8004208:	46bd      	mov	sp, r7
 800420a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800420e:	bf00      	nop
 8004210:	40023800 	.word	0x40023800
 8004214:	00f42400 	.word	0x00f42400
 8004218:	007a1200 	.word	0x007a1200

0800421c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004220:	4b03      	ldr	r3, [pc, #12]	@ (8004230 <HAL_RCC_GetHCLKFreq+0x14>)
 8004222:	681b      	ldr	r3, [r3, #0]
}
 8004224:	4618      	mov	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	20000014 	.word	0x20000014

08004234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004238:	f7ff fff0 	bl	800421c <HAL_RCC_GetHCLKFreq>
 800423c:	4602      	mov	r2, r0
 800423e:	4b05      	ldr	r3, [pc, #20]	@ (8004254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	0a9b      	lsrs	r3, r3, #10
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	4903      	ldr	r1, [pc, #12]	@ (8004258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800424a:	5ccb      	ldrb	r3, [r1, r3]
 800424c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004250:	4618      	mov	r0, r3
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40023800 	.word	0x40023800
 8004258:	0800cf54 	.word	0x0800cf54

0800425c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004260:	f7ff ffdc 	bl	800421c <HAL_RCC_GetHCLKFreq>
 8004264:	4602      	mov	r2, r0
 8004266:	4b05      	ldr	r3, [pc, #20]	@ (800427c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	0b5b      	lsrs	r3, r3, #13
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	4903      	ldr	r1, [pc, #12]	@ (8004280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004272:	5ccb      	ldrb	r3, [r1, r3]
 8004274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004278:	4618      	mov	r0, r3
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40023800 	.word	0x40023800
 8004280:	0800cf54 	.word	0x0800cf54

08004284 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	220f      	movs	r2, #15
 8004292:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004294:	4b12      	ldr	r3, [pc, #72]	@ (80042e0 <HAL_RCC_GetClockConfig+0x5c>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 0203 	and.w	r2, r3, #3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042a0:	4b0f      	ldr	r3, [pc, #60]	@ (80042e0 <HAL_RCC_GetClockConfig+0x5c>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042ac:	4b0c      	ldr	r3, [pc, #48]	@ (80042e0 <HAL_RCC_GetClockConfig+0x5c>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042b8:	4b09      	ldr	r3, [pc, #36]	@ (80042e0 <HAL_RCC_GetClockConfig+0x5c>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	08db      	lsrs	r3, r3, #3
 80042be:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042c6:	4b07      	ldr	r3, [pc, #28]	@ (80042e4 <HAL_RCC_GetClockConfig+0x60>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0207 	and.w	r2, r3, #7
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	601a      	str	r2, [r3, #0]
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40023800 	.word	0x40023800
 80042e4:	40023c00 	.word	0x40023c00

080042e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e07b      	b.n	80043f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d108      	bne.n	8004314 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800430a:	d009      	beq.n	8004320 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	61da      	str	r2, [r3, #28]
 8004312:	e005      	b.n	8004320 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fd ff78 	bl	8002230 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004356:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004390:	431a      	orrs	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a4:	ea42 0103 	orr.w	r1, r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	f003 0104 	and.w	r1, r3, #4
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c6:	f003 0210 	and.w	r2, r3, #16
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69da      	ldr	r2, [r3, #28]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b088      	sub	sp, #32
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	603b      	str	r3, [r7, #0]
 8004406:	4613      	mov	r3, r2
 8004408:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800440a:	f7fe fad5 	bl	80029b8 <HAL_GetTick>
 800440e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b01      	cmp	r3, #1
 800441e:	d001      	beq.n	8004424 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004420:	2302      	movs	r3, #2
 8004422:	e12a      	b.n	800467a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <HAL_SPI_Transmit+0x36>
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e122      	b.n	800467a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_SPI_Transmit+0x48>
 800443e:	2302      	movs	r3, #2
 8004440:	e11b      	b.n	800467a <HAL_SPI_Transmit+0x280>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2203      	movs	r2, #3
 800444e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	88fa      	ldrh	r2, [r7, #6]
 8004462:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	88fa      	ldrh	r2, [r7, #6]
 8004468:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004490:	d10f      	bne.n	80044b2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044bc:	2b40      	cmp	r3, #64	@ 0x40
 80044be:	d007      	beq.n	80044d0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044d8:	d152      	bne.n	8004580 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <HAL_SPI_Transmit+0xee>
 80044e2:	8b7b      	ldrh	r3, [r7, #26]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d145      	bne.n	8004574 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ec:	881a      	ldrh	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f8:	1c9a      	adds	r2, r3, #2
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800450c:	e032      	b.n	8004574 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b02      	cmp	r3, #2
 800451a:	d112      	bne.n	8004542 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004520:	881a      	ldrh	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452c:	1c9a      	adds	r2, r3, #2
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004540:	e018      	b.n	8004574 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004542:	f7fe fa39 	bl	80029b8 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d803      	bhi.n	800455a <HAL_SPI_Transmit+0x160>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d102      	bne.n	8004560 <HAL_SPI_Transmit+0x166>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d109      	bne.n	8004574 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e082      	b.n	800467a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1c7      	bne.n	800450e <HAL_SPI_Transmit+0x114>
 800457e:	e053      	b.n	8004628 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_SPI_Transmit+0x194>
 8004588:	8b7b      	ldrh	r3, [r7, #26]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d147      	bne.n	800461e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	330c      	adds	r3, #12
 8004598:	7812      	ldrb	r2, [r2, #0]
 800459a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80045b4:	e033      	b.n	800461e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d113      	bne.n	80045ec <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	330c      	adds	r3, #12
 80045ce:	7812      	ldrb	r2, [r2, #0]
 80045d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045ea:	e018      	b.n	800461e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045ec:	f7fe f9e4 	bl	80029b8 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d803      	bhi.n	8004604 <HAL_SPI_Transmit+0x20a>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004602:	d102      	bne.n	800460a <HAL_SPI_Transmit+0x210>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e02d      	b.n	800467a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004622:	b29b      	uxth	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1c6      	bne.n	80045b6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004628:	69fa      	ldr	r2, [r7, #28]
 800462a:	6839      	ldr	r1, [r7, #0]
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 fbab 	bl	8004d88 <SPI_EndRxTxTransaction>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2220      	movs	r2, #32
 800463c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10a      	bne.n	800465c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e000      	b.n	800467a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004678:	2300      	movs	r3, #0
  }
}
 800467a:	4618      	mov	r0, r3
 800467c:	3720      	adds	r7, #32
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b08a      	sub	sp, #40	@ 0x28
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004690:	2301      	movs	r3, #1
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004694:	f7fe f990 	bl	80029b8 <HAL_GetTick>
 8004698:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046a0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80046a8:	887b      	ldrh	r3, [r7, #2]
 80046aa:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046ac:	7ffb      	ldrb	r3, [r7, #31]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d00c      	beq.n	80046cc <HAL_SPI_TransmitReceive+0x4a>
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046b8:	d106      	bne.n	80046c8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d102      	bne.n	80046c8 <HAL_SPI_TransmitReceive+0x46>
 80046c2:	7ffb      	ldrb	r3, [r7, #31]
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d001      	beq.n	80046cc <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80046c8:	2302      	movs	r3, #2
 80046ca:	e17f      	b.n	80049cc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d005      	beq.n	80046de <HAL_SPI_TransmitReceive+0x5c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <HAL_SPI_TransmitReceive+0x5c>
 80046d8:	887b      	ldrh	r3, [r7, #2]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e174      	b.n	80049cc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_SPI_TransmitReceive+0x6e>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e16d      	b.n	80049cc <HAL_SPI_TransmitReceive+0x34a>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b04      	cmp	r3, #4
 8004702:	d003      	beq.n	800470c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2205      	movs	r2, #5
 8004708:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	887a      	ldrh	r2, [r7, #2]
 800471c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	887a      	ldrh	r2, [r7, #2]
 8004722:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	887a      	ldrh	r2, [r7, #2]
 800472e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	887a      	ldrh	r2, [r7, #2]
 8004734:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800474c:	2b40      	cmp	r3, #64	@ 0x40
 800474e:	d007      	beq.n	8004760 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800475e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004768:	d17e      	bne.n	8004868 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <HAL_SPI_TransmitReceive+0xf6>
 8004772:	8afb      	ldrh	r3, [r7, #22]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d16c      	bne.n	8004852 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477c:	881a      	ldrh	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004788:	1c9a      	adds	r2, r3, #2
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800479c:	e059      	b.n	8004852 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d11b      	bne.n	80047e4 <HAL_SPI_TransmitReceive+0x162>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d016      	beq.n	80047e4 <HAL_SPI_TransmitReceive+0x162>
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d113      	bne.n	80047e4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c0:	881a      	ldrh	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047cc:	1c9a      	adds	r2, r3, #2
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d119      	bne.n	8004826 <HAL_SPI_TransmitReceive+0x1a4>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d014      	beq.n	8004826 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004806:	b292      	uxth	r2, r2
 8004808:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480e:	1c9a      	adds	r2, r3, #2
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004822:	2301      	movs	r3, #1
 8004824:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004826:	f7fe f8c7 	bl	80029b8 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004832:	429a      	cmp	r2, r3
 8004834:	d80d      	bhi.n	8004852 <HAL_SPI_TransmitReceive+0x1d0>
 8004836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483c:	d009      	beq.n	8004852 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e0bc      	b.n	80049cc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1a0      	bne.n	800479e <HAL_SPI_TransmitReceive+0x11c>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004860:	b29b      	uxth	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d19b      	bne.n	800479e <HAL_SPI_TransmitReceive+0x11c>
 8004866:	e082      	b.n	800496e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <HAL_SPI_TransmitReceive+0x1f4>
 8004870:	8afb      	ldrh	r3, [r7, #22]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d171      	bne.n	800495a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	330c      	adds	r3, #12
 8004880:	7812      	ldrb	r2, [r2, #0]
 8004882:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800489c:	e05d      	b.n	800495a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d11c      	bne.n	80048e6 <HAL_SPI_TransmitReceive+0x264>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d017      	beq.n	80048e6 <HAL_SPI_TransmitReceive+0x264>
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d114      	bne.n	80048e6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	330c      	adds	r3, #12
 80048c6:	7812      	ldrb	r2, [r2, #0]
 80048c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d119      	bne.n	8004928 <HAL_SPI_TransmitReceive+0x2a6>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d014      	beq.n	8004928 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800491a:	b29b      	uxth	r3, r3
 800491c:	3b01      	subs	r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004924:	2301      	movs	r3, #1
 8004926:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004928:	f7fe f846 	bl	80029b8 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004934:	429a      	cmp	r2, r3
 8004936:	d803      	bhi.n	8004940 <HAL_SPI_TransmitReceive+0x2be>
 8004938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d102      	bne.n	8004946 <HAL_SPI_TransmitReceive+0x2c4>
 8004940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004942:	2b00      	cmp	r3, #0
 8004944:	d109      	bne.n	800495a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e038      	b.n	80049cc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d19c      	bne.n	800489e <HAL_SPI_TransmitReceive+0x21c>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d197      	bne.n	800489e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800496e:	6a3a      	ldr	r2, [r7, #32]
 8004970:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 fa08 	bl	8004d88 <SPI_EndRxTxTransaction>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d008      	beq.n	8004990 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2220      	movs	r2, #32
 8004982:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e01d      	b.n	80049cc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004998:	2300      	movs	r3, #0
 800499a:	613b      	str	r3, [r7, #16]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	613b      	str	r3, [r7, #16]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	613b      	str	r3, [r7, #16]
 80049ac:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80049ca:	2300      	movs	r3, #0
  }
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3728      	adds	r7, #40	@ 0x28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	4613      	mov	r3, r2
 80049e0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d001      	beq.n	80049f2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80049ee:	2302      	movs	r3, #2
 80049f0:	e097      	b.n	8004b22 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <HAL_SPI_Transmit_DMA+0x2a>
 80049f8:	88fb      	ldrh	r3, [r7, #6]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e08f      	b.n	8004b22 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <HAL_SPI_Transmit_DMA+0x3c>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e088      	b.n	8004b22 <HAL_SPI_Transmit_DMA+0x14e>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2203      	movs	r2, #3
 8004a1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	88fa      	ldrh	r2, [r7, #6]
 8004a30:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	88fa      	ldrh	r2, [r7, #6]
 8004a36:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a5e:	d10f      	bne.n	8004a80 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a7e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a84:	4a29      	ldr	r2, [pc, #164]	@ (8004b2c <HAL_SPI_Transmit_DMA+0x158>)
 8004a86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a8c:	4a28      	ldr	r2, [pc, #160]	@ (8004b30 <HAL_SPI_Transmit_DMA+0x15c>)
 8004a8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a94:	4a27      	ldr	r2, [pc, #156]	@ (8004b34 <HAL_SPI_Transmit_DMA+0x160>)
 8004a96:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	330c      	adds	r3, #12
 8004ab0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ab6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004ab8:	f7fe faa4 	bl	8003004 <HAL_DMA_Start_IT>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00b      	beq.n	8004ada <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac6:	f043 0210 	orr.w	r2, r3, #16
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e023      	b.n	8004b22 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae4:	2b40      	cmp	r3, #64	@ 0x40
 8004ae6:	d007      	beq.n	8004af8 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004af6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0220 	orr.w	r2, r2, #32
 8004b0e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0202 	orr.w	r2, r2, #2
 8004b1e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	08004c1d 	.word	0x08004c1d
 8004b30:	08004b75 	.word	0x08004b75
 8004b34:	08004c39 	.word	0x08004c39

08004b38 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b80:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b82:	f7fd ff19 	bl	80029b8 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b96:	d03b      	beq.n	8004c10 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0220 	bic.w	r2, r2, #32
 8004ba6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0202 	bic.w	r2, r2, #2
 8004bb6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	2164      	movs	r1, #100	@ 0x64
 8004bbc:	6978      	ldr	r0, [r7, #20]
 8004bbe:	f000 f8e3 	bl	8004d88 <SPI_EndRxTxTransaction>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bcc:	f043 0220 	orr.w	r2, r3, #32
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10a      	bne.n	8004bf2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004c08:	6978      	ldr	r0, [r7, #20]
 8004c0a:	f7ff ffa9 	bl	8004b60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004c0e:	e002      	b.n	8004c16 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004c10:	6978      	ldr	r0, [r7, #20]
 8004c12:	f7ff ff91 	bl	8004b38 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f7ff ff8e 	bl	8004b4c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0203 	bic.w	r2, r2, #3
 8004c54:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c5a:	f043 0210 	orr.w	r2, r3, #16
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f7ff ff78 	bl	8004b60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c70:	bf00      	nop
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c88:	f7fd fe96 	bl	80029b8 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c90:	1a9b      	subs	r3, r3, r2
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	4413      	add	r3, r2
 8004c96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c98:	f7fd fe8e 	bl	80029b8 <HAL_GetTick>
 8004c9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c9e:	4b39      	ldr	r3, [pc, #228]	@ (8004d84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	015b      	lsls	r3, r3, #5
 8004ca4:	0d1b      	lsrs	r3, r3, #20
 8004ca6:	69fa      	ldr	r2, [r7, #28]
 8004ca8:	fb02 f303 	mul.w	r3, r2, r3
 8004cac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cae:	e054      	b.n	8004d5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb6:	d050      	beq.n	8004d5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cb8:	f7fd fe7e 	bl	80029b8 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	69fa      	ldr	r2, [r7, #28]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d902      	bls.n	8004cce <SPI_WaitFlagStateUntilTimeout+0x56>
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d13d      	bne.n	8004d4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004cdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ce6:	d111      	bne.n	8004d0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cf0:	d004      	beq.n	8004cfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cfa:	d107      	bne.n	8004d0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d14:	d10f      	bne.n	8004d36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e017      	b.n	8004d7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4013      	ands	r3, r2
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	bf0c      	ite	eq
 8004d6a:	2301      	moveq	r3, #1
 8004d6c:	2300      	movne	r3, #0
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	461a      	mov	r2, r3
 8004d72:	79fb      	ldrb	r3, [r7, #7]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d19b      	bne.n	8004cb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3720      	adds	r7, #32
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20000014 	.word	0x20000014

08004d88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	2102      	movs	r1, #2
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f7ff ff6a 	bl	8004c78 <SPI_WaitFlagStateUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d007      	beq.n	8004dba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dae:	f043 0220 	orr.w	r2, r3, #32
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e032      	b.n	8004e20 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004dba:	4b1b      	ldr	r3, [pc, #108]	@ (8004e28 <SPI_EndRxTxTransaction+0xa0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8004e2c <SPI_EndRxTxTransaction+0xa4>)
 8004dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc4:	0d5b      	lsrs	r3, r3, #21
 8004dc6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004dca:	fb02 f303 	mul.w	r3, r2, r3
 8004dce:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dd8:	d112      	bne.n	8004e00 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2200      	movs	r2, #0
 8004de2:	2180      	movs	r1, #128	@ 0x80
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f7ff ff47 	bl	8004c78 <SPI_WaitFlagStateUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d016      	beq.n	8004e1e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df4:	f043 0220 	orr.w	r2, r3, #32
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e00f      	b.n	8004e20 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e16:	2b80      	cmp	r3, #128	@ 0x80
 8004e18:	d0f2      	beq.n	8004e00 <SPI_EndRxTxTransaction+0x78>
 8004e1a:	e000      	b.n	8004e1e <SPI_EndRxTxTransaction+0x96>
        break;
 8004e1c:	bf00      	nop
  }

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	20000014 	.word	0x20000014
 8004e2c:	165e9f81 	.word	0x165e9f81

08004e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e041      	b.n	8004ec6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f839 	bl	8004ece <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	4610      	mov	r0, r2
 8004e70:	f000 f9c0 	bl	80051f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
	...

08004ee4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d001      	beq.n	8004efc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e04e      	b.n	8004f9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0201 	orr.w	r2, r2, #1
 8004f12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a23      	ldr	r2, [pc, #140]	@ (8004fa8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d022      	beq.n	8004f64 <HAL_TIM_Base_Start_IT+0x80>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f26:	d01d      	beq.n	8004f64 <HAL_TIM_Base_Start_IT+0x80>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a1f      	ldr	r2, [pc, #124]	@ (8004fac <HAL_TIM_Base_Start_IT+0xc8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d018      	beq.n	8004f64 <HAL_TIM_Base_Start_IT+0x80>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1e      	ldr	r2, [pc, #120]	@ (8004fb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d013      	beq.n	8004f64 <HAL_TIM_Base_Start_IT+0x80>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00e      	beq.n	8004f64 <HAL_TIM_Base_Start_IT+0x80>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d009      	beq.n	8004f64 <HAL_TIM_Base_Start_IT+0x80>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a19      	ldr	r2, [pc, #100]	@ (8004fbc <HAL_TIM_Base_Start_IT+0xd8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d004      	beq.n	8004f64 <HAL_TIM_Base_Start_IT+0x80>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a18      	ldr	r2, [pc, #96]	@ (8004fc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d111      	bne.n	8004f88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b06      	cmp	r3, #6
 8004f74:	d010      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f042 0201 	orr.w	r2, r2, #1
 8004f84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f86:	e007      	b.n	8004f98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0201 	orr.w	r2, r2, #1
 8004f96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40010000 	.word	0x40010000
 8004fac:	40000400 	.word	0x40000400
 8004fb0:	40000800 	.word	0x40000800
 8004fb4:	40000c00 	.word	0x40000c00
 8004fb8:	40010400 	.word	0x40010400
 8004fbc:	40014000 	.word	0x40014000
 8004fc0:	40001800 	.word	0x40001800

08004fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d020      	beq.n	8005028 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d01b      	beq.n	8005028 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0202 	mvn.w	r2, #2
 8004ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f8d2 	bl	80051b8 <HAL_TIM_IC_CaptureCallback>
 8005014:	e005      	b.n	8005022 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8c4 	bl	80051a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f8d5 	bl	80051cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	2b00      	cmp	r3, #0
 8005030:	d020      	beq.n	8005074 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01b      	beq.n	8005074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f06f 0204 	mvn.w	r2, #4
 8005044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2202      	movs	r2, #2
 800504a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f8ac 	bl	80051b8 <HAL_TIM_IC_CaptureCallback>
 8005060:	e005      	b.n	800506e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f89e 	bl	80051a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f8af 	bl	80051cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b00      	cmp	r3, #0
 800507c:	d020      	beq.n	80050c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01b      	beq.n	80050c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0208 	mvn.w	r2, #8
 8005090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2204      	movs	r2, #4
 8005096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f886 	bl	80051b8 <HAL_TIM_IC_CaptureCallback>
 80050ac:	e005      	b.n	80050ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f878 	bl	80051a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f889 	bl	80051cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f003 0310 	and.w	r3, r3, #16
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d020      	beq.n	800510c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f003 0310 	and.w	r3, r3, #16
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01b      	beq.n	800510c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f06f 0210 	mvn.w	r2, #16
 80050dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2208      	movs	r2, #8
 80050e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f860 	bl	80051b8 <HAL_TIM_IC_CaptureCallback>
 80050f8:	e005      	b.n	8005106 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f852 	bl	80051a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f863 	bl	80051cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00c      	beq.n	8005130 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d007      	beq.n	8005130 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0201 	mvn.w	r2, #1
 8005128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fd f832 	bl	8002194 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00c      	beq.n	8005154 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005140:	2b00      	cmp	r3, #0
 8005142:	d007      	beq.n	8005154 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800514c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f906 	bl	8005360 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00c      	beq.n	8005178 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005164:	2b00      	cmp	r3, #0
 8005166:	d007      	beq.n	8005178 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f834 	bl	80051e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f003 0320 	and.w	r3, r3, #32
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00c      	beq.n	800519c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b00      	cmp	r3, #0
 800518a:	d007      	beq.n	800519c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0220 	mvn.w	r2, #32
 8005194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f8d8 	bl	800534c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a46      	ldr	r2, [pc, #280]	@ (8005320 <TIM_Base_SetConfig+0x12c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d013      	beq.n	8005234 <TIM_Base_SetConfig+0x40>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005212:	d00f      	beq.n	8005234 <TIM_Base_SetConfig+0x40>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a43      	ldr	r2, [pc, #268]	@ (8005324 <TIM_Base_SetConfig+0x130>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00b      	beq.n	8005234 <TIM_Base_SetConfig+0x40>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a42      	ldr	r2, [pc, #264]	@ (8005328 <TIM_Base_SetConfig+0x134>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d007      	beq.n	8005234 <TIM_Base_SetConfig+0x40>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a41      	ldr	r2, [pc, #260]	@ (800532c <TIM_Base_SetConfig+0x138>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_Base_SetConfig+0x40>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a40      	ldr	r2, [pc, #256]	@ (8005330 <TIM_Base_SetConfig+0x13c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d108      	bne.n	8005246 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800523a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a35      	ldr	r2, [pc, #212]	@ (8005320 <TIM_Base_SetConfig+0x12c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d02b      	beq.n	80052a6 <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005254:	d027      	beq.n	80052a6 <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a32      	ldr	r2, [pc, #200]	@ (8005324 <TIM_Base_SetConfig+0x130>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d023      	beq.n	80052a6 <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a31      	ldr	r2, [pc, #196]	@ (8005328 <TIM_Base_SetConfig+0x134>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d01f      	beq.n	80052a6 <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a30      	ldr	r2, [pc, #192]	@ (800532c <TIM_Base_SetConfig+0x138>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d01b      	beq.n	80052a6 <TIM_Base_SetConfig+0xb2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a2f      	ldr	r2, [pc, #188]	@ (8005330 <TIM_Base_SetConfig+0x13c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d017      	beq.n	80052a6 <TIM_Base_SetConfig+0xb2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a2e      	ldr	r2, [pc, #184]	@ (8005334 <TIM_Base_SetConfig+0x140>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d013      	beq.n	80052a6 <TIM_Base_SetConfig+0xb2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a2d      	ldr	r2, [pc, #180]	@ (8005338 <TIM_Base_SetConfig+0x144>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00f      	beq.n	80052a6 <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a2c      	ldr	r2, [pc, #176]	@ (800533c <TIM_Base_SetConfig+0x148>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00b      	beq.n	80052a6 <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a2b      	ldr	r2, [pc, #172]	@ (8005340 <TIM_Base_SetConfig+0x14c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d007      	beq.n	80052a6 <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a2a      	ldr	r2, [pc, #168]	@ (8005344 <TIM_Base_SetConfig+0x150>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d003      	beq.n	80052a6 <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a29      	ldr	r2, [pc, #164]	@ (8005348 <TIM_Base_SetConfig+0x154>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d108      	bne.n	80052b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a10      	ldr	r2, [pc, #64]	@ (8005320 <TIM_Base_SetConfig+0x12c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d003      	beq.n	80052ec <TIM_Base_SetConfig+0xf8>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a12      	ldr	r2, [pc, #72]	@ (8005330 <TIM_Base_SetConfig+0x13c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d103      	bne.n	80052f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	691a      	ldr	r2, [r3, #16]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b01      	cmp	r3, #1
 8005304:	d105      	bne.n	8005312 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f023 0201 	bic.w	r2, r3, #1
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	611a      	str	r2, [r3, #16]
  }
}
 8005312:	bf00      	nop
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40010000 	.word	0x40010000
 8005324:	40000400 	.word	0x40000400
 8005328:	40000800 	.word	0x40000800
 800532c:	40000c00 	.word	0x40000c00
 8005330:	40010400 	.word	0x40010400
 8005334:	40014000 	.word	0x40014000
 8005338:	40014400 	.word	0x40014400
 800533c:	40014800 	.word	0x40014800
 8005340:	40001800 	.word	0x40001800
 8005344:	40001c00 	.word	0x40001c00
 8005348:	40002000 	.word	0x40002000

0800534c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e042      	b.n	800540c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fd f986 	bl	80026ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2224      	movs	r2, #36	@ 0x24
 80053a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f973 	bl	80056a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	691a      	ldr	r2, [r3, #16]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695a      	ldr	r2, [r3, #20]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2220      	movs	r2, #32
 8005400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08a      	sub	sp, #40	@ 0x28
 8005418:	af02      	add	r7, sp, #8
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	603b      	str	r3, [r7, #0]
 8005420:	4613      	mov	r3, r2
 8005422:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b20      	cmp	r3, #32
 8005432:	d175      	bne.n	8005520 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <HAL_UART_Transmit+0x2c>
 800543a:	88fb      	ldrh	r3, [r7, #6]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e06e      	b.n	8005522 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2221      	movs	r2, #33	@ 0x21
 800544e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005452:	f7fd fab1 	bl	80029b8 <HAL_GetTick>
 8005456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	88fa      	ldrh	r2, [r7, #6]
 800545c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	88fa      	ldrh	r2, [r7, #6]
 8005462:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800546c:	d108      	bne.n	8005480 <HAL_UART_Transmit+0x6c>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d104      	bne.n	8005480 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005476:	2300      	movs	r3, #0
 8005478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	61bb      	str	r3, [r7, #24]
 800547e:	e003      	b.n	8005488 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005484:	2300      	movs	r3, #0
 8005486:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005488:	e02e      	b.n	80054e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2200      	movs	r2, #0
 8005492:	2180      	movs	r1, #128	@ 0x80
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 f848 	bl	800552a <UART_WaitOnFlagUntilTimeout>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e03a      	b.n	8005522 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10b      	bne.n	80054ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	3302      	adds	r3, #2
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	e007      	b.n	80054da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	781a      	ldrb	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	3301      	adds	r3, #1
 80054d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1cb      	bne.n	800548a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2200      	movs	r2, #0
 80054fa:	2140      	movs	r1, #64	@ 0x40
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 f814 	bl	800552a <UART_WaitOnFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e006      	b.n	8005522 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2220      	movs	r2, #32
 8005518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800551c:	2300      	movs	r3, #0
 800551e:	e000      	b.n	8005522 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005520:	2302      	movs	r3, #2
  }
}
 8005522:	4618      	mov	r0, r3
 8005524:	3720      	adds	r7, #32
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b086      	sub	sp, #24
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	603b      	str	r3, [r7, #0]
 8005536:	4613      	mov	r3, r2
 8005538:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800553a:	e03b      	b.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005542:	d037      	beq.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005544:	f7fd fa38 	bl	80029b8 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	6a3a      	ldr	r2, [r7, #32]
 8005550:	429a      	cmp	r2, r3
 8005552:	d302      	bcc.n	800555a <UART_WaitOnFlagUntilTimeout+0x30>
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e03a      	b.n	80055d4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b00      	cmp	r3, #0
 800556a:	d023      	beq.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b80      	cmp	r3, #128	@ 0x80
 8005570:	d020      	beq.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b40      	cmp	r3, #64	@ 0x40
 8005576:	d01d      	beq.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b08      	cmp	r3, #8
 8005584:	d116      	bne.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	617b      	str	r3, [r7, #20]
 800559a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f81d 	bl	80055dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2208      	movs	r2, #8
 80055a6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e00f      	b.n	80055d4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4013      	ands	r3, r2
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	bf0c      	ite	eq
 80055c4:	2301      	moveq	r3, #1
 80055c6:	2300      	movne	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	461a      	mov	r2, r3
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d0b4      	beq.n	800553c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055dc:	b480      	push	{r7}
 80055de:	b095      	sub	sp, #84	@ 0x54
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	330c      	adds	r3, #12
 80055ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ee:	e853 3f00 	ldrex	r3, [r3]
 80055f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	330c      	adds	r3, #12
 8005602:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005604:	643a      	str	r2, [r7, #64]	@ 0x40
 8005606:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005608:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800560a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800560c:	e841 2300 	strex	r3, r2, [r1]
 8005610:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1e5      	bne.n	80055e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3314      	adds	r3, #20
 800561e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	61fb      	str	r3, [r7, #28]
   return(result);
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	f023 0301 	bic.w	r3, r3, #1
 800562e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3314      	adds	r3, #20
 8005636:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005638:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800563a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800563e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e5      	bne.n	8005618 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005650:	2b01      	cmp	r3, #1
 8005652:	d119      	bne.n	8005688 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	330c      	adds	r3, #12
 800565a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	60bb      	str	r3, [r7, #8]
   return(result);
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f023 0310 	bic.w	r3, r3, #16
 800566a:	647b      	str	r3, [r7, #68]	@ 0x44
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	330c      	adds	r3, #12
 8005672:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005674:	61ba      	str	r2, [r7, #24]
 8005676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6979      	ldr	r1, [r7, #20]
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	613b      	str	r3, [r7, #16]
   return(result);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e5      	bne.n	8005654 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005696:	bf00      	nop
 8005698:	3754      	adds	r7, #84	@ 0x54
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
	...

080056a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056a8:	b0c0      	sub	sp, #256	@ 0x100
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c0:	68d9      	ldr	r1, [r3, #12]
 80056c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	ea40 0301 	orr.w	r3, r0, r1
 80056cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	431a      	orrs	r2, r3
 80056dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	431a      	orrs	r2, r3
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80056fc:	f021 010c 	bic.w	r1, r1, #12
 8005700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800570a:	430b      	orrs	r3, r1
 800570c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800570e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800571a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571e:	6999      	ldr	r1, [r3, #24]
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	ea40 0301 	orr.w	r3, r0, r1
 800572a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800572c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	4b8f      	ldr	r3, [pc, #572]	@ (8005970 <UART_SetConfig+0x2cc>)
 8005734:	429a      	cmp	r2, r3
 8005736:	d005      	beq.n	8005744 <UART_SetConfig+0xa0>
 8005738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	4b8d      	ldr	r3, [pc, #564]	@ (8005974 <UART_SetConfig+0x2d0>)
 8005740:	429a      	cmp	r2, r3
 8005742:	d104      	bne.n	800574e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005744:	f7fe fd8a 	bl	800425c <HAL_RCC_GetPCLK2Freq>
 8005748:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800574c:	e003      	b.n	8005756 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800574e:	f7fe fd71 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8005752:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005760:	f040 810c 	bne.w	800597c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005768:	2200      	movs	r2, #0
 800576a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800576e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005772:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005776:	4622      	mov	r2, r4
 8005778:	462b      	mov	r3, r5
 800577a:	1891      	adds	r1, r2, r2
 800577c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800577e:	415b      	adcs	r3, r3
 8005780:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005782:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005786:	4621      	mov	r1, r4
 8005788:	eb12 0801 	adds.w	r8, r2, r1
 800578c:	4629      	mov	r1, r5
 800578e:	eb43 0901 	adc.w	r9, r3, r1
 8005792:	f04f 0200 	mov.w	r2, #0
 8005796:	f04f 0300 	mov.w	r3, #0
 800579a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800579e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057a6:	4690      	mov	r8, r2
 80057a8:	4699      	mov	r9, r3
 80057aa:	4623      	mov	r3, r4
 80057ac:	eb18 0303 	adds.w	r3, r8, r3
 80057b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80057b4:	462b      	mov	r3, r5
 80057b6:	eb49 0303 	adc.w	r3, r9, r3
 80057ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80057ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80057ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80057d2:	460b      	mov	r3, r1
 80057d4:	18db      	adds	r3, r3, r3
 80057d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80057d8:	4613      	mov	r3, r2
 80057da:	eb42 0303 	adc.w	r3, r2, r3
 80057de:	657b      	str	r3, [r7, #84]	@ 0x54
 80057e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80057e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80057e8:	f7fb f9e8 	bl	8000bbc <__aeabi_uldivmod>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4b61      	ldr	r3, [pc, #388]	@ (8005978 <UART_SetConfig+0x2d4>)
 80057f2:	fba3 2302 	umull	r2, r3, r3, r2
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	011c      	lsls	r4, r3, #4
 80057fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005804:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005808:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800580c:	4642      	mov	r2, r8
 800580e:	464b      	mov	r3, r9
 8005810:	1891      	adds	r1, r2, r2
 8005812:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005814:	415b      	adcs	r3, r3
 8005816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005818:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800581c:	4641      	mov	r1, r8
 800581e:	eb12 0a01 	adds.w	sl, r2, r1
 8005822:	4649      	mov	r1, r9
 8005824:	eb43 0b01 	adc.w	fp, r3, r1
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	f04f 0300 	mov.w	r3, #0
 8005830:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005834:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800583c:	4692      	mov	sl, r2
 800583e:	469b      	mov	fp, r3
 8005840:	4643      	mov	r3, r8
 8005842:	eb1a 0303 	adds.w	r3, sl, r3
 8005846:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800584a:	464b      	mov	r3, r9
 800584c:	eb4b 0303 	adc.w	r3, fp, r3
 8005850:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005860:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005864:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005868:	460b      	mov	r3, r1
 800586a:	18db      	adds	r3, r3, r3
 800586c:	643b      	str	r3, [r7, #64]	@ 0x40
 800586e:	4613      	mov	r3, r2
 8005870:	eb42 0303 	adc.w	r3, r2, r3
 8005874:	647b      	str	r3, [r7, #68]	@ 0x44
 8005876:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800587a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800587e:	f7fb f99d 	bl	8000bbc <__aeabi_uldivmod>
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	4611      	mov	r1, r2
 8005888:	4b3b      	ldr	r3, [pc, #236]	@ (8005978 <UART_SetConfig+0x2d4>)
 800588a:	fba3 2301 	umull	r2, r3, r3, r1
 800588e:	095b      	lsrs	r3, r3, #5
 8005890:	2264      	movs	r2, #100	@ 0x64
 8005892:	fb02 f303 	mul.w	r3, r2, r3
 8005896:	1acb      	subs	r3, r1, r3
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800589e:	4b36      	ldr	r3, [pc, #216]	@ (8005978 <UART_SetConfig+0x2d4>)
 80058a0:	fba3 2302 	umull	r2, r3, r3, r2
 80058a4:	095b      	lsrs	r3, r3, #5
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80058ac:	441c      	add	r4, r3
 80058ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058b2:	2200      	movs	r2, #0
 80058b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80058bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80058c0:	4642      	mov	r2, r8
 80058c2:	464b      	mov	r3, r9
 80058c4:	1891      	adds	r1, r2, r2
 80058c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80058c8:	415b      	adcs	r3, r3
 80058ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80058d0:	4641      	mov	r1, r8
 80058d2:	1851      	adds	r1, r2, r1
 80058d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80058d6:	4649      	mov	r1, r9
 80058d8:	414b      	adcs	r3, r1
 80058da:	637b      	str	r3, [r7, #52]	@ 0x34
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	f04f 0300 	mov.w	r3, #0
 80058e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80058e8:	4659      	mov	r1, fp
 80058ea:	00cb      	lsls	r3, r1, #3
 80058ec:	4651      	mov	r1, sl
 80058ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058f2:	4651      	mov	r1, sl
 80058f4:	00ca      	lsls	r2, r1, #3
 80058f6:	4610      	mov	r0, r2
 80058f8:	4619      	mov	r1, r3
 80058fa:	4603      	mov	r3, r0
 80058fc:	4642      	mov	r2, r8
 80058fe:	189b      	adds	r3, r3, r2
 8005900:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005904:	464b      	mov	r3, r9
 8005906:	460a      	mov	r2, r1
 8005908:	eb42 0303 	adc.w	r3, r2, r3
 800590c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800591c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005920:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005924:	460b      	mov	r3, r1
 8005926:	18db      	adds	r3, r3, r3
 8005928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800592a:	4613      	mov	r3, r2
 800592c:	eb42 0303 	adc.w	r3, r2, r3
 8005930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005936:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800593a:	f7fb f93f 	bl	8000bbc <__aeabi_uldivmod>
 800593e:	4602      	mov	r2, r0
 8005940:	460b      	mov	r3, r1
 8005942:	4b0d      	ldr	r3, [pc, #52]	@ (8005978 <UART_SetConfig+0x2d4>)
 8005944:	fba3 1302 	umull	r1, r3, r3, r2
 8005948:	095b      	lsrs	r3, r3, #5
 800594a:	2164      	movs	r1, #100	@ 0x64
 800594c:	fb01 f303 	mul.w	r3, r1, r3
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	3332      	adds	r3, #50	@ 0x32
 8005956:	4a08      	ldr	r2, [pc, #32]	@ (8005978 <UART_SetConfig+0x2d4>)
 8005958:	fba2 2303 	umull	r2, r3, r2, r3
 800595c:	095b      	lsrs	r3, r3, #5
 800595e:	f003 0207 	and.w	r2, r3, #7
 8005962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4422      	add	r2, r4
 800596a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800596c:	e106      	b.n	8005b7c <UART_SetConfig+0x4d8>
 800596e:	bf00      	nop
 8005970:	40011000 	.word	0x40011000
 8005974:	40011400 	.word	0x40011400
 8005978:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800597c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005980:	2200      	movs	r2, #0
 8005982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005986:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800598a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800598e:	4642      	mov	r2, r8
 8005990:	464b      	mov	r3, r9
 8005992:	1891      	adds	r1, r2, r2
 8005994:	6239      	str	r1, [r7, #32]
 8005996:	415b      	adcs	r3, r3
 8005998:	627b      	str	r3, [r7, #36]	@ 0x24
 800599a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800599e:	4641      	mov	r1, r8
 80059a0:	1854      	adds	r4, r2, r1
 80059a2:	4649      	mov	r1, r9
 80059a4:	eb43 0501 	adc.w	r5, r3, r1
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	00eb      	lsls	r3, r5, #3
 80059b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059b6:	00e2      	lsls	r2, r4, #3
 80059b8:	4614      	mov	r4, r2
 80059ba:	461d      	mov	r5, r3
 80059bc:	4643      	mov	r3, r8
 80059be:	18e3      	adds	r3, r4, r3
 80059c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80059c4:	464b      	mov	r3, r9
 80059c6:	eb45 0303 	adc.w	r3, r5, r3
 80059ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80059ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059de:	f04f 0200 	mov.w	r2, #0
 80059e2:	f04f 0300 	mov.w	r3, #0
 80059e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80059ea:	4629      	mov	r1, r5
 80059ec:	008b      	lsls	r3, r1, #2
 80059ee:	4621      	mov	r1, r4
 80059f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059f4:	4621      	mov	r1, r4
 80059f6:	008a      	lsls	r2, r1, #2
 80059f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80059fc:	f7fb f8de 	bl	8000bbc <__aeabi_uldivmod>
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	4b60      	ldr	r3, [pc, #384]	@ (8005b88 <UART_SetConfig+0x4e4>)
 8005a06:	fba3 2302 	umull	r2, r3, r3, r2
 8005a0a:	095b      	lsrs	r3, r3, #5
 8005a0c:	011c      	lsls	r4, r3, #4
 8005a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a20:	4642      	mov	r2, r8
 8005a22:	464b      	mov	r3, r9
 8005a24:	1891      	adds	r1, r2, r2
 8005a26:	61b9      	str	r1, [r7, #24]
 8005a28:	415b      	adcs	r3, r3
 8005a2a:	61fb      	str	r3, [r7, #28]
 8005a2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a30:	4641      	mov	r1, r8
 8005a32:	1851      	adds	r1, r2, r1
 8005a34:	6139      	str	r1, [r7, #16]
 8005a36:	4649      	mov	r1, r9
 8005a38:	414b      	adcs	r3, r1
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	f04f 0200 	mov.w	r2, #0
 8005a40:	f04f 0300 	mov.w	r3, #0
 8005a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a48:	4659      	mov	r1, fp
 8005a4a:	00cb      	lsls	r3, r1, #3
 8005a4c:	4651      	mov	r1, sl
 8005a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a52:	4651      	mov	r1, sl
 8005a54:	00ca      	lsls	r2, r1, #3
 8005a56:	4610      	mov	r0, r2
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	4642      	mov	r2, r8
 8005a5e:	189b      	adds	r3, r3, r2
 8005a60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a64:	464b      	mov	r3, r9
 8005a66:	460a      	mov	r2, r1
 8005a68:	eb42 0303 	adc.w	r3, r2, r3
 8005a6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	f04f 0300 	mov.w	r3, #0
 8005a84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a88:	4649      	mov	r1, r9
 8005a8a:	008b      	lsls	r3, r1, #2
 8005a8c:	4641      	mov	r1, r8
 8005a8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a92:	4641      	mov	r1, r8
 8005a94:	008a      	lsls	r2, r1, #2
 8005a96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a9a:	f7fb f88f 	bl	8000bbc <__aeabi_uldivmod>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	4b38      	ldr	r3, [pc, #224]	@ (8005b88 <UART_SetConfig+0x4e4>)
 8005aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	2264      	movs	r2, #100	@ 0x64
 8005aae:	fb02 f303 	mul.w	r3, r2, r3
 8005ab2:	1acb      	subs	r3, r1, r3
 8005ab4:	011b      	lsls	r3, r3, #4
 8005ab6:	3332      	adds	r3, #50	@ 0x32
 8005ab8:	4a33      	ldr	r2, [pc, #204]	@ (8005b88 <UART_SetConfig+0x4e4>)
 8005aba:	fba2 2303 	umull	r2, r3, r2, r3
 8005abe:	095b      	lsrs	r3, r3, #5
 8005ac0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ac4:	441c      	add	r4, r3
 8005ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aca:	2200      	movs	r2, #0
 8005acc:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ace:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ad0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ad4:	4642      	mov	r2, r8
 8005ad6:	464b      	mov	r3, r9
 8005ad8:	1891      	adds	r1, r2, r2
 8005ada:	60b9      	str	r1, [r7, #8]
 8005adc:	415b      	adcs	r3, r3
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ae4:	4641      	mov	r1, r8
 8005ae6:	1851      	adds	r1, r2, r1
 8005ae8:	6039      	str	r1, [r7, #0]
 8005aea:	4649      	mov	r1, r9
 8005aec:	414b      	adcs	r3, r1
 8005aee:	607b      	str	r3, [r7, #4]
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	f04f 0300 	mov.w	r3, #0
 8005af8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005afc:	4659      	mov	r1, fp
 8005afe:	00cb      	lsls	r3, r1, #3
 8005b00:	4651      	mov	r1, sl
 8005b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b06:	4651      	mov	r1, sl
 8005b08:	00ca      	lsls	r2, r1, #3
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4603      	mov	r3, r0
 8005b10:	4642      	mov	r2, r8
 8005b12:	189b      	adds	r3, r3, r2
 8005b14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b16:	464b      	mov	r3, r9
 8005b18:	460a      	mov	r2, r1
 8005b1a:	eb42 0303 	adc.w	r3, r2, r3
 8005b1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	f04f 0300 	mov.w	r3, #0
 8005b34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b38:	4649      	mov	r1, r9
 8005b3a:	008b      	lsls	r3, r1, #2
 8005b3c:	4641      	mov	r1, r8
 8005b3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b42:	4641      	mov	r1, r8
 8005b44:	008a      	lsls	r2, r1, #2
 8005b46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b4a:	f7fb f837 	bl	8000bbc <__aeabi_uldivmod>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	4b0d      	ldr	r3, [pc, #52]	@ (8005b88 <UART_SetConfig+0x4e4>)
 8005b54:	fba3 1302 	umull	r1, r3, r3, r2
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	2164      	movs	r1, #100	@ 0x64
 8005b5c:	fb01 f303 	mul.w	r3, r1, r3
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	011b      	lsls	r3, r3, #4
 8005b64:	3332      	adds	r3, #50	@ 0x32
 8005b66:	4a08      	ldr	r2, [pc, #32]	@ (8005b88 <UART_SetConfig+0x4e4>)
 8005b68:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	f003 020f 	and.w	r2, r3, #15
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4422      	add	r2, r4
 8005b7a:	609a      	str	r2, [r3, #8]
}
 8005b7c:	bf00      	nop
 8005b7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b82:	46bd      	mov	sp, r7
 8005b84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b88:	51eb851f 	.word	0x51eb851f

08005b8c <__NVIC_SetPriority>:
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	4603      	mov	r3, r0
 8005b94:	6039      	str	r1, [r7, #0]
 8005b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	db0a      	blt.n	8005bb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	490c      	ldr	r1, [pc, #48]	@ (8005bd8 <__NVIC_SetPriority+0x4c>)
 8005ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005baa:	0112      	lsls	r2, r2, #4
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	440b      	add	r3, r1
 8005bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005bb4:	e00a      	b.n	8005bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	4908      	ldr	r1, [pc, #32]	@ (8005bdc <__NVIC_SetPriority+0x50>)
 8005bbc:	79fb      	ldrb	r3, [r7, #7]
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	3b04      	subs	r3, #4
 8005bc4:	0112      	lsls	r2, r2, #4
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	440b      	add	r3, r1
 8005bca:	761a      	strb	r2, [r3, #24]
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	e000e100 	.word	0xe000e100
 8005bdc:	e000ed00 	.word	0xe000ed00

08005be0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005be4:	4b05      	ldr	r3, [pc, #20]	@ (8005bfc <SysTick_Handler+0x1c>)
 8005be6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005be8:	f002 f996 	bl	8007f18 <xTaskGetSchedulerState>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d001      	beq.n	8005bf6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005bf2:	f003 f891 	bl	8008d18 <xPortSysTickHandler>
  }
}
 8005bf6:	bf00      	nop
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	e000e010 	.word	0xe000e010

08005c00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005c04:	2100      	movs	r1, #0
 8005c06:	f06f 0004 	mvn.w	r0, #4
 8005c0a:	f7ff ffbf 	bl	8005b8c <__NVIC_SetPriority>
#endif
}
 8005c0e:	bf00      	nop
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c14 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c1a:	f3ef 8305 	mrs	r3, IPSR
 8005c1e:	603b      	str	r3, [r7, #0]
  return(result);
 8005c20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005c26:	f06f 0305 	mvn.w	r3, #5
 8005c2a:	607b      	str	r3, [r7, #4]
 8005c2c:	e00c      	b.n	8005c48 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c58 <osKernelInitialize+0x44>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d105      	bne.n	8005c42 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005c36:	4b08      	ldr	r3, [pc, #32]	@ (8005c58 <osKernelInitialize+0x44>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	607b      	str	r3, [r7, #4]
 8005c40:	e002      	b.n	8005c48 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005c42:	f04f 33ff 	mov.w	r3, #4294967295
 8005c46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c48:	687b      	ldr	r3, [r7, #4]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	20000bd8 	.word	0x20000bd8

08005c5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c62:	f3ef 8305 	mrs	r3, IPSR
 8005c66:	603b      	str	r3, [r7, #0]
  return(result);
 8005c68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005c6e:	f06f 0305 	mvn.w	r3, #5
 8005c72:	607b      	str	r3, [r7, #4]
 8005c74:	e010      	b.n	8005c98 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c76:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca4 <osKernelStart+0x48>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d109      	bne.n	8005c92 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005c7e:	f7ff ffbf 	bl	8005c00 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005c82:	4b08      	ldr	r3, [pc, #32]	@ (8005ca4 <osKernelStart+0x48>)
 8005c84:	2202      	movs	r2, #2
 8005c86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005c88:	f001 fce2 	bl	8007650 <vTaskStartScheduler>
      stat = osOK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	607b      	str	r3, [r7, #4]
 8005c90:	e002      	b.n	8005c98 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005c92:	f04f 33ff 	mov.w	r3, #4294967295
 8005c96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c98:	687b      	ldr	r3, [r7, #4]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20000bd8 	.word	0x20000bd8

08005ca8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08e      	sub	sp, #56	@ 0x38
 8005cac:	af04      	add	r7, sp, #16
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cb8:	f3ef 8305 	mrs	r3, IPSR
 8005cbc:	617b      	str	r3, [r7, #20]
  return(result);
 8005cbe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d17e      	bne.n	8005dc2 <osThreadNew+0x11a>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d07b      	beq.n	8005dc2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005cca:	2380      	movs	r3, #128	@ 0x80
 8005ccc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005cce:	2318      	movs	r3, #24
 8005cd0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d045      	beq.n	8005d6e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <osThreadNew+0x48>
        name = attr->name;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d008      	beq.n	8005d16 <osThreadNew+0x6e>
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	2b38      	cmp	r3, #56	@ 0x38
 8005d08:	d805      	bhi.n	8005d16 <osThreadNew+0x6e>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <osThreadNew+0x72>
        return (NULL);
 8005d16:	2300      	movs	r3, #0
 8005d18:	e054      	b.n	8005dc4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	089b      	lsrs	r3, r3, #2
 8005d28:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00e      	beq.n	8005d50 <osThreadNew+0xa8>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	2ba7      	cmp	r3, #167	@ 0xa7
 8005d38:	d90a      	bls.n	8005d50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d006      	beq.n	8005d50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <osThreadNew+0xa8>
        mem = 1;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	e010      	b.n	8005d72 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10c      	bne.n	8005d72 <osThreadNew+0xca>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d108      	bne.n	8005d72 <osThreadNew+0xca>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d104      	bne.n	8005d72 <osThreadNew+0xca>
          mem = 0;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	61bb      	str	r3, [r7, #24]
 8005d6c:	e001      	b.n	8005d72 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d110      	bne.n	8005d9a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d80:	9202      	str	r2, [sp, #8]
 8005d82:	9301      	str	r3, [sp, #4]
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	6a3a      	ldr	r2, [r7, #32]
 8005d8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f001 fa6a 	bl	8007268 <xTaskCreateStatic>
 8005d94:	4603      	mov	r3, r0
 8005d96:	613b      	str	r3, [r7, #16]
 8005d98:	e013      	b.n	8005dc2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d110      	bne.n	8005dc2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	f107 0310 	add.w	r3, r7, #16
 8005da8:	9301      	str	r3, [sp, #4]
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f001 fab8 	bl	8007328 <xTaskCreate>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d001      	beq.n	8005dc2 <osThreadNew+0x11a>
            hTask = NULL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005dc2:	693b      	ldr	r3, [r7, #16]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3728      	adds	r7, #40	@ 0x28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dd4:	f3ef 8305 	mrs	r3, IPSR
 8005dd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dda:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <osDelay+0x1c>
    stat = osErrorISR;
 8005de0:	f06f 0305 	mvn.w	r3, #5
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	e007      	b.n	8005df8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f001 fbf6 	bl	80075e4 <vTaskDelay>
    }
  }

  return (stat);
 8005df8:	68fb      	ldr	r3, [r7, #12]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b08a      	sub	sp, #40	@ 0x28
 8005e06:	af02      	add	r7, sp, #8
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e12:	f3ef 8305 	mrs	r3, IPSR
 8005e16:	613b      	str	r3, [r7, #16]
  return(result);
 8005e18:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d175      	bne.n	8005f0a <osSemaphoreNew+0x108>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d072      	beq.n	8005f0a <osSemaphoreNew+0x108>
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d86e      	bhi.n	8005f0a <osSemaphoreNew+0x108>
    mem = -1;
 8005e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e30:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d015      	beq.n	8005e64 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d006      	beq.n	8005e4e <osSemaphoreNew+0x4c>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	2b4f      	cmp	r3, #79	@ 0x4f
 8005e46:	d902      	bls.n	8005e4e <osSemaphoreNew+0x4c>
        mem = 1;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	61bb      	str	r3, [r7, #24]
 8005e4c:	e00c      	b.n	8005e68 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d108      	bne.n	8005e68 <osSemaphoreNew+0x66>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d104      	bne.n	8005e68 <osSemaphoreNew+0x66>
          mem = 0;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61bb      	str	r3, [r7, #24]
 8005e62:	e001      	b.n	8005e68 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005e64:	2300      	movs	r3, #0
 8005e66:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6e:	d04c      	beq.n	8005f0a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d128      	bne.n	8005ec8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d10a      	bne.n	8005e92 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	2203      	movs	r2, #3
 8005e82:	9200      	str	r2, [sp, #0]
 8005e84:	2200      	movs	r2, #0
 8005e86:	2100      	movs	r1, #0
 8005e88:	2001      	movs	r0, #1
 8005e8a:	f000 fa2b 	bl	80062e4 <xQueueGenericCreateStatic>
 8005e8e:	61f8      	str	r0, [r7, #28]
 8005e90:	e005      	b.n	8005e9e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005e92:	2203      	movs	r2, #3
 8005e94:	2100      	movs	r1, #0
 8005e96:	2001      	movs	r0, #1
 8005e98:	f000 faa1 	bl	80063de <xQueueGenericCreate>
 8005e9c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d022      	beq.n	8005eea <osSemaphoreNew+0xe8>
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d01f      	beq.n	8005eea <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005eaa:	2300      	movs	r3, #0
 8005eac:	2200      	movs	r2, #0
 8005eae:	2100      	movs	r1, #0
 8005eb0:	69f8      	ldr	r0, [r7, #28]
 8005eb2:	f000 fb61 	bl	8006578 <xQueueGenericSend>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d016      	beq.n	8005eea <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005ebc:	69f8      	ldr	r0, [r7, #28]
 8005ebe:	f000 ffff 	bl	8006ec0 <vQueueDelete>
            hSemaphore = NULL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	61fb      	str	r3, [r7, #28]
 8005ec6:	e010      	b.n	8005eea <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d108      	bne.n	8005ee0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	68b9      	ldr	r1, [r7, #8]
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 fadf 	bl	800649a <xQueueCreateCountingSemaphoreStatic>
 8005edc:	61f8      	str	r0, [r7, #28]
 8005ede:	e004      	b.n	8005eea <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 fb12 	bl	800650c <xQueueCreateCountingSemaphore>
 8005ee8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00c      	beq.n	8005f0a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <osSemaphoreNew+0xfc>
          name = attr->name;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	e001      	b.n	8005f02 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005f02:	6979      	ldr	r1, [r7, #20]
 8005f04:	69f8      	ldr	r0, [r7, #28]
 8005f06:	f001 f927 	bl	8007158 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005f0a:	69fb      	ldr	r3, [r7, #28]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3720      	adds	r7, #32
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d103      	bne.n	8005f34 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005f2c:	f06f 0303 	mvn.w	r3, #3
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	e039      	b.n	8005fa8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f34:	f3ef 8305 	mrs	r3, IPSR
 8005f38:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d022      	beq.n	8005f86 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005f46:	f06f 0303 	mvn.w	r3, #3
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	e02c      	b.n	8005fa8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005f52:	f107 0308 	add.w	r3, r7, #8
 8005f56:	461a      	mov	r2, r3
 8005f58:	2100      	movs	r1, #0
 8005f5a:	6938      	ldr	r0, [r7, #16]
 8005f5c:	f000 ff2e 	bl	8006dbc <xQueueReceiveFromISR>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d003      	beq.n	8005f6e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005f66:	f06f 0302 	mvn.w	r3, #2
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	e01c      	b.n	8005fa8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d019      	beq.n	8005fa8 <osSemaphoreAcquire+0x94>
 8005f74:	4b0f      	ldr	r3, [pc, #60]	@ (8005fb4 <osSemaphoreAcquire+0xa0>)
 8005f76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	e010      	b.n	8005fa8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005f86:	6839      	ldr	r1, [r7, #0]
 8005f88:	6938      	ldr	r0, [r7, #16]
 8005f8a:	f000 fe07 	bl	8006b9c <xQueueSemaphoreTake>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d009      	beq.n	8005fa8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005f9a:	f06f 0301 	mvn.w	r3, #1
 8005f9e:	617b      	str	r3, [r7, #20]
 8005fa0:	e002      	b.n	8005fa8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005fa2:	f06f 0302 	mvn.w	r3, #2
 8005fa6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005fa8:	697b      	ldr	r3, [r7, #20]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	e000ed04 	.word	0xe000ed04

08005fb8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d103      	bne.n	8005fd6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005fce:	f06f 0303 	mvn.w	r3, #3
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	e02c      	b.n	8006030 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fd6:	f3ef 8305 	mrs	r3, IPSR
 8005fda:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d01a      	beq.n	8006018 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005fe6:	f107 0308 	add.w	r3, r7, #8
 8005fea:	4619      	mov	r1, r3
 8005fec:	6938      	ldr	r0, [r7, #16]
 8005fee:	f000 fc63 	bl	80068b8 <xQueueGiveFromISR>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d003      	beq.n	8006000 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005ff8:	f06f 0302 	mvn.w	r3, #2
 8005ffc:	617b      	str	r3, [r7, #20]
 8005ffe:	e017      	b.n	8006030 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d014      	beq.n	8006030 <osSemaphoreRelease+0x78>
 8006006:	4b0d      	ldr	r3, [pc, #52]	@ (800603c <osSemaphoreRelease+0x84>)
 8006008:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	e00b      	b.n	8006030 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006018:	2300      	movs	r3, #0
 800601a:	2200      	movs	r2, #0
 800601c:	2100      	movs	r1, #0
 800601e:	6938      	ldr	r0, [r7, #16]
 8006020:	f000 faaa 	bl	8006578 <xQueueGenericSend>
 8006024:	4603      	mov	r3, r0
 8006026:	2b01      	cmp	r3, #1
 8006028:	d002      	beq.n	8006030 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800602a:	f06f 0302 	mvn.w	r3, #2
 800602e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006030:	697b      	ldr	r3, [r7, #20]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	e000ed04 	.word	0xe000ed04

08006040 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4a07      	ldr	r2, [pc, #28]	@ (800606c <vApplicationGetIdleTaskMemory+0x2c>)
 8006050:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	4a06      	ldr	r2, [pc, #24]	@ (8006070 <vApplicationGetIdleTaskMemory+0x30>)
 8006056:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2280      	movs	r2, #128	@ 0x80
 800605c:	601a      	str	r2, [r3, #0]
}
 800605e:	bf00      	nop
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	20000bdc 	.word	0x20000bdc
 8006070:	20000c84 	.word	0x20000c84

08006074 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4a07      	ldr	r2, [pc, #28]	@ (80060a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8006084:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	4a06      	ldr	r2, [pc, #24]	@ (80060a4 <vApplicationGetTimerTaskMemory+0x30>)
 800608a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006092:	601a      	str	r2, [r3, #0]
}
 8006094:	bf00      	nop
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	20000e84 	.word	0x20000e84
 80060a4:	20000f2c 	.word	0x20000f2c

080060a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f103 0208 	add.w	r2, r3, #8
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f04f 32ff 	mov.w	r2, #4294967295
 80060c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f103 0208 	add.w	r2, r3, #8
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f103 0208 	add.w	r2, r3, #8
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006102:	b480      	push	{r7}
 8006104:	b085      	sub	sp, #20
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	1c5a      	adds	r2, r3, #1
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	601a      	str	r2, [r3, #0]
}
 800613e:	bf00      	nop
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800614a:	b480      	push	{r7}
 800614c:	b085      	sub	sp, #20
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d103      	bne.n	800616a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	e00c      	b.n	8006184 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3308      	adds	r3, #8
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	e002      	b.n	8006178 <vListInsert+0x2e>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	429a      	cmp	r2, r3
 8006182:	d2f6      	bcs.n	8006172 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	601a      	str	r2, [r3, #0]
}
 80061b0:	bf00      	nop
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6892      	ldr	r2, [r2, #8]
 80061d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	6852      	ldr	r2, [r2, #4]
 80061dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d103      	bne.n	80061f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	1e5a      	subs	r2, r3, #1
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10b      	bne.n	800623c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006236:	bf00      	nop
 8006238:	bf00      	nop
 800623a:	e7fd      	b.n	8006238 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800623c:	f002 fcdc 	bl	8008bf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006248:	68f9      	ldr	r1, [r7, #12]
 800624a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800624c:	fb01 f303 	mul.w	r3, r1, r3
 8006250:	441a      	add	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800626c:	3b01      	subs	r3, #1
 800626e:	68f9      	ldr	r1, [r7, #12]
 8006270:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006272:	fb01 f303 	mul.w	r3, r1, r3
 8006276:	441a      	add	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	22ff      	movs	r2, #255	@ 0xff
 8006280:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	22ff      	movs	r2, #255	@ 0xff
 8006288:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d114      	bne.n	80062bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d01a      	beq.n	80062d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3310      	adds	r3, #16
 800629e:	4618      	mov	r0, r3
 80062a0:	f001 fc74 	bl	8007b8c <xTaskRemoveFromEventList>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d012      	beq.n	80062d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80062aa:	4b0d      	ldr	r3, [pc, #52]	@ (80062e0 <xQueueGenericReset+0xd0>)
 80062ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	e009      	b.n	80062d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3310      	adds	r3, #16
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff fef1 	bl	80060a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3324      	adds	r3, #36	@ 0x24
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff feec 	bl	80060a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80062d0:	f002 fcc4 	bl	8008c5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80062d4:	2301      	movs	r3, #1
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	e000ed04 	.word	0xe000ed04

080062e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08e      	sub	sp, #56	@ 0x38
 80062e8:	af02      	add	r7, sp, #8
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
 80062f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10b      	bne.n	8006310 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800630a:	bf00      	nop
 800630c:	bf00      	nop
 800630e:	e7fd      	b.n	800630c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10b      	bne.n	800632e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006328:	bf00      	nop
 800632a:	bf00      	nop
 800632c:	e7fd      	b.n	800632a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <xQueueGenericCreateStatic+0x56>
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <xQueueGenericCreateStatic+0x5a>
 800633a:	2301      	movs	r3, #1
 800633c:	e000      	b.n	8006340 <xQueueGenericCreateStatic+0x5c>
 800633e:	2300      	movs	r3, #0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10b      	bne.n	800635c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	623b      	str	r3, [r7, #32]
}
 8006356:	bf00      	nop
 8006358:	bf00      	nop
 800635a:	e7fd      	b.n	8006358 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d102      	bne.n	8006368 <xQueueGenericCreateStatic+0x84>
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <xQueueGenericCreateStatic+0x88>
 8006368:	2301      	movs	r3, #1
 800636a:	e000      	b.n	800636e <xQueueGenericCreateStatic+0x8a>
 800636c:	2300      	movs	r3, #0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10b      	bne.n	800638a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	61fb      	str	r3, [r7, #28]
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop
 8006388:	e7fd      	b.n	8006386 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800638a:	2350      	movs	r3, #80	@ 0x50
 800638c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2b50      	cmp	r3, #80	@ 0x50
 8006392:	d00b      	beq.n	80063ac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	61bb      	str	r3, [r7, #24]
}
 80063a6:	bf00      	nop
 80063a8:	bf00      	nop
 80063aa:	e7fd      	b.n	80063a8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80063ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80063b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00d      	beq.n	80063d4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80063b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80063c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	4613      	mov	r3, r2
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 f840 	bl	8006454 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3730      	adds	r7, #48	@ 0x30
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b08a      	sub	sp, #40	@ 0x28
 80063e2:	af02      	add	r7, sp, #8
 80063e4:	60f8      	str	r0, [r7, #12]
 80063e6:	60b9      	str	r1, [r7, #8]
 80063e8:	4613      	mov	r3, r2
 80063ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10b      	bne.n	800640a <xQueueGenericCreate+0x2c>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	613b      	str	r3, [r7, #16]
}
 8006404:	bf00      	nop
 8006406:	bf00      	nop
 8006408:	e7fd      	b.n	8006406 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	fb02 f303 	mul.w	r3, r2, r3
 8006412:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	3350      	adds	r3, #80	@ 0x50
 8006418:	4618      	mov	r0, r3
 800641a:	f002 fd0f 	bl	8008e3c <pvPortMalloc>
 800641e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d011      	beq.n	800644a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	3350      	adds	r3, #80	@ 0x50
 800642e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006438:	79fa      	ldrb	r2, [r7, #7]
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	4613      	mov	r3, r2
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	68b9      	ldr	r1, [r7, #8]
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 f805 	bl	8006454 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800644a:	69bb      	ldr	r3, [r7, #24]
	}
 800644c:	4618      	mov	r0, r3
 800644e:	3720      	adds	r7, #32
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
 8006460:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d103      	bne.n	8006470 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	e002      	b.n	8006476 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006482:	2101      	movs	r1, #1
 8006484:	69b8      	ldr	r0, [r7, #24]
 8006486:	f7ff fec3 	bl	8006210 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	78fa      	ldrb	r2, [r7, #3]
 800648e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006492:	bf00      	nop
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800649a:	b580      	push	{r7, lr}
 800649c:	b08a      	sub	sp, #40	@ 0x28
 800649e:	af02      	add	r7, sp, #8
 80064a0:	60f8      	str	r0, [r7, #12]
 80064a2:	60b9      	str	r1, [r7, #8]
 80064a4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10b      	bne.n	80064c4 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80064ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	61bb      	str	r3, [r7, #24]
}
 80064be:	bf00      	nop
 80064c0:	bf00      	nop
 80064c2:	e7fd      	b.n	80064c0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d90b      	bls.n	80064e4 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80064cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	617b      	str	r3, [r7, #20]
}
 80064de:	bf00      	nop
 80064e0:	bf00      	nop
 80064e2:	e7fd      	b.n	80064e0 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80064e4:	2302      	movs	r3, #2
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	2100      	movs	r1, #0
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f7ff fef8 	bl	80062e4 <xQueueGenericCreateStatic>
 80064f4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006502:	69fb      	ldr	r3, [r7, #28]
	}
 8006504:	4618      	mov	r0, r3
 8006506:	3720      	adds	r7, #32
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10b      	bne.n	8006534 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	613b      	str	r3, [r7, #16]
}
 800652e:	bf00      	nop
 8006530:	bf00      	nop
 8006532:	e7fd      	b.n	8006530 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	429a      	cmp	r2, r3
 800653a:	d90b      	bls.n	8006554 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	60fb      	str	r3, [r7, #12]
}
 800654e:	bf00      	nop
 8006550:	bf00      	nop
 8006552:	e7fd      	b.n	8006550 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006554:	2202      	movs	r2, #2
 8006556:	2100      	movs	r1, #0
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff ff40 	bl	80063de <xQueueGenericCreate>
 800655e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800656c:	697b      	ldr	r3, [r7, #20]
	}
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08e      	sub	sp, #56	@ 0x38
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006586:	2300      	movs	r3, #0
 8006588:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800658e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10b      	bne.n	80065ac <xQueueGenericSend+0x34>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80065a6:	bf00      	nop
 80065a8:	bf00      	nop
 80065aa:	e7fd      	b.n	80065a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d103      	bne.n	80065ba <xQueueGenericSend+0x42>
 80065b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <xQueueGenericSend+0x46>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e000      	b.n	80065c0 <xQueueGenericSend+0x48>
 80065be:	2300      	movs	r3, #0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10b      	bne.n	80065dc <xQueueGenericSend+0x64>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80065d6:	bf00      	nop
 80065d8:	bf00      	nop
 80065da:	e7fd      	b.n	80065d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d103      	bne.n	80065ea <xQueueGenericSend+0x72>
 80065e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d101      	bne.n	80065ee <xQueueGenericSend+0x76>
 80065ea:	2301      	movs	r3, #1
 80065ec:	e000      	b.n	80065f0 <xQueueGenericSend+0x78>
 80065ee:	2300      	movs	r3, #0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10b      	bne.n	800660c <xQueueGenericSend+0x94>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	623b      	str	r3, [r7, #32]
}
 8006606:	bf00      	nop
 8006608:	bf00      	nop
 800660a:	e7fd      	b.n	8006608 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800660c:	f001 fc84 	bl	8007f18 <xTaskGetSchedulerState>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d102      	bne.n	800661c <xQueueGenericSend+0xa4>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <xQueueGenericSend+0xa8>
 800661c:	2301      	movs	r3, #1
 800661e:	e000      	b.n	8006622 <xQueueGenericSend+0xaa>
 8006620:	2300      	movs	r3, #0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10b      	bne.n	800663e <xQueueGenericSend+0xc6>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	61fb      	str	r3, [r7, #28]
}
 8006638:	bf00      	nop
 800663a:	bf00      	nop
 800663c:	e7fd      	b.n	800663a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800663e:	f002 fadb 	bl	8008bf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800664a:	429a      	cmp	r2, r3
 800664c:	d302      	bcc.n	8006654 <xQueueGenericSend+0xdc>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b02      	cmp	r3, #2
 8006652:	d129      	bne.n	80066a8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	68b9      	ldr	r1, [r7, #8]
 8006658:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800665a:	f000 fc6d 	bl	8006f38 <prvCopyDataToQueue>
 800665e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006664:	2b00      	cmp	r3, #0
 8006666:	d010      	beq.n	800668a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666a:	3324      	adds	r3, #36	@ 0x24
 800666c:	4618      	mov	r0, r3
 800666e:	f001 fa8d 	bl	8007b8c <xTaskRemoveFromEventList>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d013      	beq.n	80066a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006678:	4b3f      	ldr	r3, [pc, #252]	@ (8006778 <xQueueGenericSend+0x200>)
 800667a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	e00a      	b.n	80066a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800668a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d007      	beq.n	80066a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006690:	4b39      	ldr	r3, [pc, #228]	@ (8006778 <xQueueGenericSend+0x200>)
 8006692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80066a0:	f002 fadc 	bl	8008c5c <vPortExitCritical>
				return pdPASS;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e063      	b.n	8006770 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d103      	bne.n	80066b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066ae:	f002 fad5 	bl	8008c5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80066b2:	2300      	movs	r3, #0
 80066b4:	e05c      	b.n	8006770 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d106      	bne.n	80066ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066bc:	f107 0314 	add.w	r3, r7, #20
 80066c0:	4618      	mov	r0, r3
 80066c2:	f001 fac7 	bl	8007c54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066c6:	2301      	movs	r3, #1
 80066c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066ca:	f002 fac7 	bl	8008c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066ce:	f001 f82f 	bl	8007730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066d2:	f002 fa91 	bl	8008bf8 <vPortEnterCritical>
 80066d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066dc:	b25b      	sxtb	r3, r3
 80066de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e2:	d103      	bne.n	80066ec <xQueueGenericSend+0x174>
 80066e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066f2:	b25b      	sxtb	r3, r3
 80066f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f8:	d103      	bne.n	8006702 <xQueueGenericSend+0x18a>
 80066fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006702:	f002 faab 	bl	8008c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006706:	1d3a      	adds	r2, r7, #4
 8006708:	f107 0314 	add.w	r3, r7, #20
 800670c:	4611      	mov	r1, r2
 800670e:	4618      	mov	r0, r3
 8006710:	f001 fab6 	bl	8007c80 <xTaskCheckForTimeOut>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d124      	bne.n	8006764 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800671a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800671c:	f000 fd04 	bl	8007128 <prvIsQueueFull>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d018      	beq.n	8006758 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006728:	3310      	adds	r3, #16
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	4611      	mov	r1, r2
 800672e:	4618      	mov	r0, r3
 8006730:	f001 f9da 	bl	8007ae8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006734:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006736:	f000 fc8f 	bl	8007058 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800673a:	f001 f807 	bl	800774c <xTaskResumeAll>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	f47f af7c 	bne.w	800663e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006746:	4b0c      	ldr	r3, [pc, #48]	@ (8006778 <xQueueGenericSend+0x200>)
 8006748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	e772      	b.n	800663e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006758:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800675a:	f000 fc7d 	bl	8007058 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800675e:	f000 fff5 	bl	800774c <xTaskResumeAll>
 8006762:	e76c      	b.n	800663e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006764:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006766:	f000 fc77 	bl	8007058 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800676a:	f000 ffef 	bl	800774c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800676e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006770:	4618      	mov	r0, r3
 8006772:	3738      	adds	r7, #56	@ 0x38
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	e000ed04 	.word	0xe000ed04

0800677c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b090      	sub	sp, #64	@ 0x40
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800678e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10b      	bne.n	80067ac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80067a6:	bf00      	nop
 80067a8:	bf00      	nop
 80067aa:	e7fd      	b.n	80067a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d103      	bne.n	80067ba <xQueueGenericSendFromISR+0x3e>
 80067b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <xQueueGenericSendFromISR+0x42>
 80067ba:	2301      	movs	r3, #1
 80067bc:	e000      	b.n	80067c0 <xQueueGenericSendFromISR+0x44>
 80067be:	2300      	movs	r3, #0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10b      	bne.n	80067dc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80067d6:	bf00      	nop
 80067d8:	bf00      	nop
 80067da:	e7fd      	b.n	80067d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d103      	bne.n	80067ea <xQueueGenericSendFromISR+0x6e>
 80067e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d101      	bne.n	80067ee <xQueueGenericSendFromISR+0x72>
 80067ea:	2301      	movs	r3, #1
 80067ec:	e000      	b.n	80067f0 <xQueueGenericSendFromISR+0x74>
 80067ee:	2300      	movs	r3, #0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10b      	bne.n	800680c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	623b      	str	r3, [r7, #32]
}
 8006806:	bf00      	nop
 8006808:	bf00      	nop
 800680a:	e7fd      	b.n	8006808 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800680c:	f002 fad4 	bl	8008db8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006810:	f3ef 8211 	mrs	r2, BASEPRI
 8006814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	61fa      	str	r2, [r7, #28]
 8006826:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006828:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800682a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800682c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006834:	429a      	cmp	r2, r3
 8006836:	d302      	bcc.n	800683e <xQueueGenericSendFromISR+0xc2>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b02      	cmp	r3, #2
 800683c:	d12f      	bne.n	800689e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800683e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006840:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006844:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	68b9      	ldr	r1, [r7, #8]
 8006852:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006854:	f000 fb70 	bl	8006f38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006858:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006860:	d112      	bne.n	8006888 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006866:	2b00      	cmp	r3, #0
 8006868:	d016      	beq.n	8006898 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800686a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686c:	3324      	adds	r3, #36	@ 0x24
 800686e:	4618      	mov	r0, r3
 8006870:	f001 f98c 	bl	8007b8c <xTaskRemoveFromEventList>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00e      	beq.n	8006898 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00b      	beq.n	8006898 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	e007      	b.n	8006898 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006888:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800688c:	3301      	adds	r3, #1
 800688e:	b2db      	uxtb	r3, r3
 8006890:	b25a      	sxtb	r2, r3
 8006892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006894:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006898:	2301      	movs	r3, #1
 800689a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800689c:	e001      	b.n	80068a2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80068ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80068ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3740      	adds	r7, #64	@ 0x40
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b08e      	sub	sp, #56	@ 0x38
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80068c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	623b      	str	r3, [r7, #32]
}
 80068de:	bf00      	nop
 80068e0:	bf00      	nop
 80068e2:	e7fd      	b.n	80068e0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80068e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00b      	beq.n	8006904 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	61fb      	str	r3, [r7, #28]
}
 80068fe:	bf00      	nop
 8006900:	bf00      	nop
 8006902:	e7fd      	b.n	8006900 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d103      	bne.n	8006914 <xQueueGiveFromISR+0x5c>
 800690c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <xQueueGiveFromISR+0x60>
 8006914:	2301      	movs	r3, #1
 8006916:	e000      	b.n	800691a <xQueueGiveFromISR+0x62>
 8006918:	2300      	movs	r3, #0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10b      	bne.n	8006936 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	61bb      	str	r3, [r7, #24]
}
 8006930:	bf00      	nop
 8006932:	bf00      	nop
 8006934:	e7fd      	b.n	8006932 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006936:	f002 fa3f 	bl	8008db8 <vPortValidateInterruptPriority>
	__asm volatile
 800693a:	f3ef 8211 	mrs	r2, BASEPRI
 800693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	617a      	str	r2, [r7, #20]
 8006950:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006952:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006954:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800695c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006960:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006962:	429a      	cmp	r2, r3
 8006964:	d22b      	bcs.n	80069be <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006968:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800696c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006976:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006978:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800697c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006980:	d112      	bne.n	80069a8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006986:	2b00      	cmp	r3, #0
 8006988:	d016      	beq.n	80069b8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800698a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698c:	3324      	adds	r3, #36	@ 0x24
 800698e:	4618      	mov	r0, r3
 8006990:	f001 f8fc 	bl	8007b8c <xTaskRemoveFromEventList>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00e      	beq.n	80069b8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00b      	beq.n	80069b8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2201      	movs	r2, #1
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	e007      	b.n	80069b8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80069a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069ac:	3301      	adds	r3, #1
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	b25a      	sxtb	r2, r3
 80069b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80069b8:	2301      	movs	r3, #1
 80069ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80069bc:	e001      	b.n	80069c2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80069be:	2300      	movs	r3, #0
 80069c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80069c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f383 8811 	msr	BASEPRI, r3
}
 80069cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3738      	adds	r7, #56	@ 0x38
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b08c      	sub	sp, #48	@ 0x30
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80069e4:	2300      	movs	r3, #0
 80069e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10b      	bne.n	8006a0a <xQueueReceive+0x32>
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	623b      	str	r3, [r7, #32]
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop
 8006a08:	e7fd      	b.n	8006a06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d103      	bne.n	8006a18 <xQueueReceive+0x40>
 8006a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <xQueueReceive+0x44>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e000      	b.n	8006a1e <xQueueReceive+0x46>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10b      	bne.n	8006a3a <xQueueReceive+0x62>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	61fb      	str	r3, [r7, #28]
}
 8006a34:	bf00      	nop
 8006a36:	bf00      	nop
 8006a38:	e7fd      	b.n	8006a36 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a3a:	f001 fa6d 	bl	8007f18 <xTaskGetSchedulerState>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d102      	bne.n	8006a4a <xQueueReceive+0x72>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <xQueueReceive+0x76>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e000      	b.n	8006a50 <xQueueReceive+0x78>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10b      	bne.n	8006a6c <xQueueReceive+0x94>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	61bb      	str	r3, [r7, #24]
}
 8006a66:	bf00      	nop
 8006a68:	bf00      	nop
 8006a6a:	e7fd      	b.n	8006a68 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a6c:	f002 f8c4 	bl	8008bf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a74:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01f      	beq.n	8006abc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a80:	f000 fac4 	bl	800700c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	1e5a      	subs	r2, r3, #1
 8006a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00f      	beq.n	8006ab4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a96:	3310      	adds	r3, #16
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f001 f877 	bl	8007b8c <xTaskRemoveFromEventList>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d007      	beq.n	8006ab4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006aa4:	4b3c      	ldr	r3, [pc, #240]	@ (8006b98 <xQueueReceive+0x1c0>)
 8006aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ab4:	f002 f8d2 	bl	8008c5c <vPortExitCritical>
				return pdPASS;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e069      	b.n	8006b90 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d103      	bne.n	8006aca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ac2:	f002 f8cb 	bl	8008c5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	e062      	b.n	8006b90 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d106      	bne.n	8006ade <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ad0:	f107 0310 	add.w	r3, r7, #16
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f001 f8bd 	bl	8007c54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ada:	2301      	movs	r3, #1
 8006adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ade:	f002 f8bd 	bl	8008c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ae2:	f000 fe25 	bl	8007730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ae6:	f002 f887 	bl	8008bf8 <vPortEnterCritical>
 8006aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006af0:	b25b      	sxtb	r3, r3
 8006af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af6:	d103      	bne.n	8006b00 <xQueueReceive+0x128>
 8006af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b06:	b25b      	sxtb	r3, r3
 8006b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0c:	d103      	bne.n	8006b16 <xQueueReceive+0x13e>
 8006b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b16:	f002 f8a1 	bl	8008c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b1a:	1d3a      	adds	r2, r7, #4
 8006b1c:	f107 0310 	add.w	r3, r7, #16
 8006b20:	4611      	mov	r1, r2
 8006b22:	4618      	mov	r0, r3
 8006b24:	f001 f8ac 	bl	8007c80 <xTaskCheckForTimeOut>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d123      	bne.n	8006b76 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b30:	f000 fae4 	bl	80070fc <prvIsQueueEmpty>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d017      	beq.n	8006b6a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3c:	3324      	adds	r3, #36	@ 0x24
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	4611      	mov	r1, r2
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 ffd0 	bl	8007ae8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b4a:	f000 fa85 	bl	8007058 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b4e:	f000 fdfd 	bl	800774c <xTaskResumeAll>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d189      	bne.n	8006a6c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006b58:	4b0f      	ldr	r3, [pc, #60]	@ (8006b98 <xQueueReceive+0x1c0>)
 8006b5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	e780      	b.n	8006a6c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b6c:	f000 fa74 	bl	8007058 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b70:	f000 fdec 	bl	800774c <xTaskResumeAll>
 8006b74:	e77a      	b.n	8006a6c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b78:	f000 fa6e 	bl	8007058 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b7c:	f000 fde6 	bl	800774c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b82:	f000 fabb 	bl	80070fc <prvIsQueueEmpty>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f43f af6f 	beq.w	8006a6c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3730      	adds	r7, #48	@ 0x30
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	e000ed04 	.word	0xe000ed04

08006b9c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b08e      	sub	sp, #56	@ 0x38
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10b      	bne.n	8006bd0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	623b      	str	r3, [r7, #32]
}
 8006bca:	bf00      	nop
 8006bcc:	bf00      	nop
 8006bce:	e7fd      	b.n	8006bcc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00b      	beq.n	8006bf0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	61fb      	str	r3, [r7, #28]
}
 8006bea:	bf00      	nop
 8006bec:	bf00      	nop
 8006bee:	e7fd      	b.n	8006bec <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bf0:	f001 f992 	bl	8007f18 <xTaskGetSchedulerState>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d102      	bne.n	8006c00 <xQueueSemaphoreTake+0x64>
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <xQueueSemaphoreTake+0x68>
 8006c00:	2301      	movs	r3, #1
 8006c02:	e000      	b.n	8006c06 <xQueueSemaphoreTake+0x6a>
 8006c04:	2300      	movs	r3, #0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10b      	bne.n	8006c22 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	61bb      	str	r3, [r7, #24]
}
 8006c1c:	bf00      	nop
 8006c1e:	bf00      	nop
 8006c20:	e7fd      	b.n	8006c1e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c22:	f001 ffe9 	bl	8008bf8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c2a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d024      	beq.n	8006c7c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c34:	1e5a      	subs	r2, r3, #1
 8006c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c38:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d104      	bne.n	8006c4c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006c42:	f001 fae3 	bl	800820c <pvTaskIncrementMutexHeldCount>
 8006c46:	4602      	mov	r2, r0
 8006c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c4a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00f      	beq.n	8006c74 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c56:	3310      	adds	r3, #16
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 ff97 	bl	8007b8c <xTaskRemoveFromEventList>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d007      	beq.n	8006c74 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c64:	4b54      	ldr	r3, [pc, #336]	@ (8006db8 <xQueueSemaphoreTake+0x21c>)
 8006c66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c74:	f001 fff2 	bl	8008c5c <vPortExitCritical>
				return pdPASS;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e098      	b.n	8006dae <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d112      	bne.n	8006ca8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00b      	beq.n	8006ca0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	617b      	str	r3, [r7, #20]
}
 8006c9a:	bf00      	nop
 8006c9c:	bf00      	nop
 8006c9e:	e7fd      	b.n	8006c9c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006ca0:	f001 ffdc 	bl	8008c5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e082      	b.n	8006dae <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d106      	bne.n	8006cbc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cae:	f107 030c 	add.w	r3, r7, #12
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 ffce 	bl	8007c54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cbc:	f001 ffce 	bl	8008c5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cc0:	f000 fd36 	bl	8007730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cc4:	f001 ff98 	bl	8008bf8 <vPortEnterCritical>
 8006cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cce:	b25b      	sxtb	r3, r3
 8006cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd4:	d103      	bne.n	8006cde <xQueueSemaphoreTake+0x142>
 8006cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ce4:	b25b      	sxtb	r3, r3
 8006ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cea:	d103      	bne.n	8006cf4 <xQueueSemaphoreTake+0x158>
 8006cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cf4:	f001 ffb2 	bl	8008c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cf8:	463a      	mov	r2, r7
 8006cfa:	f107 030c 	add.w	r3, r7, #12
 8006cfe:	4611      	mov	r1, r2
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 ffbd 	bl	8007c80 <xTaskCheckForTimeOut>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d132      	bne.n	8006d72 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d0e:	f000 f9f5 	bl	80070fc <prvIsQueueEmpty>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d026      	beq.n	8006d66 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d109      	bne.n	8006d34 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006d20:	f001 ff6a 	bl	8008bf8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f001 f913 	bl	8007f54 <xTaskPriorityInherit>
 8006d2e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006d30:	f001 ff94 	bl	8008c5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d36:	3324      	adds	r3, #36	@ 0x24
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 fed3 	bl	8007ae8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d44:	f000 f988 	bl	8007058 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d48:	f000 fd00 	bl	800774c <xTaskResumeAll>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f47f af67 	bne.w	8006c22 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006d54:	4b18      	ldr	r3, [pc, #96]	@ (8006db8 <xQueueSemaphoreTake+0x21c>)
 8006d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	e75d      	b.n	8006c22 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006d66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d68:	f000 f976 	bl	8007058 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d6c:	f000 fcee 	bl	800774c <xTaskResumeAll>
 8006d70:	e757      	b.n	8006c22 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006d72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d74:	f000 f970 	bl	8007058 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d78:	f000 fce8 	bl	800774c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d7e:	f000 f9bd 	bl	80070fc <prvIsQueueEmpty>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f43f af4c 	beq.w	8006c22 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00d      	beq.n	8006dac <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006d90:	f001 ff32 	bl	8008bf8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d96:	f000 f8b7 	bl	8006f08 <prvGetDisinheritPriorityAfterTimeout>
 8006d9a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006da2:	4618      	mov	r0, r3
 8006da4:	f001 f9ae 	bl	8008104 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006da8:	f001 ff58 	bl	8008c5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006dac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3738      	adds	r7, #56	@ 0x38
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	e000ed04 	.word	0xe000ed04

08006dbc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08e      	sub	sp, #56	@ 0x38
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10b      	bne.n	8006dea <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	623b      	str	r3, [r7, #32]
}
 8006de4:	bf00      	nop
 8006de6:	bf00      	nop
 8006de8:	e7fd      	b.n	8006de6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d103      	bne.n	8006df8 <xQueueReceiveFromISR+0x3c>
 8006df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <xQueueReceiveFromISR+0x40>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e000      	b.n	8006dfe <xQueueReceiveFromISR+0x42>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10b      	bne.n	8006e1a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	61fb      	str	r3, [r7, #28]
}
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop
 8006e18:	e7fd      	b.n	8006e16 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e1a:	f001 ffcd 	bl	8008db8 <vPortValidateInterruptPriority>
	__asm volatile
 8006e1e:	f3ef 8211 	mrs	r2, BASEPRI
 8006e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	61ba      	str	r2, [r7, #24]
 8006e34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006e36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e3e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d02f      	beq.n	8006ea6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e50:	68b9      	ldr	r1, [r7, #8]
 8006e52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e54:	f000 f8da 	bl	800700c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e5a:	1e5a      	subs	r2, r3, #1
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006e60:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e68:	d112      	bne.n	8006e90 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d016      	beq.n	8006ea0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e74:	3310      	adds	r3, #16
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fe88 	bl	8007b8c <xTaskRemoveFromEventList>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00e      	beq.n	8006ea0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00b      	beq.n	8006ea0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	e007      	b.n	8006ea0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006e90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e94:	3301      	adds	r3, #1
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	b25a      	sxtb	r2, r3
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ea4:	e001      	b.n	8006eaa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eac:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f383 8811 	msr	BASEPRI, r3
}
 8006eb4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3738      	adds	r7, #56	@ 0x38
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10b      	bne.n	8006eea <vQueueDelete+0x2a>
	__asm volatile
 8006ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	60bb      	str	r3, [r7, #8]
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
 8006ee8:	e7fd      	b.n	8006ee6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f000 f95e 	bl	80071ac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d102      	bne.n	8006f00 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f002 f86c 	bl	8008fd8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006f00:	bf00      	nop
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d006      	beq.n	8006f26 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	e001      	b.n	8006f2a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
	}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f44:	2300      	movs	r3, #0
 8006f46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10d      	bne.n	8006f72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d14d      	bne.n	8006ffa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f001 f85e 	bl	8008024 <xTaskPriorityDisinherit>
 8006f68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	609a      	str	r2, [r3, #8]
 8006f70:	e043      	b.n	8006ffa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d119      	bne.n	8006fac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6858      	ldr	r0, [r3, #4]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f80:	461a      	mov	r2, r3
 8006f82:	68b9      	ldr	r1, [r7, #8]
 8006f84:	f002 fa06 	bl	8009394 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f90:	441a      	add	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d32b      	bcc.n	8006ffa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	605a      	str	r2, [r3, #4]
 8006faa:	e026      	b.n	8006ffa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	68d8      	ldr	r0, [r3, #12]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	68b9      	ldr	r1, [r7, #8]
 8006fb8:	f002 f9ec 	bl	8009394 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc4:	425b      	negs	r3, r3
 8006fc6:	441a      	add	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d207      	bcs.n	8006fe8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	689a      	ldr	r2, [r3, #8]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe0:	425b      	negs	r3, r3
 8006fe2:	441a      	add	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d105      	bne.n	8006ffa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	1c5a      	adds	r2, r3, #1
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007002:	697b      	ldr	r3, [r7, #20]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701a:	2b00      	cmp	r3, #0
 800701c:	d018      	beq.n	8007050 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007026:	441a      	add	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68da      	ldr	r2, [r3, #12]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	429a      	cmp	r2, r3
 8007036:	d303      	bcc.n	8007040 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68d9      	ldr	r1, [r3, #12]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007048:	461a      	mov	r2, r3
 800704a:	6838      	ldr	r0, [r7, #0]
 800704c:	f002 f9a2 	bl	8009394 <memcpy>
	}
}
 8007050:	bf00      	nop
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007060:	f001 fdca 	bl	8008bf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800706a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800706c:	e011      	b.n	8007092 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007072:	2b00      	cmp	r3, #0
 8007074:	d012      	beq.n	800709c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	3324      	adds	r3, #36	@ 0x24
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fd86 	bl	8007b8c <xTaskRemoveFromEventList>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007086:	f000 fe5f 	bl	8007d48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	3b01      	subs	r3, #1
 800708e:	b2db      	uxtb	r3, r3
 8007090:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007096:	2b00      	cmp	r3, #0
 8007098:	dce9      	bgt.n	800706e <prvUnlockQueue+0x16>
 800709a:	e000      	b.n	800709e <prvUnlockQueue+0x46>
					break;
 800709c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	22ff      	movs	r2, #255	@ 0xff
 80070a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80070a6:	f001 fdd9 	bl	8008c5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80070aa:	f001 fda5 	bl	8008bf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070b6:	e011      	b.n	80070dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d012      	beq.n	80070e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	3310      	adds	r3, #16
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 fd61 	bl	8007b8c <xTaskRemoveFromEventList>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80070d0:	f000 fe3a 	bl	8007d48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80070d4:	7bbb      	ldrb	r3, [r7, #14]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	dce9      	bgt.n	80070b8 <prvUnlockQueue+0x60>
 80070e4:	e000      	b.n	80070e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80070e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	22ff      	movs	r2, #255	@ 0xff
 80070ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80070f0:	f001 fdb4 	bl	8008c5c <vPortExitCritical>
}
 80070f4:	bf00      	nop
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007104:	f001 fd78 	bl	8008bf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710c:	2b00      	cmp	r3, #0
 800710e:	d102      	bne.n	8007116 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007110:	2301      	movs	r3, #1
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	e001      	b.n	800711a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800711a:	f001 fd9f 	bl	8008c5c <vPortExitCritical>

	return xReturn;
 800711e:	68fb      	ldr	r3, [r7, #12]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007130:	f001 fd62 	bl	8008bf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800713c:	429a      	cmp	r2, r3
 800713e:	d102      	bne.n	8007146 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007140:	2301      	movs	r3, #1
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	e001      	b.n	800714a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007146:	2300      	movs	r3, #0
 8007148:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800714a:	f001 fd87 	bl	8008c5c <vPortExitCritical>

	return xReturn;
 800714e:	68fb      	ldr	r3, [r7, #12]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007162:	2300      	movs	r3, #0
 8007164:	60fb      	str	r3, [r7, #12]
 8007166:	e014      	b.n	8007192 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007168:	4a0f      	ldr	r2, [pc, #60]	@ (80071a8 <vQueueAddToRegistry+0x50>)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10b      	bne.n	800718c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007174:	490c      	ldr	r1, [pc, #48]	@ (80071a8 <vQueueAddToRegistry+0x50>)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800717e:	4a0a      	ldr	r2, [pc, #40]	@ (80071a8 <vQueueAddToRegistry+0x50>)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	00db      	lsls	r3, r3, #3
 8007184:	4413      	add	r3, r2
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800718a:	e006      	b.n	800719a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3301      	adds	r3, #1
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2b07      	cmp	r3, #7
 8007196:	d9e7      	bls.n	8007168 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007198:	bf00      	nop
 800719a:	bf00      	nop
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	2000132c 	.word	0x2000132c

080071ac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071b4:	2300      	movs	r3, #0
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	e016      	b.n	80071e8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80071ba:	4a10      	ldr	r2, [pc, #64]	@ (80071fc <vQueueUnregisterQueue+0x50>)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	4413      	add	r3, r2
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d10b      	bne.n	80071e2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80071ca:	4a0c      	ldr	r2, [pc, #48]	@ (80071fc <vQueueUnregisterQueue+0x50>)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2100      	movs	r1, #0
 80071d0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80071d4:	4a09      	ldr	r2, [pc, #36]	@ (80071fc <vQueueUnregisterQueue+0x50>)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	4413      	add	r3, r2
 80071dc:	2200      	movs	r2, #0
 80071de:	605a      	str	r2, [r3, #4]
				break;
 80071e0:	e006      	b.n	80071f0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3301      	adds	r3, #1
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2b07      	cmp	r3, #7
 80071ec:	d9e5      	bls.n	80071ba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80071ee:	bf00      	nop
 80071f0:	bf00      	nop
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	2000132c 	.word	0x2000132c

08007200 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007210:	f001 fcf2 	bl	8008bf8 <vPortEnterCritical>
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800721a:	b25b      	sxtb	r3, r3
 800721c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007220:	d103      	bne.n	800722a <vQueueWaitForMessageRestricted+0x2a>
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007230:	b25b      	sxtb	r3, r3
 8007232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007236:	d103      	bne.n	8007240 <vQueueWaitForMessageRestricted+0x40>
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007240:	f001 fd0c 	bl	8008c5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007248:	2b00      	cmp	r3, #0
 800724a:	d106      	bne.n	800725a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	3324      	adds	r3, #36	@ 0x24
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	68b9      	ldr	r1, [r7, #8]
 8007254:	4618      	mov	r0, r3
 8007256:	f000 fc6d 	bl	8007b34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800725a:	6978      	ldr	r0, [r7, #20]
 800725c:	f7ff fefc 	bl	8007058 <prvUnlockQueue>
	}
 8007260:	bf00      	nop
 8007262:	3718      	adds	r7, #24
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08e      	sub	sp, #56	@ 0x38
 800726c:	af04      	add	r7, sp, #16
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
 8007274:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10b      	bne.n	8007294 <xTaskCreateStatic+0x2c>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	623b      	str	r3, [r7, #32]
}
 800728e:	bf00      	nop
 8007290:	bf00      	nop
 8007292:	e7fd      	b.n	8007290 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10b      	bne.n	80072b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800729a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	61fb      	str	r3, [r7, #28]
}
 80072ac:	bf00      	nop
 80072ae:	bf00      	nop
 80072b0:	e7fd      	b.n	80072ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80072b2:	23a8      	movs	r3, #168	@ 0xa8
 80072b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	2ba8      	cmp	r3, #168	@ 0xa8
 80072ba:	d00b      	beq.n	80072d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	61bb      	str	r3, [r7, #24]
}
 80072ce:	bf00      	nop
 80072d0:	bf00      	nop
 80072d2:	e7fd      	b.n	80072d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80072d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80072d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01e      	beq.n	800731a <xTaskCreateStatic+0xb2>
 80072dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d01b      	beq.n	800731a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80072e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80072ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ee:	2202      	movs	r2, #2
 80072f0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80072f4:	2300      	movs	r3, #0
 80072f6:	9303      	str	r3, [sp, #12]
 80072f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fa:	9302      	str	r3, [sp, #8]
 80072fc:	f107 0314 	add.w	r3, r7, #20
 8007300:	9301      	str	r3, [sp, #4]
 8007302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	68b9      	ldr	r1, [r7, #8]
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 f851 	bl	80073b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007312:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007314:	f000 f8f6 	bl	8007504 <prvAddNewTaskToReadyList>
 8007318:	e001      	b.n	800731e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800731a:	2300      	movs	r3, #0
 800731c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800731e:	697b      	ldr	r3, [r7, #20]
	}
 8007320:	4618      	mov	r0, r3
 8007322:	3728      	adds	r7, #40	@ 0x28
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007328:	b580      	push	{r7, lr}
 800732a:	b08c      	sub	sp, #48	@ 0x30
 800732c:	af04      	add	r7, sp, #16
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	603b      	str	r3, [r7, #0]
 8007334:	4613      	mov	r3, r2
 8007336:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007338:	88fb      	ldrh	r3, [r7, #6]
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4618      	mov	r0, r3
 800733e:	f001 fd7d 	bl	8008e3c <pvPortMalloc>
 8007342:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00e      	beq.n	8007368 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800734a:	20a8      	movs	r0, #168	@ 0xa8
 800734c:	f001 fd76 	bl	8008e3c <pvPortMalloc>
 8007350:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	631a      	str	r2, [r3, #48]	@ 0x30
 800735e:	e005      	b.n	800736c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007360:	6978      	ldr	r0, [r7, #20]
 8007362:	f001 fe39 	bl	8008fd8 <vPortFree>
 8007366:	e001      	b.n	800736c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007368:	2300      	movs	r3, #0
 800736a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d017      	beq.n	80073a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800737a:	88fa      	ldrh	r2, [r7, #6]
 800737c:	2300      	movs	r3, #0
 800737e:	9303      	str	r3, [sp, #12]
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	9302      	str	r3, [sp, #8]
 8007384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007386:	9301      	str	r3, [sp, #4]
 8007388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	68b9      	ldr	r1, [r7, #8]
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 f80f 	bl	80073b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007396:	69f8      	ldr	r0, [r7, #28]
 8007398:	f000 f8b4 	bl	8007504 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800739c:	2301      	movs	r3, #1
 800739e:	61bb      	str	r3, [r7, #24]
 80073a0:	e002      	b.n	80073a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073a2:	f04f 33ff 	mov.w	r3, #4294967295
 80073a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073a8:	69bb      	ldr	r3, [r7, #24]
	}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3720      	adds	r7, #32
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
	...

080073b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b088      	sub	sp, #32
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
 80073c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80073c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	461a      	mov	r2, r3
 80073cc:	21a5      	movs	r1, #165	@ 0xa5
 80073ce:	f001 ff57 	bl	8009280 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80073d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80073dc:	3b01      	subs	r3, #1
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	f023 0307 	bic.w	r3, r3, #7
 80073ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	f003 0307 	and.w	r3, r3, #7
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00b      	beq.n	800740e <prvInitialiseNewTask+0x5a>
	__asm volatile
 80073f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fa:	f383 8811 	msr	BASEPRI, r3
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f3bf 8f4f 	dsb	sy
 8007406:	617b      	str	r3, [r7, #20]
}
 8007408:	bf00      	nop
 800740a:	bf00      	nop
 800740c:	e7fd      	b.n	800740a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d01f      	beq.n	8007454 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007414:	2300      	movs	r3, #0
 8007416:	61fb      	str	r3, [r7, #28]
 8007418:	e012      	b.n	8007440 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	4413      	add	r3, r2
 8007420:	7819      	ldrb	r1, [r3, #0]
 8007422:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	4413      	add	r3, r2
 8007428:	3334      	adds	r3, #52	@ 0x34
 800742a:	460a      	mov	r2, r1
 800742c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	4413      	add	r3, r2
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d006      	beq.n	8007448 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	3301      	adds	r3, #1
 800743e:	61fb      	str	r3, [r7, #28]
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	2b0f      	cmp	r3, #15
 8007444:	d9e9      	bls.n	800741a <prvInitialiseNewTask+0x66>
 8007446:	e000      	b.n	800744a <prvInitialiseNewTask+0x96>
			{
				break;
 8007448:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800744a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007452:	e003      	b.n	800745c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800745c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800745e:	2b37      	cmp	r3, #55	@ 0x37
 8007460:	d901      	bls.n	8007466 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007462:	2337      	movs	r3, #55	@ 0x37
 8007464:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007468:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800746a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800746c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007470:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007474:	2200      	movs	r2, #0
 8007476:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747a:	3304      	adds	r3, #4
 800747c:	4618      	mov	r0, r3
 800747e:	f7fe fe33 	bl	80060e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007484:	3318      	adds	r3, #24
 8007486:	4618      	mov	r0, r3
 8007488:	f7fe fe2e 	bl	80060e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800748c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007490:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007494:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800749c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80074a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a4:	2200      	movs	r2, #0
 80074a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80074b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b4:	3354      	adds	r3, #84	@ 0x54
 80074b6:	224c      	movs	r2, #76	@ 0x4c
 80074b8:	2100      	movs	r1, #0
 80074ba:	4618      	mov	r0, r3
 80074bc:	f001 fee0 	bl	8009280 <memset>
 80074c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c2:	4a0d      	ldr	r2, [pc, #52]	@ (80074f8 <prvInitialiseNewTask+0x144>)
 80074c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80074c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c8:	4a0c      	ldr	r2, [pc, #48]	@ (80074fc <prvInitialiseNewTask+0x148>)
 80074ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80074cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ce:	4a0c      	ldr	r2, [pc, #48]	@ (8007500 <prvInitialiseNewTask+0x14c>)
 80074d0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	68f9      	ldr	r1, [r7, #12]
 80074d6:	69b8      	ldr	r0, [r7, #24]
 80074d8:	f001 fa5a 	bl	8008990 <pxPortInitialiseStack>
 80074dc:	4602      	mov	r2, r0
 80074de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80074e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074ee:	bf00      	nop
 80074f0:	3720      	adds	r7, #32
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	200055c0 	.word	0x200055c0
 80074fc:	20005628 	.word	0x20005628
 8007500:	20005690 	.word	0x20005690

08007504 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800750c:	f001 fb74 	bl	8008bf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007510:	4b2d      	ldr	r3, [pc, #180]	@ (80075c8 <prvAddNewTaskToReadyList+0xc4>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3301      	adds	r3, #1
 8007516:	4a2c      	ldr	r2, [pc, #176]	@ (80075c8 <prvAddNewTaskToReadyList+0xc4>)
 8007518:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800751a:	4b2c      	ldr	r3, [pc, #176]	@ (80075cc <prvAddNewTaskToReadyList+0xc8>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d109      	bne.n	8007536 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007522:	4a2a      	ldr	r2, [pc, #168]	@ (80075cc <prvAddNewTaskToReadyList+0xc8>)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007528:	4b27      	ldr	r3, [pc, #156]	@ (80075c8 <prvAddNewTaskToReadyList+0xc4>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d110      	bne.n	8007552 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007530:	f000 fc2e 	bl	8007d90 <prvInitialiseTaskLists>
 8007534:	e00d      	b.n	8007552 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007536:	4b26      	ldr	r3, [pc, #152]	@ (80075d0 <prvAddNewTaskToReadyList+0xcc>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d109      	bne.n	8007552 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800753e:	4b23      	ldr	r3, [pc, #140]	@ (80075cc <prvAddNewTaskToReadyList+0xc8>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007548:	429a      	cmp	r2, r3
 800754a:	d802      	bhi.n	8007552 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800754c:	4a1f      	ldr	r2, [pc, #124]	@ (80075cc <prvAddNewTaskToReadyList+0xc8>)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007552:	4b20      	ldr	r3, [pc, #128]	@ (80075d4 <prvAddNewTaskToReadyList+0xd0>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3301      	adds	r3, #1
 8007558:	4a1e      	ldr	r2, [pc, #120]	@ (80075d4 <prvAddNewTaskToReadyList+0xd0>)
 800755a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800755c:	4b1d      	ldr	r3, [pc, #116]	@ (80075d4 <prvAddNewTaskToReadyList+0xd0>)
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007568:	4b1b      	ldr	r3, [pc, #108]	@ (80075d8 <prvAddNewTaskToReadyList+0xd4>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	429a      	cmp	r2, r3
 800756e:	d903      	bls.n	8007578 <prvAddNewTaskToReadyList+0x74>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007574:	4a18      	ldr	r2, [pc, #96]	@ (80075d8 <prvAddNewTaskToReadyList+0xd4>)
 8007576:	6013      	str	r3, [r2, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800757c:	4613      	mov	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4413      	add	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4a15      	ldr	r2, [pc, #84]	@ (80075dc <prvAddNewTaskToReadyList+0xd8>)
 8007586:	441a      	add	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3304      	adds	r3, #4
 800758c:	4619      	mov	r1, r3
 800758e:	4610      	mov	r0, r2
 8007590:	f7fe fdb7 	bl	8006102 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007594:	f001 fb62 	bl	8008c5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007598:	4b0d      	ldr	r3, [pc, #52]	@ (80075d0 <prvAddNewTaskToReadyList+0xcc>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00e      	beq.n	80075be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075a0:	4b0a      	ldr	r3, [pc, #40]	@ (80075cc <prvAddNewTaskToReadyList+0xc8>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d207      	bcs.n	80075be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075ae:	4b0c      	ldr	r3, [pc, #48]	@ (80075e0 <prvAddNewTaskToReadyList+0xdc>)
 80075b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075be:	bf00      	nop
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20001840 	.word	0x20001840
 80075cc:	2000136c 	.word	0x2000136c
 80075d0:	2000184c 	.word	0x2000184c
 80075d4:	2000185c 	.word	0x2000185c
 80075d8:	20001848 	.word	0x20001848
 80075dc:	20001370 	.word	0x20001370
 80075e0:	e000ed04 	.word	0xe000ed04

080075e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075ec:	2300      	movs	r3, #0
 80075ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d018      	beq.n	8007628 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075f6:	4b14      	ldr	r3, [pc, #80]	@ (8007648 <vTaskDelay+0x64>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00b      	beq.n	8007616 <vTaskDelay+0x32>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	60bb      	str	r3, [r7, #8]
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	e7fd      	b.n	8007612 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007616:	f000 f88b 	bl	8007730 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800761a:	2100      	movs	r1, #0
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fe09 	bl	8008234 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007622:	f000 f893 	bl	800774c <xTaskResumeAll>
 8007626:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d107      	bne.n	800763e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800762e:	4b07      	ldr	r3, [pc, #28]	@ (800764c <vTaskDelay+0x68>)
 8007630:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800763e:	bf00      	nop
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20001868 	.word	0x20001868
 800764c:	e000ed04 	.word	0xe000ed04

08007650 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08a      	sub	sp, #40	@ 0x28
 8007654:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007656:	2300      	movs	r3, #0
 8007658:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800765a:	2300      	movs	r3, #0
 800765c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800765e:	463a      	mov	r2, r7
 8007660:	1d39      	adds	r1, r7, #4
 8007662:	f107 0308 	add.w	r3, r7, #8
 8007666:	4618      	mov	r0, r3
 8007668:	f7fe fcea 	bl	8006040 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	9202      	str	r2, [sp, #8]
 8007674:	9301      	str	r3, [sp, #4]
 8007676:	2300      	movs	r3, #0
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	2300      	movs	r3, #0
 800767c:	460a      	mov	r2, r1
 800767e:	4924      	ldr	r1, [pc, #144]	@ (8007710 <vTaskStartScheduler+0xc0>)
 8007680:	4824      	ldr	r0, [pc, #144]	@ (8007714 <vTaskStartScheduler+0xc4>)
 8007682:	f7ff fdf1 	bl	8007268 <xTaskCreateStatic>
 8007686:	4603      	mov	r3, r0
 8007688:	4a23      	ldr	r2, [pc, #140]	@ (8007718 <vTaskStartScheduler+0xc8>)
 800768a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800768c:	4b22      	ldr	r3, [pc, #136]	@ (8007718 <vTaskStartScheduler+0xc8>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007694:	2301      	movs	r3, #1
 8007696:	617b      	str	r3, [r7, #20]
 8007698:	e001      	b.n	800769e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800769a:	2300      	movs	r3, #0
 800769c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d102      	bne.n	80076aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80076a4:	f000 fe1a 	bl	80082dc <xTimerCreateTimerTask>
 80076a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d11b      	bne.n	80076e8 <vTaskStartScheduler+0x98>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	613b      	str	r3, [r7, #16]
}
 80076c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076c4:	4b15      	ldr	r3, [pc, #84]	@ (800771c <vTaskStartScheduler+0xcc>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3354      	adds	r3, #84	@ 0x54
 80076ca:	4a15      	ldr	r2, [pc, #84]	@ (8007720 <vTaskStartScheduler+0xd0>)
 80076cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076ce:	4b15      	ldr	r3, [pc, #84]	@ (8007724 <vTaskStartScheduler+0xd4>)
 80076d0:	f04f 32ff 	mov.w	r2, #4294967295
 80076d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076d6:	4b14      	ldr	r3, [pc, #80]	@ (8007728 <vTaskStartScheduler+0xd8>)
 80076d8:	2201      	movs	r2, #1
 80076da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80076dc:	4b13      	ldr	r3, [pc, #76]	@ (800772c <vTaskStartScheduler+0xdc>)
 80076de:	2200      	movs	r2, #0
 80076e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076e2:	f001 f9e5 	bl	8008ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076e6:	e00f      	b.n	8007708 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ee:	d10b      	bne.n	8007708 <vTaskStartScheduler+0xb8>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	60fb      	str	r3, [r7, #12]
}
 8007702:	bf00      	nop
 8007704:	bf00      	nop
 8007706:	e7fd      	b.n	8007704 <vTaskStartScheduler+0xb4>
}
 8007708:	bf00      	nop
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	0800adf8 	.word	0x0800adf8
 8007714:	08007d61 	.word	0x08007d61
 8007718:	20001864 	.word	0x20001864
 800771c:	2000136c 	.word	0x2000136c
 8007720:	20000024 	.word	0x20000024
 8007724:	20001860 	.word	0x20001860
 8007728:	2000184c 	.word	0x2000184c
 800772c:	20001844 	.word	0x20001844

08007730 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007730:	b480      	push	{r7}
 8007732:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007734:	4b04      	ldr	r3, [pc, #16]	@ (8007748 <vTaskSuspendAll+0x18>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	3301      	adds	r3, #1
 800773a:	4a03      	ldr	r2, [pc, #12]	@ (8007748 <vTaskSuspendAll+0x18>)
 800773c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800773e:	bf00      	nop
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	20001868 	.word	0x20001868

0800774c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007752:	2300      	movs	r3, #0
 8007754:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007756:	2300      	movs	r3, #0
 8007758:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800775a:	4b42      	ldr	r3, [pc, #264]	@ (8007864 <xTaskResumeAll+0x118>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10b      	bne.n	800777a <xTaskResumeAll+0x2e>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	603b      	str	r3, [r7, #0]
}
 8007774:	bf00      	nop
 8007776:	bf00      	nop
 8007778:	e7fd      	b.n	8007776 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800777a:	f001 fa3d 	bl	8008bf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800777e:	4b39      	ldr	r3, [pc, #228]	@ (8007864 <xTaskResumeAll+0x118>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	3b01      	subs	r3, #1
 8007784:	4a37      	ldr	r2, [pc, #220]	@ (8007864 <xTaskResumeAll+0x118>)
 8007786:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007788:	4b36      	ldr	r3, [pc, #216]	@ (8007864 <xTaskResumeAll+0x118>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d162      	bne.n	8007856 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007790:	4b35      	ldr	r3, [pc, #212]	@ (8007868 <xTaskResumeAll+0x11c>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d05e      	beq.n	8007856 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007798:	e02f      	b.n	80077fa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800779a:	4b34      	ldr	r3, [pc, #208]	@ (800786c <xTaskResumeAll+0x120>)
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3318      	adds	r3, #24
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fe fd08 	bl	80061bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3304      	adds	r3, #4
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fe fd03 	bl	80061bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ba:	4b2d      	ldr	r3, [pc, #180]	@ (8007870 <xTaskResumeAll+0x124>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d903      	bls.n	80077ca <xTaskResumeAll+0x7e>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c6:	4a2a      	ldr	r2, [pc, #168]	@ (8007870 <xTaskResumeAll+0x124>)
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ce:	4613      	mov	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4413      	add	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4a27      	ldr	r2, [pc, #156]	@ (8007874 <xTaskResumeAll+0x128>)
 80077d8:	441a      	add	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3304      	adds	r3, #4
 80077de:	4619      	mov	r1, r3
 80077e0:	4610      	mov	r0, r2
 80077e2:	f7fe fc8e 	bl	8006102 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ea:	4b23      	ldr	r3, [pc, #140]	@ (8007878 <xTaskResumeAll+0x12c>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d302      	bcc.n	80077fa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80077f4:	4b21      	ldr	r3, [pc, #132]	@ (800787c <xTaskResumeAll+0x130>)
 80077f6:	2201      	movs	r2, #1
 80077f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077fa:	4b1c      	ldr	r3, [pc, #112]	@ (800786c <xTaskResumeAll+0x120>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1cb      	bne.n	800779a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007808:	f000 fb66 	bl	8007ed8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800780c:	4b1c      	ldr	r3, [pc, #112]	@ (8007880 <xTaskResumeAll+0x134>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d010      	beq.n	800783a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007818:	f000 f846 	bl	80078a8 <xTaskIncrementTick>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d002      	beq.n	8007828 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007822:	4b16      	ldr	r3, [pc, #88]	@ (800787c <xTaskResumeAll+0x130>)
 8007824:	2201      	movs	r2, #1
 8007826:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3b01      	subs	r3, #1
 800782c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1f1      	bne.n	8007818 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007834:	4b12      	ldr	r3, [pc, #72]	@ (8007880 <xTaskResumeAll+0x134>)
 8007836:	2200      	movs	r2, #0
 8007838:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800783a:	4b10      	ldr	r3, [pc, #64]	@ (800787c <xTaskResumeAll+0x130>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d009      	beq.n	8007856 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007842:	2301      	movs	r3, #1
 8007844:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007846:	4b0f      	ldr	r3, [pc, #60]	@ (8007884 <xTaskResumeAll+0x138>)
 8007848:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007856:	f001 fa01 	bl	8008c5c <vPortExitCritical>

	return xAlreadyYielded;
 800785a:	68bb      	ldr	r3, [r7, #8]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	20001868 	.word	0x20001868
 8007868:	20001840 	.word	0x20001840
 800786c:	20001800 	.word	0x20001800
 8007870:	20001848 	.word	0x20001848
 8007874:	20001370 	.word	0x20001370
 8007878:	2000136c 	.word	0x2000136c
 800787c:	20001854 	.word	0x20001854
 8007880:	20001850 	.word	0x20001850
 8007884:	e000ed04 	.word	0xe000ed04

08007888 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800788e:	4b05      	ldr	r3, [pc, #20]	@ (80078a4 <xTaskGetTickCount+0x1c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007894:	687b      	ldr	r3, [r7, #4]
}
 8007896:	4618      	mov	r0, r3
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	20001844 	.word	0x20001844

080078a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078ae:	2300      	movs	r3, #0
 80078b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078b2:	4b4f      	ldr	r3, [pc, #316]	@ (80079f0 <xTaskIncrementTick+0x148>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f040 8090 	bne.w	80079dc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078bc:	4b4d      	ldr	r3, [pc, #308]	@ (80079f4 <xTaskIncrementTick+0x14c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3301      	adds	r3, #1
 80078c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078c4:	4a4b      	ldr	r2, [pc, #300]	@ (80079f4 <xTaskIncrementTick+0x14c>)
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d121      	bne.n	8007914 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80078d0:	4b49      	ldr	r3, [pc, #292]	@ (80079f8 <xTaskIncrementTick+0x150>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00b      	beq.n	80078f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80078da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	603b      	str	r3, [r7, #0]
}
 80078ec:	bf00      	nop
 80078ee:	bf00      	nop
 80078f0:	e7fd      	b.n	80078ee <xTaskIncrementTick+0x46>
 80078f2:	4b41      	ldr	r3, [pc, #260]	@ (80079f8 <xTaskIncrementTick+0x150>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	60fb      	str	r3, [r7, #12]
 80078f8:	4b40      	ldr	r3, [pc, #256]	@ (80079fc <xTaskIncrementTick+0x154>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a3e      	ldr	r2, [pc, #248]	@ (80079f8 <xTaskIncrementTick+0x150>)
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	4a3e      	ldr	r2, [pc, #248]	@ (80079fc <xTaskIncrementTick+0x154>)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	4b3e      	ldr	r3, [pc, #248]	@ (8007a00 <xTaskIncrementTick+0x158>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3301      	adds	r3, #1
 800790c:	4a3c      	ldr	r2, [pc, #240]	@ (8007a00 <xTaskIncrementTick+0x158>)
 800790e:	6013      	str	r3, [r2, #0]
 8007910:	f000 fae2 	bl	8007ed8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007914:	4b3b      	ldr	r3, [pc, #236]	@ (8007a04 <xTaskIncrementTick+0x15c>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	429a      	cmp	r2, r3
 800791c:	d349      	bcc.n	80079b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800791e:	4b36      	ldr	r3, [pc, #216]	@ (80079f8 <xTaskIncrementTick+0x150>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d104      	bne.n	8007932 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007928:	4b36      	ldr	r3, [pc, #216]	@ (8007a04 <xTaskIncrementTick+0x15c>)
 800792a:	f04f 32ff 	mov.w	r2, #4294967295
 800792e:	601a      	str	r2, [r3, #0]
					break;
 8007930:	e03f      	b.n	80079b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007932:	4b31      	ldr	r3, [pc, #196]	@ (80079f8 <xTaskIncrementTick+0x150>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	429a      	cmp	r2, r3
 8007948:	d203      	bcs.n	8007952 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800794a:	4a2e      	ldr	r2, [pc, #184]	@ (8007a04 <xTaskIncrementTick+0x15c>)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007950:	e02f      	b.n	80079b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	3304      	adds	r3, #4
 8007956:	4618      	mov	r0, r3
 8007958:	f7fe fc30 	bl	80061bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007960:	2b00      	cmp	r3, #0
 8007962:	d004      	beq.n	800796e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	3318      	adds	r3, #24
 8007968:	4618      	mov	r0, r3
 800796a:	f7fe fc27 	bl	80061bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007972:	4b25      	ldr	r3, [pc, #148]	@ (8007a08 <xTaskIncrementTick+0x160>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	429a      	cmp	r2, r3
 8007978:	d903      	bls.n	8007982 <xTaskIncrementTick+0xda>
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800797e:	4a22      	ldr	r2, [pc, #136]	@ (8007a08 <xTaskIncrementTick+0x160>)
 8007980:	6013      	str	r3, [r2, #0]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007986:	4613      	mov	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4a1f      	ldr	r2, [pc, #124]	@ (8007a0c <xTaskIncrementTick+0x164>)
 8007990:	441a      	add	r2, r3
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	3304      	adds	r3, #4
 8007996:	4619      	mov	r1, r3
 8007998:	4610      	mov	r0, r2
 800799a:	f7fe fbb2 	bl	8006102 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007a10 <xTaskIncrementTick+0x168>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d3b8      	bcc.n	800791e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80079ac:	2301      	movs	r3, #1
 80079ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079b0:	e7b5      	b.n	800791e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079b2:	4b17      	ldr	r3, [pc, #92]	@ (8007a10 <xTaskIncrementTick+0x168>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079b8:	4914      	ldr	r1, [pc, #80]	@ (8007a0c <xTaskIncrementTick+0x164>)
 80079ba:	4613      	mov	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	440b      	add	r3, r1
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d901      	bls.n	80079ce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80079ca:	2301      	movs	r3, #1
 80079cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80079ce:	4b11      	ldr	r3, [pc, #68]	@ (8007a14 <xTaskIncrementTick+0x16c>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d007      	beq.n	80079e6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80079d6:	2301      	movs	r3, #1
 80079d8:	617b      	str	r3, [r7, #20]
 80079da:	e004      	b.n	80079e6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80079dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007a18 <xTaskIncrementTick+0x170>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3301      	adds	r3, #1
 80079e2:	4a0d      	ldr	r2, [pc, #52]	@ (8007a18 <xTaskIncrementTick+0x170>)
 80079e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80079e6:	697b      	ldr	r3, [r7, #20]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3718      	adds	r7, #24
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	20001868 	.word	0x20001868
 80079f4:	20001844 	.word	0x20001844
 80079f8:	200017f8 	.word	0x200017f8
 80079fc:	200017fc 	.word	0x200017fc
 8007a00:	20001858 	.word	0x20001858
 8007a04:	20001860 	.word	0x20001860
 8007a08:	20001848 	.word	0x20001848
 8007a0c:	20001370 	.word	0x20001370
 8007a10:	2000136c 	.word	0x2000136c
 8007a14:	20001854 	.word	0x20001854
 8007a18:	20001850 	.word	0x20001850

08007a1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a22:	4b2b      	ldr	r3, [pc, #172]	@ (8007ad0 <vTaskSwitchContext+0xb4>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8007ad4 <vTaskSwitchContext+0xb8>)
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a30:	e047      	b.n	8007ac2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007a32:	4b28      	ldr	r3, [pc, #160]	@ (8007ad4 <vTaskSwitchContext+0xb8>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a38:	4b27      	ldr	r3, [pc, #156]	@ (8007ad8 <vTaskSwitchContext+0xbc>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	60fb      	str	r3, [r7, #12]
 8007a3e:	e011      	b.n	8007a64 <vTaskSwitchContext+0x48>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10b      	bne.n	8007a5e <vTaskSwitchContext+0x42>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	607b      	str	r3, [r7, #4]
}
 8007a58:	bf00      	nop
 8007a5a:	bf00      	nop
 8007a5c:	e7fd      	b.n	8007a5a <vTaskSwitchContext+0x3e>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	3b01      	subs	r3, #1
 8007a62:	60fb      	str	r3, [r7, #12]
 8007a64:	491d      	ldr	r1, [pc, #116]	@ (8007adc <vTaskSwitchContext+0xc0>)
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	440b      	add	r3, r1
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d0e3      	beq.n	8007a40 <vTaskSwitchContext+0x24>
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4a16      	ldr	r2, [pc, #88]	@ (8007adc <vTaskSwitchContext+0xc0>)
 8007a84:	4413      	add	r3, r2
 8007a86:	60bb      	str	r3, [r7, #8]
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	605a      	str	r2, [r3, #4]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	3308      	adds	r3, #8
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d104      	bne.n	8007aa8 <vTaskSwitchContext+0x8c>
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	605a      	str	r2, [r3, #4]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	4a0c      	ldr	r2, [pc, #48]	@ (8007ae0 <vTaskSwitchContext+0xc4>)
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	4a09      	ldr	r2, [pc, #36]	@ (8007ad8 <vTaskSwitchContext+0xbc>)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ab8:	4b09      	ldr	r3, [pc, #36]	@ (8007ae0 <vTaskSwitchContext+0xc4>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3354      	adds	r3, #84	@ 0x54
 8007abe:	4a09      	ldr	r2, [pc, #36]	@ (8007ae4 <vTaskSwitchContext+0xc8>)
 8007ac0:	6013      	str	r3, [r2, #0]
}
 8007ac2:	bf00      	nop
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	20001868 	.word	0x20001868
 8007ad4:	20001854 	.word	0x20001854
 8007ad8:	20001848 	.word	0x20001848
 8007adc:	20001370 	.word	0x20001370
 8007ae0:	2000136c 	.word	0x2000136c
 8007ae4:	20000024 	.word	0x20000024

08007ae8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d10b      	bne.n	8007b10 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007afc:	f383 8811 	msr	BASEPRI, r3
 8007b00:	f3bf 8f6f 	isb	sy
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	60fb      	str	r3, [r7, #12]
}
 8007b0a:	bf00      	nop
 8007b0c:	bf00      	nop
 8007b0e:	e7fd      	b.n	8007b0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b10:	4b07      	ldr	r3, [pc, #28]	@ (8007b30 <vTaskPlaceOnEventList+0x48>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3318      	adds	r3, #24
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7fe fb16 	bl	800614a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b1e:	2101      	movs	r1, #1
 8007b20:	6838      	ldr	r0, [r7, #0]
 8007b22:	f000 fb87 	bl	8008234 <prvAddCurrentTaskToDelayedList>
}
 8007b26:	bf00      	nop
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	2000136c 	.word	0x2000136c

08007b34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10b      	bne.n	8007b5e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4a:	f383 8811 	msr	BASEPRI, r3
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f3bf 8f4f 	dsb	sy
 8007b56:	617b      	str	r3, [r7, #20]
}
 8007b58:	bf00      	nop
 8007b5a:	bf00      	nop
 8007b5c:	e7fd      	b.n	8007b5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b88 <vTaskPlaceOnEventListRestricted+0x54>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3318      	adds	r3, #24
 8007b64:	4619      	mov	r1, r3
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f7fe facb 	bl	8006102 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007b72:	f04f 33ff 	mov.w	r3, #4294967295
 8007b76:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b78:	6879      	ldr	r1, [r7, #4]
 8007b7a:	68b8      	ldr	r0, [r7, #8]
 8007b7c:	f000 fb5a 	bl	8008234 <prvAddCurrentTaskToDelayedList>
	}
 8007b80:	bf00      	nop
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	2000136c 	.word	0x2000136c

08007b8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10b      	bne.n	8007bba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	60fb      	str	r3, [r7, #12]
}
 8007bb4:	bf00      	nop
 8007bb6:	bf00      	nop
 8007bb8:	e7fd      	b.n	8007bb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	3318      	adds	r3, #24
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fe fafc 	bl	80061bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8007c3c <xTaskRemoveFromEventList+0xb0>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d11d      	bne.n	8007c08 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7fe faf3 	bl	80061bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bda:	4b19      	ldr	r3, [pc, #100]	@ (8007c40 <xTaskRemoveFromEventList+0xb4>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d903      	bls.n	8007bea <xTaskRemoveFromEventList+0x5e>
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be6:	4a16      	ldr	r2, [pc, #88]	@ (8007c40 <xTaskRemoveFromEventList+0xb4>)
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bee:	4613      	mov	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4a13      	ldr	r2, [pc, #76]	@ (8007c44 <xTaskRemoveFromEventList+0xb8>)
 8007bf8:	441a      	add	r2, r3
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	4619      	mov	r1, r3
 8007c00:	4610      	mov	r0, r2
 8007c02:	f7fe fa7e 	bl	8006102 <vListInsertEnd>
 8007c06:	e005      	b.n	8007c14 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	3318      	adds	r3, #24
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	480e      	ldr	r0, [pc, #56]	@ (8007c48 <xTaskRemoveFromEventList+0xbc>)
 8007c10:	f7fe fa77 	bl	8006102 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c18:	4b0c      	ldr	r3, [pc, #48]	@ (8007c4c <xTaskRemoveFromEventList+0xc0>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d905      	bls.n	8007c2e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c22:	2301      	movs	r3, #1
 8007c24:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c26:	4b0a      	ldr	r3, [pc, #40]	@ (8007c50 <xTaskRemoveFromEventList+0xc4>)
 8007c28:	2201      	movs	r2, #1
 8007c2a:	601a      	str	r2, [r3, #0]
 8007c2c:	e001      	b.n	8007c32 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c32:	697b      	ldr	r3, [r7, #20]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3718      	adds	r7, #24
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	20001868 	.word	0x20001868
 8007c40:	20001848 	.word	0x20001848
 8007c44:	20001370 	.word	0x20001370
 8007c48:	20001800 	.word	0x20001800
 8007c4c:	2000136c 	.word	0x2000136c
 8007c50:	20001854 	.word	0x20001854

08007c54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c5c:	4b06      	ldr	r3, [pc, #24]	@ (8007c78 <vTaskInternalSetTimeOutState+0x24>)
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c64:	4b05      	ldr	r3, [pc, #20]	@ (8007c7c <vTaskInternalSetTimeOutState+0x28>)
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	605a      	str	r2, [r3, #4]
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	20001858 	.word	0x20001858
 8007c7c:	20001844 	.word	0x20001844

08007c80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10b      	bne.n	8007ca8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	613b      	str	r3, [r7, #16]
}
 8007ca2:	bf00      	nop
 8007ca4:	bf00      	nop
 8007ca6:	e7fd      	b.n	8007ca4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d10b      	bne.n	8007cc6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	60fb      	str	r3, [r7, #12]
}
 8007cc0:	bf00      	nop
 8007cc2:	bf00      	nop
 8007cc4:	e7fd      	b.n	8007cc2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007cc6:	f000 ff97 	bl	8008bf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007cca:	4b1d      	ldr	r3, [pc, #116]	@ (8007d40 <xTaskCheckForTimeOut+0xc0>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce2:	d102      	bne.n	8007cea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	61fb      	str	r3, [r7, #28]
 8007ce8:	e023      	b.n	8007d32 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	4b15      	ldr	r3, [pc, #84]	@ (8007d44 <xTaskCheckForTimeOut+0xc4>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d007      	beq.n	8007d06 <xTaskCheckForTimeOut+0x86>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d302      	bcc.n	8007d06 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d00:	2301      	movs	r3, #1
 8007d02:	61fb      	str	r3, [r7, #28]
 8007d04:	e015      	b.n	8007d32 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d20b      	bcs.n	8007d28 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	1ad2      	subs	r2, r2, r3
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff ff99 	bl	8007c54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d22:	2300      	movs	r3, #0
 8007d24:	61fb      	str	r3, [r7, #28]
 8007d26:	e004      	b.n	8007d32 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d32:	f000 ff93 	bl	8008c5c <vPortExitCritical>

	return xReturn;
 8007d36:	69fb      	ldr	r3, [r7, #28]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3720      	adds	r7, #32
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	20001844 	.word	0x20001844
 8007d44:	20001858 	.word	0x20001858

08007d48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d48:	b480      	push	{r7}
 8007d4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d4c:	4b03      	ldr	r3, [pc, #12]	@ (8007d5c <vTaskMissedYield+0x14>)
 8007d4e:	2201      	movs	r2, #1
 8007d50:	601a      	str	r2, [r3, #0]
}
 8007d52:	bf00      	nop
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	20001854 	.word	0x20001854

08007d60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d68:	f000 f852 	bl	8007e10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d6c:	4b06      	ldr	r3, [pc, #24]	@ (8007d88 <prvIdleTask+0x28>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d9f9      	bls.n	8007d68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d74:	4b05      	ldr	r3, [pc, #20]	@ (8007d8c <prvIdleTask+0x2c>)
 8007d76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d84:	e7f0      	b.n	8007d68 <prvIdleTask+0x8>
 8007d86:	bf00      	nop
 8007d88:	20001370 	.word	0x20001370
 8007d8c:	e000ed04 	.word	0xe000ed04

08007d90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d96:	2300      	movs	r3, #0
 8007d98:	607b      	str	r3, [r7, #4]
 8007d9a:	e00c      	b.n	8007db6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4a12      	ldr	r2, [pc, #72]	@ (8007df0 <prvInitialiseTaskLists+0x60>)
 8007da8:	4413      	add	r3, r2
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe f97c 	bl	80060a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	3301      	adds	r3, #1
 8007db4:	607b      	str	r3, [r7, #4]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b37      	cmp	r3, #55	@ 0x37
 8007dba:	d9ef      	bls.n	8007d9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007dbc:	480d      	ldr	r0, [pc, #52]	@ (8007df4 <prvInitialiseTaskLists+0x64>)
 8007dbe:	f7fe f973 	bl	80060a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007dc2:	480d      	ldr	r0, [pc, #52]	@ (8007df8 <prvInitialiseTaskLists+0x68>)
 8007dc4:	f7fe f970 	bl	80060a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007dc8:	480c      	ldr	r0, [pc, #48]	@ (8007dfc <prvInitialiseTaskLists+0x6c>)
 8007dca:	f7fe f96d 	bl	80060a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007dce:	480c      	ldr	r0, [pc, #48]	@ (8007e00 <prvInitialiseTaskLists+0x70>)
 8007dd0:	f7fe f96a 	bl	80060a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007dd4:	480b      	ldr	r0, [pc, #44]	@ (8007e04 <prvInitialiseTaskLists+0x74>)
 8007dd6:	f7fe f967 	bl	80060a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007dda:	4b0b      	ldr	r3, [pc, #44]	@ (8007e08 <prvInitialiseTaskLists+0x78>)
 8007ddc:	4a05      	ldr	r2, [pc, #20]	@ (8007df4 <prvInitialiseTaskLists+0x64>)
 8007dde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007de0:	4b0a      	ldr	r3, [pc, #40]	@ (8007e0c <prvInitialiseTaskLists+0x7c>)
 8007de2:	4a05      	ldr	r2, [pc, #20]	@ (8007df8 <prvInitialiseTaskLists+0x68>)
 8007de4:	601a      	str	r2, [r3, #0]
}
 8007de6:	bf00      	nop
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20001370 	.word	0x20001370
 8007df4:	200017d0 	.word	0x200017d0
 8007df8:	200017e4 	.word	0x200017e4
 8007dfc:	20001800 	.word	0x20001800
 8007e00:	20001814 	.word	0x20001814
 8007e04:	2000182c 	.word	0x2000182c
 8007e08:	200017f8 	.word	0x200017f8
 8007e0c:	200017fc 	.word	0x200017fc

08007e10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e16:	e019      	b.n	8007e4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e18:	f000 feee 	bl	8008bf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e1c:	4b10      	ldr	r3, [pc, #64]	@ (8007e60 <prvCheckTasksWaitingTermination+0x50>)
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3304      	adds	r3, #4
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fe f9c7 	bl	80061bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e64 <prvCheckTasksWaitingTermination+0x54>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3b01      	subs	r3, #1
 8007e34:	4a0b      	ldr	r2, [pc, #44]	@ (8007e64 <prvCheckTasksWaitingTermination+0x54>)
 8007e36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e38:	4b0b      	ldr	r3, [pc, #44]	@ (8007e68 <prvCheckTasksWaitingTermination+0x58>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8007e68 <prvCheckTasksWaitingTermination+0x58>)
 8007e40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e42:	f000 ff0b 	bl	8008c5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f810 	bl	8007e6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e4c:	4b06      	ldr	r3, [pc, #24]	@ (8007e68 <prvCheckTasksWaitingTermination+0x58>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e1      	bne.n	8007e18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20001814 	.word	0x20001814
 8007e64:	20001840 	.word	0x20001840
 8007e68:	20001828 	.word	0x20001828

08007e6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3354      	adds	r3, #84	@ 0x54
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f001 fa09 	bl	8009290 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d108      	bne.n	8007e9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f001 f8a3 	bl	8008fd8 <vPortFree>
				vPortFree( pxTCB );
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f001 f8a0 	bl	8008fd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e98:	e019      	b.n	8007ece <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d103      	bne.n	8007eac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f001 f897 	bl	8008fd8 <vPortFree>
	}
 8007eaa:	e010      	b.n	8007ece <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d00b      	beq.n	8007ece <prvDeleteTCB+0x62>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	60fb      	str	r3, [r7, #12]
}
 8007ec8:	bf00      	nop
 8007eca:	bf00      	nop
 8007ecc:	e7fd      	b.n	8007eca <prvDeleteTCB+0x5e>
	}
 8007ece:	bf00      	nop
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
	...

08007ed8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ede:	4b0c      	ldr	r3, [pc, #48]	@ (8007f10 <prvResetNextTaskUnblockTime+0x38>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d104      	bne.n	8007ef2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8007f14 <prvResetNextTaskUnblockTime+0x3c>)
 8007eea:	f04f 32ff 	mov.w	r2, #4294967295
 8007eee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ef0:	e008      	b.n	8007f04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ef2:	4b07      	ldr	r3, [pc, #28]	@ (8007f10 <prvResetNextTaskUnblockTime+0x38>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	4a04      	ldr	r2, [pc, #16]	@ (8007f14 <prvResetNextTaskUnblockTime+0x3c>)
 8007f02:	6013      	str	r3, [r2, #0]
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr
 8007f10:	200017f8 	.word	0x200017f8
 8007f14:	20001860 	.word	0x20001860

08007f18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8007f4c <xTaskGetSchedulerState+0x34>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d102      	bne.n	8007f2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f26:	2301      	movs	r3, #1
 8007f28:	607b      	str	r3, [r7, #4]
 8007f2a:	e008      	b.n	8007f3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f2c:	4b08      	ldr	r3, [pc, #32]	@ (8007f50 <xTaskGetSchedulerState+0x38>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d102      	bne.n	8007f3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f34:	2302      	movs	r3, #2
 8007f36:	607b      	str	r3, [r7, #4]
 8007f38:	e001      	b.n	8007f3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f3e:	687b      	ldr	r3, [r7, #4]
	}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	2000184c 	.word	0x2000184c
 8007f50:	20001868 	.word	0x20001868

08007f54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f60:	2300      	movs	r3, #0
 8007f62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d051      	beq.n	800800e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f6e:	4b2a      	ldr	r3, [pc, #168]	@ (8008018 <xTaskPriorityInherit+0xc4>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d241      	bcs.n	8007ffc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	db06      	blt.n	8007f8e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f80:	4b25      	ldr	r3, [pc, #148]	@ (8008018 <xTaskPriorityInherit+0xc4>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f86:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	6959      	ldr	r1, [r3, #20]
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f96:	4613      	mov	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4a1f      	ldr	r2, [pc, #124]	@ (800801c <xTaskPriorityInherit+0xc8>)
 8007fa0:	4413      	add	r3, r2
 8007fa2:	4299      	cmp	r1, r3
 8007fa4:	d122      	bne.n	8007fec <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	3304      	adds	r3, #4
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fe f906 	bl	80061bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fb0:	4b19      	ldr	r3, [pc, #100]	@ (8008018 <xTaskPriorityInherit+0xc4>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fbe:	4b18      	ldr	r3, [pc, #96]	@ (8008020 <xTaskPriorityInherit+0xcc>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d903      	bls.n	8007fce <xTaskPriorityInherit+0x7a>
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fca:	4a15      	ldr	r2, [pc, #84]	@ (8008020 <xTaskPriorityInherit+0xcc>)
 8007fcc:	6013      	str	r3, [r2, #0]
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4a10      	ldr	r2, [pc, #64]	@ (800801c <xTaskPriorityInherit+0xc8>)
 8007fdc:	441a      	add	r2, r3
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	4610      	mov	r0, r2
 8007fe6:	f7fe f88c 	bl	8006102 <vListInsertEnd>
 8007fea:	e004      	b.n	8007ff6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fec:	4b0a      	ldr	r3, [pc, #40]	@ (8008018 <xTaskPriorityInherit+0xc4>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	60fb      	str	r3, [r7, #12]
 8007ffa:	e008      	b.n	800800e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008000:	4b05      	ldr	r3, [pc, #20]	@ (8008018 <xTaskPriorityInherit+0xc4>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008006:	429a      	cmp	r2, r3
 8008008:	d201      	bcs.n	800800e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800800a:	2301      	movs	r3, #1
 800800c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800800e:	68fb      	ldr	r3, [r7, #12]
	}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	2000136c 	.word	0x2000136c
 800801c:	20001370 	.word	0x20001370
 8008020:	20001848 	.word	0x20001848

08008024 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008030:	2300      	movs	r3, #0
 8008032:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d058      	beq.n	80080ec <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800803a:	4b2f      	ldr	r3, [pc, #188]	@ (80080f8 <xTaskPriorityDisinherit+0xd4>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	429a      	cmp	r2, r3
 8008042:	d00b      	beq.n	800805c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	60fb      	str	r3, [r7, #12]
}
 8008056:	bf00      	nop
 8008058:	bf00      	nop
 800805a:	e7fd      	b.n	8008058 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10b      	bne.n	800807c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	60bb      	str	r3, [r7, #8]
}
 8008076:	bf00      	nop
 8008078:	bf00      	nop
 800807a:	e7fd      	b.n	8008078 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008080:	1e5a      	subs	r2, r3, #1
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800808e:	429a      	cmp	r2, r3
 8008090:	d02c      	beq.n	80080ec <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008096:	2b00      	cmp	r3, #0
 8008098:	d128      	bne.n	80080ec <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	3304      	adds	r3, #4
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fe f88c 	bl	80061bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080bc:	4b0f      	ldr	r3, [pc, #60]	@ (80080fc <xTaskPriorityDisinherit+0xd8>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d903      	bls.n	80080cc <xTaskPriorityDisinherit+0xa8>
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c8:	4a0c      	ldr	r2, [pc, #48]	@ (80080fc <xTaskPriorityDisinherit+0xd8>)
 80080ca:	6013      	str	r3, [r2, #0]
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080d0:	4613      	mov	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4413      	add	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4a09      	ldr	r2, [pc, #36]	@ (8008100 <xTaskPriorityDisinherit+0xdc>)
 80080da:	441a      	add	r2, r3
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	3304      	adds	r3, #4
 80080e0:	4619      	mov	r1, r3
 80080e2:	4610      	mov	r0, r2
 80080e4:	f7fe f80d 	bl	8006102 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080e8:	2301      	movs	r3, #1
 80080ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080ec:	697b      	ldr	r3, [r7, #20]
	}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3718      	adds	r7, #24
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	2000136c 	.word	0x2000136c
 80080fc:	20001848 	.word	0x20001848
 8008100:	20001370 	.word	0x20001370

08008104 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008104:	b580      	push	{r7, lr}
 8008106:	b088      	sub	sp, #32
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008112:	2301      	movs	r3, #1
 8008114:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d06c      	beq.n	80081f6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10b      	bne.n	800813c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	60fb      	str	r3, [r7, #12]
}
 8008136:	bf00      	nop
 8008138:	bf00      	nop
 800813a:	e7fd      	b.n	8008138 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	429a      	cmp	r2, r3
 8008144:	d902      	bls.n	800814c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	61fb      	str	r3, [r7, #28]
 800814a:	e002      	b.n	8008152 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008150:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008156:	69fa      	ldr	r2, [r7, #28]
 8008158:	429a      	cmp	r2, r3
 800815a:	d04c      	beq.n	80081f6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	429a      	cmp	r2, r3
 8008164:	d147      	bne.n	80081f6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008166:	4b26      	ldr	r3, [pc, #152]	@ (8008200 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	69ba      	ldr	r2, [r7, #24]
 800816c:	429a      	cmp	r2, r3
 800816e:	d10b      	bne.n	8008188 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	60bb      	str	r3, [r7, #8]
}
 8008182:	bf00      	nop
 8008184:	bf00      	nop
 8008186:	e7fd      	b.n	8008184 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	69fa      	ldr	r2, [r7, #28]
 8008192:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	2b00      	cmp	r3, #0
 800819a:	db04      	blt.n	80081a6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	6959      	ldr	r1, [r3, #20]
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	4613      	mov	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4413      	add	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4a13      	ldr	r2, [pc, #76]	@ (8008204 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80081b6:	4413      	add	r3, r2
 80081b8:	4299      	cmp	r1, r3
 80081ba:	d11c      	bne.n	80081f6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	3304      	adds	r3, #4
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fd fffb 	bl	80061bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008208 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d903      	bls.n	80081da <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008208 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4a07      	ldr	r2, [pc, #28]	@ (8008204 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80081e8:	441a      	add	r2, r3
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	3304      	adds	r3, #4
 80081ee:	4619      	mov	r1, r3
 80081f0:	4610      	mov	r0, r2
 80081f2:	f7fd ff86 	bl	8006102 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081f6:	bf00      	nop
 80081f8:	3720      	adds	r7, #32
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	2000136c 	.word	0x2000136c
 8008204:	20001370 	.word	0x20001370
 8008208:	20001848 	.word	0x20001848

0800820c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800820c:	b480      	push	{r7}
 800820e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008210:	4b07      	ldr	r3, [pc, #28]	@ (8008230 <pvTaskIncrementMutexHeldCount+0x24>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d004      	beq.n	8008222 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008218:	4b05      	ldr	r3, [pc, #20]	@ (8008230 <pvTaskIncrementMutexHeldCount+0x24>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800821e:	3201      	adds	r2, #1
 8008220:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008222:	4b03      	ldr	r3, [pc, #12]	@ (8008230 <pvTaskIncrementMutexHeldCount+0x24>)
 8008224:	681b      	ldr	r3, [r3, #0]
	}
 8008226:	4618      	mov	r0, r3
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	2000136c 	.word	0x2000136c

08008234 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800823e:	4b21      	ldr	r3, [pc, #132]	@ (80082c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008244:	4b20      	ldr	r3, [pc, #128]	@ (80082c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3304      	adds	r3, #4
 800824a:	4618      	mov	r0, r3
 800824c:	f7fd ffb6 	bl	80061bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008256:	d10a      	bne.n	800826e <prvAddCurrentTaskToDelayedList+0x3a>
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d007      	beq.n	800826e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800825e:	4b1a      	ldr	r3, [pc, #104]	@ (80082c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3304      	adds	r3, #4
 8008264:	4619      	mov	r1, r3
 8008266:	4819      	ldr	r0, [pc, #100]	@ (80082cc <prvAddCurrentTaskToDelayedList+0x98>)
 8008268:	f7fd ff4b 	bl	8006102 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800826c:	e026      	b.n	80082bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4413      	add	r3, r2
 8008274:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008276:	4b14      	ldr	r3, [pc, #80]	@ (80082c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	429a      	cmp	r2, r3
 8008284:	d209      	bcs.n	800829a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008286:	4b12      	ldr	r3, [pc, #72]	@ (80082d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	4b0f      	ldr	r3, [pc, #60]	@ (80082c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3304      	adds	r3, #4
 8008290:	4619      	mov	r1, r3
 8008292:	4610      	mov	r0, r2
 8008294:	f7fd ff59 	bl	800614a <vListInsert>
}
 8008298:	e010      	b.n	80082bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800829a:	4b0e      	ldr	r3, [pc, #56]	@ (80082d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	4b0a      	ldr	r3, [pc, #40]	@ (80082c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4619      	mov	r1, r3
 80082a6:	4610      	mov	r0, r2
 80082a8:	f7fd ff4f 	bl	800614a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082ac:	4b0a      	ldr	r3, [pc, #40]	@ (80082d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d202      	bcs.n	80082bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082b6:	4a08      	ldr	r2, [pc, #32]	@ (80082d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	6013      	str	r3, [r2, #0]
}
 80082bc:	bf00      	nop
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	20001844 	.word	0x20001844
 80082c8:	2000136c 	.word	0x2000136c
 80082cc:	2000182c 	.word	0x2000182c
 80082d0:	200017fc 	.word	0x200017fc
 80082d4:	200017f8 	.word	0x200017f8
 80082d8:	20001860 	.word	0x20001860

080082dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b08a      	sub	sp, #40	@ 0x28
 80082e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80082e2:	2300      	movs	r3, #0
 80082e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80082e6:	f000 fb13 	bl	8008910 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80082ea:	4b1d      	ldr	r3, [pc, #116]	@ (8008360 <xTimerCreateTimerTask+0x84>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d021      	beq.n	8008336 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80082f2:	2300      	movs	r3, #0
 80082f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082fa:	1d3a      	adds	r2, r7, #4
 80082fc:	f107 0108 	add.w	r1, r7, #8
 8008300:	f107 030c 	add.w	r3, r7, #12
 8008304:	4618      	mov	r0, r3
 8008306:	f7fd feb5 	bl	8006074 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800830a:	6879      	ldr	r1, [r7, #4]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	9202      	str	r2, [sp, #8]
 8008312:	9301      	str	r3, [sp, #4]
 8008314:	2302      	movs	r3, #2
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	2300      	movs	r3, #0
 800831a:	460a      	mov	r2, r1
 800831c:	4911      	ldr	r1, [pc, #68]	@ (8008364 <xTimerCreateTimerTask+0x88>)
 800831e:	4812      	ldr	r0, [pc, #72]	@ (8008368 <xTimerCreateTimerTask+0x8c>)
 8008320:	f7fe ffa2 	bl	8007268 <xTaskCreateStatic>
 8008324:	4603      	mov	r3, r0
 8008326:	4a11      	ldr	r2, [pc, #68]	@ (800836c <xTimerCreateTimerTask+0x90>)
 8008328:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800832a:	4b10      	ldr	r3, [pc, #64]	@ (800836c <xTimerCreateTimerTask+0x90>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008332:	2301      	movs	r3, #1
 8008334:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10b      	bne.n	8008354 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800833c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008340:	f383 8811 	msr	BASEPRI, r3
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	613b      	str	r3, [r7, #16]
}
 800834e:	bf00      	nop
 8008350:	bf00      	nop
 8008352:	e7fd      	b.n	8008350 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008354:	697b      	ldr	r3, [r7, #20]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3718      	adds	r7, #24
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	2000189c 	.word	0x2000189c
 8008364:	0800ae00 	.word	0x0800ae00
 8008368:	080084a9 	.word	0x080084a9
 800836c:	200018a0 	.word	0x200018a0

08008370 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b08a      	sub	sp, #40	@ 0x28
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
 800837c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800837e:	2300      	movs	r3, #0
 8008380:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10b      	bne.n	80083a0 <xTimerGenericCommand+0x30>
	__asm volatile
 8008388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	623b      	str	r3, [r7, #32]
}
 800839a:	bf00      	nop
 800839c:	bf00      	nop
 800839e:	e7fd      	b.n	800839c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083a0:	4b19      	ldr	r3, [pc, #100]	@ (8008408 <xTimerGenericCommand+0x98>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d02a      	beq.n	80083fe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2b05      	cmp	r3, #5
 80083b8:	dc18      	bgt.n	80083ec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083ba:	f7ff fdad 	bl	8007f18 <xTaskGetSchedulerState>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d109      	bne.n	80083d8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083c4:	4b10      	ldr	r3, [pc, #64]	@ (8008408 <xTimerGenericCommand+0x98>)
 80083c6:	6818      	ldr	r0, [r3, #0]
 80083c8:	f107 0110 	add.w	r1, r7, #16
 80083cc:	2300      	movs	r3, #0
 80083ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083d0:	f7fe f8d2 	bl	8006578 <xQueueGenericSend>
 80083d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80083d6:	e012      	b.n	80083fe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083d8:	4b0b      	ldr	r3, [pc, #44]	@ (8008408 <xTimerGenericCommand+0x98>)
 80083da:	6818      	ldr	r0, [r3, #0]
 80083dc:	f107 0110 	add.w	r1, r7, #16
 80083e0:	2300      	movs	r3, #0
 80083e2:	2200      	movs	r2, #0
 80083e4:	f7fe f8c8 	bl	8006578 <xQueueGenericSend>
 80083e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80083ea:	e008      	b.n	80083fe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083ec:	4b06      	ldr	r3, [pc, #24]	@ (8008408 <xTimerGenericCommand+0x98>)
 80083ee:	6818      	ldr	r0, [r3, #0]
 80083f0:	f107 0110 	add.w	r1, r7, #16
 80083f4:	2300      	movs	r3, #0
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	f7fe f9c0 	bl	800677c <xQueueGenericSendFromISR>
 80083fc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008400:	4618      	mov	r0, r3
 8008402:	3728      	adds	r7, #40	@ 0x28
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	2000189c 	.word	0x2000189c

0800840c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b088      	sub	sp, #32
 8008410:	af02      	add	r7, sp, #8
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008416:	4b23      	ldr	r3, [pc, #140]	@ (80084a4 <prvProcessExpiredTimer+0x98>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	3304      	adds	r3, #4
 8008424:	4618      	mov	r0, r3
 8008426:	f7fd fec9 	bl	80061bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008430:	f003 0304 	and.w	r3, r3, #4
 8008434:	2b00      	cmp	r3, #0
 8008436:	d023      	beq.n	8008480 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	699a      	ldr	r2, [r3, #24]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	18d1      	adds	r1, r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	6978      	ldr	r0, [r7, #20]
 8008446:	f000 f8d5 	bl	80085f4 <prvInsertTimerInActiveList>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d020      	beq.n	8008492 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008450:	2300      	movs	r3, #0
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	2300      	movs	r3, #0
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	2100      	movs	r1, #0
 800845a:	6978      	ldr	r0, [r7, #20]
 800845c:	f7ff ff88 	bl	8008370 <xTimerGenericCommand>
 8008460:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d114      	bne.n	8008492 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	60fb      	str	r3, [r7, #12]
}
 800847a:	bf00      	nop
 800847c:	bf00      	nop
 800847e:	e7fd      	b.n	800847c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008486:	f023 0301 	bic.w	r3, r3, #1
 800848a:	b2da      	uxtb	r2, r3
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	6978      	ldr	r0, [r7, #20]
 8008498:	4798      	blx	r3
}
 800849a:	bf00      	nop
 800849c:	3718      	adds	r7, #24
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20001894 	.word	0x20001894

080084a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084b0:	f107 0308 	add.w	r3, r7, #8
 80084b4:	4618      	mov	r0, r3
 80084b6:	f000 f859 	bl	800856c <prvGetNextExpireTime>
 80084ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	4619      	mov	r1, r3
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f000 f805 	bl	80084d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084c6:	f000 f8d7 	bl	8008678 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084ca:	bf00      	nop
 80084cc:	e7f0      	b.n	80084b0 <prvTimerTask+0x8>
	...

080084d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084da:	f7ff f929 	bl	8007730 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084de:	f107 0308 	add.w	r3, r7, #8
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 f866 	bl	80085b4 <prvSampleTimeNow>
 80084e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d130      	bne.n	8008552 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10a      	bne.n	800850c <prvProcessTimerOrBlockTask+0x3c>
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d806      	bhi.n	800850c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084fe:	f7ff f925 	bl	800774c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008502:	68f9      	ldr	r1, [r7, #12]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7ff ff81 	bl	800840c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800850a:	e024      	b.n	8008556 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d008      	beq.n	8008524 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008512:	4b13      	ldr	r3, [pc, #76]	@ (8008560 <prvProcessTimerOrBlockTask+0x90>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <prvProcessTimerOrBlockTask+0x50>
 800851c:	2301      	movs	r3, #1
 800851e:	e000      	b.n	8008522 <prvProcessTimerOrBlockTask+0x52>
 8008520:	2300      	movs	r3, #0
 8008522:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008524:	4b0f      	ldr	r3, [pc, #60]	@ (8008564 <prvProcessTimerOrBlockTask+0x94>)
 8008526:	6818      	ldr	r0, [r3, #0]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	4619      	mov	r1, r3
 8008532:	f7fe fe65 	bl	8007200 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008536:	f7ff f909 	bl	800774c <xTaskResumeAll>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10a      	bne.n	8008556 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008540:	4b09      	ldr	r3, [pc, #36]	@ (8008568 <prvProcessTimerOrBlockTask+0x98>)
 8008542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	f3bf 8f6f 	isb	sy
}
 8008550:	e001      	b.n	8008556 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008552:	f7ff f8fb 	bl	800774c <xTaskResumeAll>
}
 8008556:	bf00      	nop
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20001898 	.word	0x20001898
 8008564:	2000189c 	.word	0x2000189c
 8008568:	e000ed04 	.word	0xe000ed04

0800856c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008574:	4b0e      	ldr	r3, [pc, #56]	@ (80085b0 <prvGetNextExpireTime+0x44>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <prvGetNextExpireTime+0x16>
 800857e:	2201      	movs	r2, #1
 8008580:	e000      	b.n	8008584 <prvGetNextExpireTime+0x18>
 8008582:	2200      	movs	r2, #0
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d105      	bne.n	800859c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008590:	4b07      	ldr	r3, [pc, #28]	@ (80085b0 <prvGetNextExpireTime+0x44>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	60fb      	str	r3, [r7, #12]
 800859a:	e001      	b.n	80085a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800859c:	2300      	movs	r3, #0
 800859e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085a0:	68fb      	ldr	r3, [r7, #12]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	20001894 	.word	0x20001894

080085b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085bc:	f7ff f964 	bl	8007888 <xTaskGetTickCount>
 80085c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085c2:	4b0b      	ldr	r3, [pc, #44]	@ (80085f0 <prvSampleTimeNow+0x3c>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d205      	bcs.n	80085d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085cc:	f000 f93a 	bl	8008844 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	601a      	str	r2, [r3, #0]
 80085d6:	e002      	b.n	80085de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085de:	4a04      	ldr	r2, [pc, #16]	@ (80085f0 <prvSampleTimeNow+0x3c>)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085e4:	68fb      	ldr	r3, [r7, #12]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	200018a4 	.word	0x200018a4

080085f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
 8008600:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008602:	2300      	movs	r3, #0
 8008604:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	429a      	cmp	r2, r3
 8008618:	d812      	bhi.n	8008640 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	1ad2      	subs	r2, r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	429a      	cmp	r2, r3
 8008626:	d302      	bcc.n	800862e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008628:	2301      	movs	r3, #1
 800862a:	617b      	str	r3, [r7, #20]
 800862c:	e01b      	b.n	8008666 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800862e:	4b10      	ldr	r3, [pc, #64]	@ (8008670 <prvInsertTimerInActiveList+0x7c>)
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	3304      	adds	r3, #4
 8008636:	4619      	mov	r1, r3
 8008638:	4610      	mov	r0, r2
 800863a:	f7fd fd86 	bl	800614a <vListInsert>
 800863e:	e012      	b.n	8008666 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	429a      	cmp	r2, r3
 8008646:	d206      	bcs.n	8008656 <prvInsertTimerInActiveList+0x62>
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	429a      	cmp	r2, r3
 800864e:	d302      	bcc.n	8008656 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008650:	2301      	movs	r3, #1
 8008652:	617b      	str	r3, [r7, #20]
 8008654:	e007      	b.n	8008666 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008656:	4b07      	ldr	r3, [pc, #28]	@ (8008674 <prvInsertTimerInActiveList+0x80>)
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3304      	adds	r3, #4
 800865e:	4619      	mov	r1, r3
 8008660:	4610      	mov	r0, r2
 8008662:	f7fd fd72 	bl	800614a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008666:	697b      	ldr	r3, [r7, #20]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3718      	adds	r7, #24
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	20001898 	.word	0x20001898
 8008674:	20001894 	.word	0x20001894

08008678 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b08e      	sub	sp, #56	@ 0x38
 800867c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800867e:	e0ce      	b.n	800881e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	da19      	bge.n	80086ba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008686:	1d3b      	adds	r3, r7, #4
 8008688:	3304      	adds	r3, #4
 800868a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800868c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10b      	bne.n	80086aa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	61fb      	str	r3, [r7, #28]
}
 80086a4:	bf00      	nop
 80086a6:	bf00      	nop
 80086a8:	e7fd      	b.n	80086a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086b0:	6850      	ldr	r0, [r2, #4]
 80086b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086b4:	6892      	ldr	r2, [r2, #8]
 80086b6:	4611      	mov	r1, r2
 80086b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f2c0 80ae 	blt.w	800881e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d004      	beq.n	80086d8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d0:	3304      	adds	r3, #4
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fd fd72 	bl	80061bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086d8:	463b      	mov	r3, r7
 80086da:	4618      	mov	r0, r3
 80086dc:	f7ff ff6a 	bl	80085b4 <prvSampleTimeNow>
 80086e0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b09      	cmp	r3, #9
 80086e6:	f200 8097 	bhi.w	8008818 <prvProcessReceivedCommands+0x1a0>
 80086ea:	a201      	add	r2, pc, #4	@ (adr r2, 80086f0 <prvProcessReceivedCommands+0x78>)
 80086ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f0:	08008719 	.word	0x08008719
 80086f4:	08008719 	.word	0x08008719
 80086f8:	08008719 	.word	0x08008719
 80086fc:	0800878f 	.word	0x0800878f
 8008700:	080087a3 	.word	0x080087a3
 8008704:	080087ef 	.word	0x080087ef
 8008708:	08008719 	.word	0x08008719
 800870c:	08008719 	.word	0x08008719
 8008710:	0800878f 	.word	0x0800878f
 8008714:	080087a3 	.word	0x080087a3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800871a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800871e:	f043 0301 	orr.w	r3, r3, #1
 8008722:	b2da      	uxtb	r2, r3
 8008724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008726:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	18d1      	adds	r1, r2, r3
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008736:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008738:	f7ff ff5c 	bl	80085f4 <prvInsertTimerInActiveList>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d06c      	beq.n	800881c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008748:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800874a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008750:	f003 0304 	and.w	r3, r3, #4
 8008754:	2b00      	cmp	r3, #0
 8008756:	d061      	beq.n	800881c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	441a      	add	r2, r3
 8008760:	2300      	movs	r3, #0
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	2300      	movs	r3, #0
 8008766:	2100      	movs	r1, #0
 8008768:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800876a:	f7ff fe01 	bl	8008370 <xTimerGenericCommand>
 800876e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d152      	bne.n	800881c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	61bb      	str	r3, [r7, #24]
}
 8008788:	bf00      	nop
 800878a:	bf00      	nop
 800878c:	e7fd      	b.n	800878a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800878e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008790:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008794:	f023 0301 	bic.w	r3, r3, #1
 8008798:	b2da      	uxtb	r2, r3
 800879a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800879c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80087a0:	e03d      	b.n	800881e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087a8:	f043 0301 	orr.w	r3, r3, #1
 80087ac:	b2da      	uxtb	r2, r3
 80087ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10b      	bne.n	80087da <prvProcessReceivedCommands+0x162>
	__asm volatile
 80087c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c6:	f383 8811 	msr	BASEPRI, r3
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	617b      	str	r3, [r7, #20]
}
 80087d4:	bf00      	nop
 80087d6:	bf00      	nop
 80087d8:	e7fd      	b.n	80087d6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087dc:	699a      	ldr	r2, [r3, #24]
 80087de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e0:	18d1      	adds	r1, r2, r3
 80087e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087e8:	f7ff ff04 	bl	80085f4 <prvInsertTimerInActiveList>
					break;
 80087ec:	e017      	b.n	800881e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087f4:	f003 0302 	and.w	r3, r3, #2
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d103      	bne.n	8008804 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80087fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087fe:	f000 fbeb 	bl	8008fd8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008802:	e00c      	b.n	800881e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008806:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800880a:	f023 0301 	bic.w	r3, r3, #1
 800880e:	b2da      	uxtb	r2, r3
 8008810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008812:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008816:	e002      	b.n	800881e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008818:	bf00      	nop
 800881a:	e000      	b.n	800881e <prvProcessReceivedCommands+0x1a6>
					break;
 800881c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800881e:	4b08      	ldr	r3, [pc, #32]	@ (8008840 <prvProcessReceivedCommands+0x1c8>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	1d39      	adds	r1, r7, #4
 8008824:	2200      	movs	r2, #0
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe f8d6 	bl	80069d8 <xQueueReceive>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	f47f af26 	bne.w	8008680 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008834:	bf00      	nop
 8008836:	bf00      	nop
 8008838:	3730      	adds	r7, #48	@ 0x30
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	2000189c 	.word	0x2000189c

08008844 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800884a:	e049      	b.n	80088e0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800884c:	4b2e      	ldr	r3, [pc, #184]	@ (8008908 <prvSwitchTimerLists+0xc4>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008856:	4b2c      	ldr	r3, [pc, #176]	@ (8008908 <prvSwitchTimerLists+0xc4>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3304      	adds	r3, #4
 8008864:	4618      	mov	r0, r3
 8008866:	f7fd fca9 	bl	80061bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b00      	cmp	r3, #0
 800887e:	d02f      	beq.n	80088e0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	4413      	add	r3, r2
 8008888:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	429a      	cmp	r2, r3
 8008890:	d90e      	bls.n	80088b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800889e:	4b1a      	ldr	r3, [pc, #104]	@ (8008908 <prvSwitchTimerLists+0xc4>)
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3304      	adds	r3, #4
 80088a6:	4619      	mov	r1, r3
 80088a8:	4610      	mov	r0, r2
 80088aa:	f7fd fc4e 	bl	800614a <vListInsert>
 80088ae:	e017      	b.n	80088e0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088b0:	2300      	movs	r3, #0
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	2300      	movs	r3, #0
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	2100      	movs	r1, #0
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7ff fd58 	bl	8008370 <xTimerGenericCommand>
 80088c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10b      	bne.n	80088e0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80088c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088cc:	f383 8811 	msr	BASEPRI, r3
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	603b      	str	r3, [r7, #0]
}
 80088da:	bf00      	nop
 80088dc:	bf00      	nop
 80088de:	e7fd      	b.n	80088dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088e0:	4b09      	ldr	r3, [pc, #36]	@ (8008908 <prvSwitchTimerLists+0xc4>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1b0      	bne.n	800884c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088ea:	4b07      	ldr	r3, [pc, #28]	@ (8008908 <prvSwitchTimerLists+0xc4>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088f0:	4b06      	ldr	r3, [pc, #24]	@ (800890c <prvSwitchTimerLists+0xc8>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a04      	ldr	r2, [pc, #16]	@ (8008908 <prvSwitchTimerLists+0xc4>)
 80088f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088f8:	4a04      	ldr	r2, [pc, #16]	@ (800890c <prvSwitchTimerLists+0xc8>)
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	6013      	str	r3, [r2, #0]
}
 80088fe:	bf00      	nop
 8008900:	3718      	adds	r7, #24
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	20001894 	.word	0x20001894
 800890c:	20001898 	.word	0x20001898

08008910 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008916:	f000 f96f 	bl	8008bf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800891a:	4b15      	ldr	r3, [pc, #84]	@ (8008970 <prvCheckForValidListAndQueue+0x60>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d120      	bne.n	8008964 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008922:	4814      	ldr	r0, [pc, #80]	@ (8008974 <prvCheckForValidListAndQueue+0x64>)
 8008924:	f7fd fbc0 	bl	80060a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008928:	4813      	ldr	r0, [pc, #76]	@ (8008978 <prvCheckForValidListAndQueue+0x68>)
 800892a:	f7fd fbbd 	bl	80060a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800892e:	4b13      	ldr	r3, [pc, #76]	@ (800897c <prvCheckForValidListAndQueue+0x6c>)
 8008930:	4a10      	ldr	r2, [pc, #64]	@ (8008974 <prvCheckForValidListAndQueue+0x64>)
 8008932:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008934:	4b12      	ldr	r3, [pc, #72]	@ (8008980 <prvCheckForValidListAndQueue+0x70>)
 8008936:	4a10      	ldr	r2, [pc, #64]	@ (8008978 <prvCheckForValidListAndQueue+0x68>)
 8008938:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800893a:	2300      	movs	r3, #0
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	4b11      	ldr	r3, [pc, #68]	@ (8008984 <prvCheckForValidListAndQueue+0x74>)
 8008940:	4a11      	ldr	r2, [pc, #68]	@ (8008988 <prvCheckForValidListAndQueue+0x78>)
 8008942:	2110      	movs	r1, #16
 8008944:	200a      	movs	r0, #10
 8008946:	f7fd fccd 	bl	80062e4 <xQueueGenericCreateStatic>
 800894a:	4603      	mov	r3, r0
 800894c:	4a08      	ldr	r2, [pc, #32]	@ (8008970 <prvCheckForValidListAndQueue+0x60>)
 800894e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008950:	4b07      	ldr	r3, [pc, #28]	@ (8008970 <prvCheckForValidListAndQueue+0x60>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d005      	beq.n	8008964 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008958:	4b05      	ldr	r3, [pc, #20]	@ (8008970 <prvCheckForValidListAndQueue+0x60>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	490b      	ldr	r1, [pc, #44]	@ (800898c <prvCheckForValidListAndQueue+0x7c>)
 800895e:	4618      	mov	r0, r3
 8008960:	f7fe fbfa 	bl	8007158 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008964:	f000 f97a 	bl	8008c5c <vPortExitCritical>
}
 8008968:	bf00      	nop
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	2000189c 	.word	0x2000189c
 8008974:	2000186c 	.word	0x2000186c
 8008978:	20001880 	.word	0x20001880
 800897c:	20001894 	.word	0x20001894
 8008980:	20001898 	.word	0x20001898
 8008984:	20001948 	.word	0x20001948
 8008988:	200018a8 	.word	0x200018a8
 800898c:	0800ae08 	.word	0x0800ae08

08008990 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	3b04      	subs	r3, #4
 80089a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80089a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	3b04      	subs	r3, #4
 80089ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	f023 0201 	bic.w	r2, r3, #1
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	3b04      	subs	r3, #4
 80089be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089c0:	4a0c      	ldr	r2, [pc, #48]	@ (80089f4 <pxPortInitialiseStack+0x64>)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	3b14      	subs	r3, #20
 80089ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	3b04      	subs	r3, #4
 80089d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f06f 0202 	mvn.w	r2, #2
 80089de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	3b20      	subs	r3, #32
 80089e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089e6:	68fb      	ldr	r3, [r7, #12]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	080089f9 	.word	0x080089f9

080089f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089fe:	2300      	movs	r3, #0
 8008a00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a02:	4b13      	ldr	r3, [pc, #76]	@ (8008a50 <prvTaskExitError+0x58>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0a:	d00b      	beq.n	8008a24 <prvTaskExitError+0x2c>
	__asm volatile
 8008a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	60fb      	str	r3, [r7, #12]
}
 8008a1e:	bf00      	nop
 8008a20:	bf00      	nop
 8008a22:	e7fd      	b.n	8008a20 <prvTaskExitError+0x28>
	__asm volatile
 8008a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a28:	f383 8811 	msr	BASEPRI, r3
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	60bb      	str	r3, [r7, #8]
}
 8008a36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a38:	bf00      	nop
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d0fc      	beq.n	8008a3a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a40:	bf00      	nop
 8008a42:	bf00      	nop
 8008a44:	3714      	adds	r7, #20
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	20000020 	.word	0x20000020
	...

08008a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a60:	4b07      	ldr	r3, [pc, #28]	@ (8008a80 <pxCurrentTCBConst2>)
 8008a62:	6819      	ldr	r1, [r3, #0]
 8008a64:	6808      	ldr	r0, [r1, #0]
 8008a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6a:	f380 8809 	msr	PSP, r0
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f04f 0000 	mov.w	r0, #0
 8008a76:	f380 8811 	msr	BASEPRI, r0
 8008a7a:	4770      	bx	lr
 8008a7c:	f3af 8000 	nop.w

08008a80 <pxCurrentTCBConst2>:
 8008a80:	2000136c 	.word	0x2000136c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a84:	bf00      	nop
 8008a86:	bf00      	nop

08008a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a88:	4808      	ldr	r0, [pc, #32]	@ (8008aac <prvPortStartFirstTask+0x24>)
 8008a8a:	6800      	ldr	r0, [r0, #0]
 8008a8c:	6800      	ldr	r0, [r0, #0]
 8008a8e:	f380 8808 	msr	MSP, r0
 8008a92:	f04f 0000 	mov.w	r0, #0
 8008a96:	f380 8814 	msr	CONTROL, r0
 8008a9a:	b662      	cpsie	i
 8008a9c:	b661      	cpsie	f
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	df00      	svc	0
 8008aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008aaa:	bf00      	nop
 8008aac:	e000ed08 	.word	0xe000ed08

08008ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ab6:	4b47      	ldr	r3, [pc, #284]	@ (8008bd4 <xPortStartScheduler+0x124>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a47      	ldr	r2, [pc, #284]	@ (8008bd8 <xPortStartScheduler+0x128>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d10b      	bne.n	8008ad8 <xPortStartScheduler+0x28>
	__asm volatile
 8008ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	613b      	str	r3, [r7, #16]
}
 8008ad2:	bf00      	nop
 8008ad4:	bf00      	nop
 8008ad6:	e7fd      	b.n	8008ad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8008bd4 <xPortStartScheduler+0x124>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a3f      	ldr	r2, [pc, #252]	@ (8008bdc <xPortStartScheduler+0x12c>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d10b      	bne.n	8008afa <xPortStartScheduler+0x4a>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	60fb      	str	r3, [r7, #12]
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop
 8008af8:	e7fd      	b.n	8008af6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008afa:	4b39      	ldr	r3, [pc, #228]	@ (8008be0 <xPortStartScheduler+0x130>)
 8008afc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	22ff      	movs	r2, #255	@ 0xff
 8008b0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b14:	78fb      	ldrb	r3, [r7, #3]
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	4b31      	ldr	r3, [pc, #196]	@ (8008be4 <xPortStartScheduler+0x134>)
 8008b20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b22:	4b31      	ldr	r3, [pc, #196]	@ (8008be8 <xPortStartScheduler+0x138>)
 8008b24:	2207      	movs	r2, #7
 8008b26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b28:	e009      	b.n	8008b3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8008be8 <xPortStartScheduler+0x138>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	4a2d      	ldr	r2, [pc, #180]	@ (8008be8 <xPortStartScheduler+0x138>)
 8008b32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b34:	78fb      	ldrb	r3, [r7, #3]
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b3e:	78fb      	ldrb	r3, [r7, #3]
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b46:	2b80      	cmp	r3, #128	@ 0x80
 8008b48:	d0ef      	beq.n	8008b2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b4a:	4b27      	ldr	r3, [pc, #156]	@ (8008be8 <xPortStartScheduler+0x138>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f1c3 0307 	rsb	r3, r3, #7
 8008b52:	2b04      	cmp	r3, #4
 8008b54:	d00b      	beq.n	8008b6e <xPortStartScheduler+0xbe>
	__asm volatile
 8008b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5a:	f383 8811 	msr	BASEPRI, r3
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	60bb      	str	r3, [r7, #8]
}
 8008b68:	bf00      	nop
 8008b6a:	bf00      	nop
 8008b6c:	e7fd      	b.n	8008b6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8008be8 <xPortStartScheduler+0x138>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	021b      	lsls	r3, r3, #8
 8008b74:	4a1c      	ldr	r2, [pc, #112]	@ (8008be8 <xPortStartScheduler+0x138>)
 8008b76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b78:	4b1b      	ldr	r3, [pc, #108]	@ (8008be8 <xPortStartScheduler+0x138>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b80:	4a19      	ldr	r2, [pc, #100]	@ (8008be8 <xPortStartScheduler+0x138>)
 8008b82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b8c:	4b17      	ldr	r3, [pc, #92]	@ (8008bec <xPortStartScheduler+0x13c>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a16      	ldr	r2, [pc, #88]	@ (8008bec <xPortStartScheduler+0x13c>)
 8008b92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b98:	4b14      	ldr	r3, [pc, #80]	@ (8008bec <xPortStartScheduler+0x13c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a13      	ldr	r2, [pc, #76]	@ (8008bec <xPortStartScheduler+0x13c>)
 8008b9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008ba2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ba4:	f000 f8da 	bl	8008d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ba8:	4b11      	ldr	r3, [pc, #68]	@ (8008bf0 <xPortStartScheduler+0x140>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008bae:	f000 f8f9 	bl	8008da4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008bb2:	4b10      	ldr	r3, [pc, #64]	@ (8008bf4 <xPortStartScheduler+0x144>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8008bf4 <xPortStartScheduler+0x144>)
 8008bb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008bbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008bbe:	f7ff ff63 	bl	8008a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008bc2:	f7fe ff2b 	bl	8007a1c <vTaskSwitchContext>
	prvTaskExitError();
 8008bc6:	f7ff ff17 	bl	80089f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	e000ed00 	.word	0xe000ed00
 8008bd8:	410fc271 	.word	0x410fc271
 8008bdc:	410fc270 	.word	0x410fc270
 8008be0:	e000e400 	.word	0xe000e400
 8008be4:	20001998 	.word	0x20001998
 8008be8:	2000199c 	.word	0x2000199c
 8008bec:	e000ed20 	.word	0xe000ed20
 8008bf0:	20000020 	.word	0x20000020
 8008bf4:	e000ef34 	.word	0xe000ef34

08008bf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	607b      	str	r3, [r7, #4]
}
 8008c10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c12:	4b10      	ldr	r3, [pc, #64]	@ (8008c54 <vPortEnterCritical+0x5c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	3301      	adds	r3, #1
 8008c18:	4a0e      	ldr	r2, [pc, #56]	@ (8008c54 <vPortEnterCritical+0x5c>)
 8008c1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8008c54 <vPortEnterCritical+0x5c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d110      	bne.n	8008c46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c24:	4b0c      	ldr	r3, [pc, #48]	@ (8008c58 <vPortEnterCritical+0x60>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00b      	beq.n	8008c46 <vPortEnterCritical+0x4e>
	__asm volatile
 8008c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	603b      	str	r3, [r7, #0]
}
 8008c40:	bf00      	nop
 8008c42:	bf00      	nop
 8008c44:	e7fd      	b.n	8008c42 <vPortEnterCritical+0x4a>
	}
}
 8008c46:	bf00      	nop
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	20000020 	.word	0x20000020
 8008c58:	e000ed04 	.word	0xe000ed04

08008c5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c62:	4b12      	ldr	r3, [pc, #72]	@ (8008cac <vPortExitCritical+0x50>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d10b      	bne.n	8008c82 <vPortExitCritical+0x26>
	__asm volatile
 8008c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c6e:	f383 8811 	msr	BASEPRI, r3
 8008c72:	f3bf 8f6f 	isb	sy
 8008c76:	f3bf 8f4f 	dsb	sy
 8008c7a:	607b      	str	r3, [r7, #4]
}
 8008c7c:	bf00      	nop
 8008c7e:	bf00      	nop
 8008c80:	e7fd      	b.n	8008c7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c82:	4b0a      	ldr	r3, [pc, #40]	@ (8008cac <vPortExitCritical+0x50>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3b01      	subs	r3, #1
 8008c88:	4a08      	ldr	r2, [pc, #32]	@ (8008cac <vPortExitCritical+0x50>)
 8008c8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c8c:	4b07      	ldr	r3, [pc, #28]	@ (8008cac <vPortExitCritical+0x50>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d105      	bne.n	8008ca0 <vPortExitCritical+0x44>
 8008c94:	2300      	movs	r3, #0
 8008c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	f383 8811 	msr	BASEPRI, r3
}
 8008c9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	20000020 	.word	0x20000020

08008cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008cb0:	f3ef 8009 	mrs	r0, PSP
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	4b15      	ldr	r3, [pc, #84]	@ (8008d10 <pxCurrentTCBConst>)
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	f01e 0f10 	tst.w	lr, #16
 8008cc0:	bf08      	it	eq
 8008cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cca:	6010      	str	r0, [r2, #0]
 8008ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008cd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008cd4:	f380 8811 	msr	BASEPRI, r0
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f7fe fe9c 	bl	8007a1c <vTaskSwitchContext>
 8008ce4:	f04f 0000 	mov.w	r0, #0
 8008ce8:	f380 8811 	msr	BASEPRI, r0
 8008cec:	bc09      	pop	{r0, r3}
 8008cee:	6819      	ldr	r1, [r3, #0]
 8008cf0:	6808      	ldr	r0, [r1, #0]
 8008cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf6:	f01e 0f10 	tst.w	lr, #16
 8008cfa:	bf08      	it	eq
 8008cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d00:	f380 8809 	msr	PSP, r0
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	f3af 8000 	nop.w

08008d10 <pxCurrentTCBConst>:
 8008d10:	2000136c 	.word	0x2000136c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d14:	bf00      	nop
 8008d16:	bf00      	nop

08008d18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	607b      	str	r3, [r7, #4]
}
 8008d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d32:	f7fe fdb9 	bl	80078a8 <xTaskIncrementTick>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d003      	beq.n	8008d44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d3c:	4b06      	ldr	r3, [pc, #24]	@ (8008d58 <xPortSysTickHandler+0x40>)
 8008d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	2300      	movs	r3, #0
 8008d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	f383 8811 	msr	BASEPRI, r3
}
 8008d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d50:	bf00      	nop
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	e000ed04 	.word	0xe000ed04

08008d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d60:	4b0b      	ldr	r3, [pc, #44]	@ (8008d90 <vPortSetupTimerInterrupt+0x34>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d66:	4b0b      	ldr	r3, [pc, #44]	@ (8008d94 <vPortSetupTimerInterrupt+0x38>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d98 <vPortSetupTimerInterrupt+0x3c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a0a      	ldr	r2, [pc, #40]	@ (8008d9c <vPortSetupTimerInterrupt+0x40>)
 8008d72:	fba2 2303 	umull	r2, r3, r2, r3
 8008d76:	099b      	lsrs	r3, r3, #6
 8008d78:	4a09      	ldr	r2, [pc, #36]	@ (8008da0 <vPortSetupTimerInterrupt+0x44>)
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d7e:	4b04      	ldr	r3, [pc, #16]	@ (8008d90 <vPortSetupTimerInterrupt+0x34>)
 8008d80:	2207      	movs	r2, #7
 8008d82:	601a      	str	r2, [r3, #0]
}
 8008d84:	bf00      	nop
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	e000e010 	.word	0xe000e010
 8008d94:	e000e018 	.word	0xe000e018
 8008d98:	20000014 	.word	0x20000014
 8008d9c:	10624dd3 	.word	0x10624dd3
 8008da0:	e000e014 	.word	0xe000e014

08008da4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008da4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008db4 <vPortEnableVFP+0x10>
 8008da8:	6801      	ldr	r1, [r0, #0]
 8008daa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008dae:	6001      	str	r1, [r0, #0]
 8008db0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008db2:	bf00      	nop
 8008db4:	e000ed88 	.word	0xe000ed88

08008db8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008dbe:	f3ef 8305 	mrs	r3, IPSR
 8008dc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2b0f      	cmp	r3, #15
 8008dc8:	d915      	bls.n	8008df6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008dca:	4a18      	ldr	r2, [pc, #96]	@ (8008e2c <vPortValidateInterruptPriority+0x74>)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4413      	add	r3, r2
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008dd4:	4b16      	ldr	r3, [pc, #88]	@ (8008e30 <vPortValidateInterruptPriority+0x78>)
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	7afa      	ldrb	r2, [r7, #11]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d20b      	bcs.n	8008df6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	607b      	str	r3, [r7, #4]
}
 8008df0:	bf00      	nop
 8008df2:	bf00      	nop
 8008df4:	e7fd      	b.n	8008df2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008df6:	4b0f      	ldr	r3, [pc, #60]	@ (8008e34 <vPortValidateInterruptPriority+0x7c>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8008e38 <vPortValidateInterruptPriority+0x80>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d90b      	bls.n	8008e1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e0a:	f383 8811 	msr	BASEPRI, r3
 8008e0e:	f3bf 8f6f 	isb	sy
 8008e12:	f3bf 8f4f 	dsb	sy
 8008e16:	603b      	str	r3, [r7, #0]
}
 8008e18:	bf00      	nop
 8008e1a:	bf00      	nop
 8008e1c:	e7fd      	b.n	8008e1a <vPortValidateInterruptPriority+0x62>
	}
 8008e1e:	bf00      	nop
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	e000e3f0 	.word	0xe000e3f0
 8008e30:	20001998 	.word	0x20001998
 8008e34:	e000ed0c 	.word	0xe000ed0c
 8008e38:	2000199c 	.word	0x2000199c

08008e3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b08a      	sub	sp, #40	@ 0x28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e44:	2300      	movs	r3, #0
 8008e46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e48:	f7fe fc72 	bl	8007730 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e4c:	4b5c      	ldr	r3, [pc, #368]	@ (8008fc0 <pvPortMalloc+0x184>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e54:	f000 f924 	bl	80090a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e58:	4b5a      	ldr	r3, [pc, #360]	@ (8008fc4 <pvPortMalloc+0x188>)
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4013      	ands	r3, r2
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f040 8095 	bne.w	8008f90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d01e      	beq.n	8008eaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008e6c:	2208      	movs	r2, #8
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4413      	add	r3, r2
 8008e72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f003 0307 	and.w	r3, r3, #7
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d015      	beq.n	8008eaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f023 0307 	bic.w	r3, r3, #7
 8008e84:	3308      	adds	r3, #8
 8008e86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f003 0307 	and.w	r3, r3, #7
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00b      	beq.n	8008eaa <pvPortMalloc+0x6e>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	617b      	str	r3, [r7, #20]
}
 8008ea4:	bf00      	nop
 8008ea6:	bf00      	nop
 8008ea8:	e7fd      	b.n	8008ea6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d06f      	beq.n	8008f90 <pvPortMalloc+0x154>
 8008eb0:	4b45      	ldr	r3, [pc, #276]	@ (8008fc8 <pvPortMalloc+0x18c>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d86a      	bhi.n	8008f90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008eba:	4b44      	ldr	r3, [pc, #272]	@ (8008fcc <pvPortMalloc+0x190>)
 8008ebc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ebe:	4b43      	ldr	r3, [pc, #268]	@ (8008fcc <pvPortMalloc+0x190>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ec4:	e004      	b.n	8008ed0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d903      	bls.n	8008ee2 <pvPortMalloc+0xa6>
 8008eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1f1      	bne.n	8008ec6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ee2:	4b37      	ldr	r3, [pc, #220]	@ (8008fc0 <pvPortMalloc+0x184>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d051      	beq.n	8008f90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2208      	movs	r2, #8
 8008ef2:	4413      	add	r3, r2
 8008ef4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f00:	685a      	ldr	r2, [r3, #4]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	1ad2      	subs	r2, r2, r3
 8008f06:	2308      	movs	r3, #8
 8008f08:	005b      	lsls	r3, r3, #1
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d920      	bls.n	8008f50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4413      	add	r3, r2
 8008f14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	f003 0307 	and.w	r3, r3, #7
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00b      	beq.n	8008f38 <pvPortMalloc+0xfc>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	613b      	str	r3, [r7, #16]
}
 8008f32:	bf00      	nop
 8008f34:	bf00      	nop
 8008f36:	e7fd      	b.n	8008f34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f3a:	685a      	ldr	r2, [r3, #4]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	1ad2      	subs	r2, r2, r3
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f4a:	69b8      	ldr	r0, [r7, #24]
 8008f4c:	f000 f90a 	bl	8009164 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f50:	4b1d      	ldr	r3, [pc, #116]	@ (8008fc8 <pvPortMalloc+0x18c>)
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8008fc8 <pvPortMalloc+0x18c>)
 8008f5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8008fc8 <pvPortMalloc+0x18c>)
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	4b1b      	ldr	r3, [pc, #108]	@ (8008fd0 <pvPortMalloc+0x194>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d203      	bcs.n	8008f72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f6a:	4b17      	ldr	r3, [pc, #92]	@ (8008fc8 <pvPortMalloc+0x18c>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a18      	ldr	r2, [pc, #96]	@ (8008fd0 <pvPortMalloc+0x194>)
 8008f70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	4b13      	ldr	r3, [pc, #76]	@ (8008fc4 <pvPortMalloc+0x188>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f82:	2200      	movs	r2, #0
 8008f84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f86:	4b13      	ldr	r3, [pc, #76]	@ (8008fd4 <pvPortMalloc+0x198>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	4a11      	ldr	r2, [pc, #68]	@ (8008fd4 <pvPortMalloc+0x198>)
 8008f8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f90:	f7fe fbdc 	bl	800774c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	f003 0307 	and.w	r3, r3, #7
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00b      	beq.n	8008fb6 <pvPortMalloc+0x17a>
	__asm volatile
 8008f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	60fb      	str	r3, [r7, #12]
}
 8008fb0:	bf00      	nop
 8008fb2:	bf00      	nop
 8008fb4:	e7fd      	b.n	8008fb2 <pvPortMalloc+0x176>
	return pvReturn;
 8008fb6:	69fb      	ldr	r3, [r7, #28]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3728      	adds	r7, #40	@ 0x28
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	200055a8 	.word	0x200055a8
 8008fc4:	200055bc 	.word	0x200055bc
 8008fc8:	200055ac 	.word	0x200055ac
 8008fcc:	200055a0 	.word	0x200055a0
 8008fd0:	200055b0 	.word	0x200055b0
 8008fd4:	200055b4 	.word	0x200055b4

08008fd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d04f      	beq.n	800908a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fea:	2308      	movs	r3, #8
 8008fec:	425b      	negs	r3, r3
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	685a      	ldr	r2, [r3, #4]
 8008ffc:	4b25      	ldr	r3, [pc, #148]	@ (8009094 <vPortFree+0xbc>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4013      	ands	r3, r2
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10b      	bne.n	800901e <vPortFree+0x46>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	60fb      	str	r3, [r7, #12]
}
 8009018:	bf00      	nop
 800901a:	bf00      	nop
 800901c:	e7fd      	b.n	800901a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00b      	beq.n	800903e <vPortFree+0x66>
	__asm volatile
 8009026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800902a:	f383 8811 	msr	BASEPRI, r3
 800902e:	f3bf 8f6f 	isb	sy
 8009032:	f3bf 8f4f 	dsb	sy
 8009036:	60bb      	str	r3, [r7, #8]
}
 8009038:	bf00      	nop
 800903a:	bf00      	nop
 800903c:	e7fd      	b.n	800903a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	685a      	ldr	r2, [r3, #4]
 8009042:	4b14      	ldr	r3, [pc, #80]	@ (8009094 <vPortFree+0xbc>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4013      	ands	r3, r2
 8009048:	2b00      	cmp	r3, #0
 800904a:	d01e      	beq.n	800908a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d11a      	bne.n	800908a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	685a      	ldr	r2, [r3, #4]
 8009058:	4b0e      	ldr	r3, [pc, #56]	@ (8009094 <vPortFree+0xbc>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	43db      	mvns	r3, r3
 800905e:	401a      	ands	r2, r3
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009064:	f7fe fb64 	bl	8007730 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	4b0a      	ldr	r3, [pc, #40]	@ (8009098 <vPortFree+0xc0>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4413      	add	r3, r2
 8009072:	4a09      	ldr	r2, [pc, #36]	@ (8009098 <vPortFree+0xc0>)
 8009074:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009076:	6938      	ldr	r0, [r7, #16]
 8009078:	f000 f874 	bl	8009164 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800907c:	4b07      	ldr	r3, [pc, #28]	@ (800909c <vPortFree+0xc4>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	3301      	adds	r3, #1
 8009082:	4a06      	ldr	r2, [pc, #24]	@ (800909c <vPortFree+0xc4>)
 8009084:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009086:	f7fe fb61 	bl	800774c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800908a:	bf00      	nop
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	200055bc 	.word	0x200055bc
 8009098:	200055ac 	.word	0x200055ac
 800909c:	200055b8 	.word	0x200055b8

080090a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80090a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80090aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80090ac:	4b27      	ldr	r3, [pc, #156]	@ (800914c <prvHeapInit+0xac>)
 80090ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f003 0307 	and.w	r3, r3, #7
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00c      	beq.n	80090d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	3307      	adds	r3, #7
 80090be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f023 0307 	bic.w	r3, r3, #7
 80090c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	4a1f      	ldr	r2, [pc, #124]	@ (800914c <prvHeapInit+0xac>)
 80090d0:	4413      	add	r3, r2
 80090d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009150 <prvHeapInit+0xb0>)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090de:	4b1c      	ldr	r3, [pc, #112]	@ (8009150 <prvHeapInit+0xb0>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	68ba      	ldr	r2, [r7, #8]
 80090e8:	4413      	add	r3, r2
 80090ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090ec:	2208      	movs	r2, #8
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	1a9b      	subs	r3, r3, r2
 80090f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f023 0307 	bic.w	r3, r3, #7
 80090fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	4a15      	ldr	r2, [pc, #84]	@ (8009154 <prvHeapInit+0xb4>)
 8009100:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009102:	4b14      	ldr	r3, [pc, #80]	@ (8009154 <prvHeapInit+0xb4>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2200      	movs	r2, #0
 8009108:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800910a:	4b12      	ldr	r3, [pc, #72]	@ (8009154 <prvHeapInit+0xb4>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2200      	movs	r2, #0
 8009110:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	1ad2      	subs	r2, r2, r3
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009120:	4b0c      	ldr	r3, [pc, #48]	@ (8009154 <prvHeapInit+0xb4>)
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	4a0a      	ldr	r2, [pc, #40]	@ (8009158 <prvHeapInit+0xb8>)
 800912e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	4a09      	ldr	r2, [pc, #36]	@ (800915c <prvHeapInit+0xbc>)
 8009136:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009138:	4b09      	ldr	r3, [pc, #36]	@ (8009160 <prvHeapInit+0xc0>)
 800913a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800913e:	601a      	str	r2, [r3, #0]
}
 8009140:	bf00      	nop
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr
 800914c:	200019a0 	.word	0x200019a0
 8009150:	200055a0 	.word	0x200055a0
 8009154:	200055a8 	.word	0x200055a8
 8009158:	200055b0 	.word	0x200055b0
 800915c:	200055ac 	.word	0x200055ac
 8009160:	200055bc 	.word	0x200055bc

08009164 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009164:	b480      	push	{r7}
 8009166:	b085      	sub	sp, #20
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800916c:	4b28      	ldr	r3, [pc, #160]	@ (8009210 <prvInsertBlockIntoFreeList+0xac>)
 800916e:	60fb      	str	r3, [r7, #12]
 8009170:	e002      	b.n	8009178 <prvInsertBlockIntoFreeList+0x14>
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	429a      	cmp	r2, r3
 8009180:	d8f7      	bhi.n	8009172 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	4413      	add	r3, r2
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	429a      	cmp	r2, r3
 8009192:	d108      	bne.n	80091a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	441a      	add	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	441a      	add	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d118      	bne.n	80091ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	4b15      	ldr	r3, [pc, #84]	@ (8009214 <prvInsertBlockIntoFreeList+0xb0>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d00d      	beq.n	80091e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	441a      	add	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	601a      	str	r2, [r3, #0]
 80091e0:	e008      	b.n	80091f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009214 <prvInsertBlockIntoFreeList+0xb0>)
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	601a      	str	r2, [r3, #0]
 80091ea:	e003      	b.n	80091f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d002      	beq.n	8009202 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009202:	bf00      	nop
 8009204:	3714      	adds	r7, #20
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	200055a0 	.word	0x200055a0
 8009214:	200055a8 	.word	0x200055a8

08009218 <sniprintf>:
 8009218:	b40c      	push	{r2, r3}
 800921a:	b530      	push	{r4, r5, lr}
 800921c:	4b17      	ldr	r3, [pc, #92]	@ (800927c <sniprintf+0x64>)
 800921e:	1e0c      	subs	r4, r1, #0
 8009220:	681d      	ldr	r5, [r3, #0]
 8009222:	b09d      	sub	sp, #116	@ 0x74
 8009224:	da08      	bge.n	8009238 <sniprintf+0x20>
 8009226:	238b      	movs	r3, #139	@ 0x8b
 8009228:	602b      	str	r3, [r5, #0]
 800922a:	f04f 30ff 	mov.w	r0, #4294967295
 800922e:	b01d      	add	sp, #116	@ 0x74
 8009230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009234:	b002      	add	sp, #8
 8009236:	4770      	bx	lr
 8009238:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800923c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009240:	bf14      	ite	ne
 8009242:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009246:	4623      	moveq	r3, r4
 8009248:	9304      	str	r3, [sp, #16]
 800924a:	9307      	str	r3, [sp, #28]
 800924c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009250:	9002      	str	r0, [sp, #8]
 8009252:	9006      	str	r0, [sp, #24]
 8009254:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009258:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800925a:	ab21      	add	r3, sp, #132	@ 0x84
 800925c:	a902      	add	r1, sp, #8
 800925e:	4628      	mov	r0, r5
 8009260:	9301      	str	r3, [sp, #4]
 8009262:	f000 f9f9 	bl	8009658 <_svfiprintf_r>
 8009266:	1c43      	adds	r3, r0, #1
 8009268:	bfbc      	itt	lt
 800926a:	238b      	movlt	r3, #139	@ 0x8b
 800926c:	602b      	strlt	r3, [r5, #0]
 800926e:	2c00      	cmp	r4, #0
 8009270:	d0dd      	beq.n	800922e <sniprintf+0x16>
 8009272:	9b02      	ldr	r3, [sp, #8]
 8009274:	2200      	movs	r2, #0
 8009276:	701a      	strb	r2, [r3, #0]
 8009278:	e7d9      	b.n	800922e <sniprintf+0x16>
 800927a:	bf00      	nop
 800927c:	20000024 	.word	0x20000024

08009280 <memset>:
 8009280:	4402      	add	r2, r0
 8009282:	4603      	mov	r3, r0
 8009284:	4293      	cmp	r3, r2
 8009286:	d100      	bne.n	800928a <memset+0xa>
 8009288:	4770      	bx	lr
 800928a:	f803 1b01 	strb.w	r1, [r3], #1
 800928e:	e7f9      	b.n	8009284 <memset+0x4>

08009290 <_reclaim_reent>:
 8009290:	4b29      	ldr	r3, [pc, #164]	@ (8009338 <_reclaim_reent+0xa8>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4283      	cmp	r3, r0
 8009296:	b570      	push	{r4, r5, r6, lr}
 8009298:	4604      	mov	r4, r0
 800929a:	d04b      	beq.n	8009334 <_reclaim_reent+0xa4>
 800929c:	69c3      	ldr	r3, [r0, #28]
 800929e:	b1ab      	cbz	r3, 80092cc <_reclaim_reent+0x3c>
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	b16b      	cbz	r3, 80092c0 <_reclaim_reent+0x30>
 80092a4:	2500      	movs	r5, #0
 80092a6:	69e3      	ldr	r3, [r4, #28]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	5959      	ldr	r1, [r3, r5]
 80092ac:	2900      	cmp	r1, #0
 80092ae:	d13b      	bne.n	8009328 <_reclaim_reent+0x98>
 80092b0:	3504      	adds	r5, #4
 80092b2:	2d80      	cmp	r5, #128	@ 0x80
 80092b4:	d1f7      	bne.n	80092a6 <_reclaim_reent+0x16>
 80092b6:	69e3      	ldr	r3, [r4, #28]
 80092b8:	4620      	mov	r0, r4
 80092ba:	68d9      	ldr	r1, [r3, #12]
 80092bc:	f000 f878 	bl	80093b0 <_free_r>
 80092c0:	69e3      	ldr	r3, [r4, #28]
 80092c2:	6819      	ldr	r1, [r3, #0]
 80092c4:	b111      	cbz	r1, 80092cc <_reclaim_reent+0x3c>
 80092c6:	4620      	mov	r0, r4
 80092c8:	f000 f872 	bl	80093b0 <_free_r>
 80092cc:	6961      	ldr	r1, [r4, #20]
 80092ce:	b111      	cbz	r1, 80092d6 <_reclaim_reent+0x46>
 80092d0:	4620      	mov	r0, r4
 80092d2:	f000 f86d 	bl	80093b0 <_free_r>
 80092d6:	69e1      	ldr	r1, [r4, #28]
 80092d8:	b111      	cbz	r1, 80092e0 <_reclaim_reent+0x50>
 80092da:	4620      	mov	r0, r4
 80092dc:	f000 f868 	bl	80093b0 <_free_r>
 80092e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80092e2:	b111      	cbz	r1, 80092ea <_reclaim_reent+0x5a>
 80092e4:	4620      	mov	r0, r4
 80092e6:	f000 f863 	bl	80093b0 <_free_r>
 80092ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092ec:	b111      	cbz	r1, 80092f4 <_reclaim_reent+0x64>
 80092ee:	4620      	mov	r0, r4
 80092f0:	f000 f85e 	bl	80093b0 <_free_r>
 80092f4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80092f6:	b111      	cbz	r1, 80092fe <_reclaim_reent+0x6e>
 80092f8:	4620      	mov	r0, r4
 80092fa:	f000 f859 	bl	80093b0 <_free_r>
 80092fe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009300:	b111      	cbz	r1, 8009308 <_reclaim_reent+0x78>
 8009302:	4620      	mov	r0, r4
 8009304:	f000 f854 	bl	80093b0 <_free_r>
 8009308:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800930a:	b111      	cbz	r1, 8009312 <_reclaim_reent+0x82>
 800930c:	4620      	mov	r0, r4
 800930e:	f000 f84f 	bl	80093b0 <_free_r>
 8009312:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009314:	b111      	cbz	r1, 800931c <_reclaim_reent+0x8c>
 8009316:	4620      	mov	r0, r4
 8009318:	f000 f84a 	bl	80093b0 <_free_r>
 800931c:	6a23      	ldr	r3, [r4, #32]
 800931e:	b14b      	cbz	r3, 8009334 <_reclaim_reent+0xa4>
 8009320:	4620      	mov	r0, r4
 8009322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009326:	4718      	bx	r3
 8009328:	680e      	ldr	r6, [r1, #0]
 800932a:	4620      	mov	r0, r4
 800932c:	f000 f840 	bl	80093b0 <_free_r>
 8009330:	4631      	mov	r1, r6
 8009332:	e7bb      	b.n	80092ac <_reclaim_reent+0x1c>
 8009334:	bd70      	pop	{r4, r5, r6, pc}
 8009336:	bf00      	nop
 8009338:	20000024 	.word	0x20000024

0800933c <__errno>:
 800933c:	4b01      	ldr	r3, [pc, #4]	@ (8009344 <__errno+0x8>)
 800933e:	6818      	ldr	r0, [r3, #0]
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	20000024 	.word	0x20000024

08009348 <__libc_init_array>:
 8009348:	b570      	push	{r4, r5, r6, lr}
 800934a:	4d0d      	ldr	r5, [pc, #52]	@ (8009380 <__libc_init_array+0x38>)
 800934c:	4c0d      	ldr	r4, [pc, #52]	@ (8009384 <__libc_init_array+0x3c>)
 800934e:	1b64      	subs	r4, r4, r5
 8009350:	10a4      	asrs	r4, r4, #2
 8009352:	2600      	movs	r6, #0
 8009354:	42a6      	cmp	r6, r4
 8009356:	d109      	bne.n	800936c <__libc_init_array+0x24>
 8009358:	4d0b      	ldr	r5, [pc, #44]	@ (8009388 <__libc_init_array+0x40>)
 800935a:	4c0c      	ldr	r4, [pc, #48]	@ (800938c <__libc_init_array+0x44>)
 800935c:	f001 fc98 	bl	800ac90 <_init>
 8009360:	1b64      	subs	r4, r4, r5
 8009362:	10a4      	asrs	r4, r4, #2
 8009364:	2600      	movs	r6, #0
 8009366:	42a6      	cmp	r6, r4
 8009368:	d105      	bne.n	8009376 <__libc_init_array+0x2e>
 800936a:	bd70      	pop	{r4, r5, r6, pc}
 800936c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009370:	4798      	blx	r3
 8009372:	3601      	adds	r6, #1
 8009374:	e7ee      	b.n	8009354 <__libc_init_array+0xc>
 8009376:	f855 3b04 	ldr.w	r3, [r5], #4
 800937a:	4798      	blx	r3
 800937c:	3601      	adds	r6, #1
 800937e:	e7f2      	b.n	8009366 <__libc_init_array+0x1e>
 8009380:	0800d188 	.word	0x0800d188
 8009384:	0800d188 	.word	0x0800d188
 8009388:	0800d188 	.word	0x0800d188
 800938c:	0800d18c 	.word	0x0800d18c

08009390 <__retarget_lock_acquire_recursive>:
 8009390:	4770      	bx	lr

08009392 <__retarget_lock_release_recursive>:
 8009392:	4770      	bx	lr

08009394 <memcpy>:
 8009394:	440a      	add	r2, r1
 8009396:	4291      	cmp	r1, r2
 8009398:	f100 33ff 	add.w	r3, r0, #4294967295
 800939c:	d100      	bne.n	80093a0 <memcpy+0xc>
 800939e:	4770      	bx	lr
 80093a0:	b510      	push	{r4, lr}
 80093a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093aa:	4291      	cmp	r1, r2
 80093ac:	d1f9      	bne.n	80093a2 <memcpy+0xe>
 80093ae:	bd10      	pop	{r4, pc}

080093b0 <_free_r>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	4605      	mov	r5, r0
 80093b4:	2900      	cmp	r1, #0
 80093b6:	d041      	beq.n	800943c <_free_r+0x8c>
 80093b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093bc:	1f0c      	subs	r4, r1, #4
 80093be:	2b00      	cmp	r3, #0
 80093c0:	bfb8      	it	lt
 80093c2:	18e4      	addlt	r4, r4, r3
 80093c4:	f000 f8e0 	bl	8009588 <__malloc_lock>
 80093c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009440 <_free_r+0x90>)
 80093ca:	6813      	ldr	r3, [r2, #0]
 80093cc:	b933      	cbnz	r3, 80093dc <_free_r+0x2c>
 80093ce:	6063      	str	r3, [r4, #4]
 80093d0:	6014      	str	r4, [r2, #0]
 80093d2:	4628      	mov	r0, r5
 80093d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093d8:	f000 b8dc 	b.w	8009594 <__malloc_unlock>
 80093dc:	42a3      	cmp	r3, r4
 80093de:	d908      	bls.n	80093f2 <_free_r+0x42>
 80093e0:	6820      	ldr	r0, [r4, #0]
 80093e2:	1821      	adds	r1, r4, r0
 80093e4:	428b      	cmp	r3, r1
 80093e6:	bf01      	itttt	eq
 80093e8:	6819      	ldreq	r1, [r3, #0]
 80093ea:	685b      	ldreq	r3, [r3, #4]
 80093ec:	1809      	addeq	r1, r1, r0
 80093ee:	6021      	streq	r1, [r4, #0]
 80093f0:	e7ed      	b.n	80093ce <_free_r+0x1e>
 80093f2:	461a      	mov	r2, r3
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	b10b      	cbz	r3, 80093fc <_free_r+0x4c>
 80093f8:	42a3      	cmp	r3, r4
 80093fa:	d9fa      	bls.n	80093f2 <_free_r+0x42>
 80093fc:	6811      	ldr	r1, [r2, #0]
 80093fe:	1850      	adds	r0, r2, r1
 8009400:	42a0      	cmp	r0, r4
 8009402:	d10b      	bne.n	800941c <_free_r+0x6c>
 8009404:	6820      	ldr	r0, [r4, #0]
 8009406:	4401      	add	r1, r0
 8009408:	1850      	adds	r0, r2, r1
 800940a:	4283      	cmp	r3, r0
 800940c:	6011      	str	r1, [r2, #0]
 800940e:	d1e0      	bne.n	80093d2 <_free_r+0x22>
 8009410:	6818      	ldr	r0, [r3, #0]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	6053      	str	r3, [r2, #4]
 8009416:	4408      	add	r0, r1
 8009418:	6010      	str	r0, [r2, #0]
 800941a:	e7da      	b.n	80093d2 <_free_r+0x22>
 800941c:	d902      	bls.n	8009424 <_free_r+0x74>
 800941e:	230c      	movs	r3, #12
 8009420:	602b      	str	r3, [r5, #0]
 8009422:	e7d6      	b.n	80093d2 <_free_r+0x22>
 8009424:	6820      	ldr	r0, [r4, #0]
 8009426:	1821      	adds	r1, r4, r0
 8009428:	428b      	cmp	r3, r1
 800942a:	bf04      	itt	eq
 800942c:	6819      	ldreq	r1, [r3, #0]
 800942e:	685b      	ldreq	r3, [r3, #4]
 8009430:	6063      	str	r3, [r4, #4]
 8009432:	bf04      	itt	eq
 8009434:	1809      	addeq	r1, r1, r0
 8009436:	6021      	streq	r1, [r4, #0]
 8009438:	6054      	str	r4, [r2, #4]
 800943a:	e7ca      	b.n	80093d2 <_free_r+0x22>
 800943c:	bd38      	pop	{r3, r4, r5, pc}
 800943e:	bf00      	nop
 8009440:	20005704 	.word	0x20005704

08009444 <sbrk_aligned>:
 8009444:	b570      	push	{r4, r5, r6, lr}
 8009446:	4e0f      	ldr	r6, [pc, #60]	@ (8009484 <sbrk_aligned+0x40>)
 8009448:	460c      	mov	r4, r1
 800944a:	6831      	ldr	r1, [r6, #0]
 800944c:	4605      	mov	r5, r0
 800944e:	b911      	cbnz	r1, 8009456 <sbrk_aligned+0x12>
 8009450:	f000 fba6 	bl	8009ba0 <_sbrk_r>
 8009454:	6030      	str	r0, [r6, #0]
 8009456:	4621      	mov	r1, r4
 8009458:	4628      	mov	r0, r5
 800945a:	f000 fba1 	bl	8009ba0 <_sbrk_r>
 800945e:	1c43      	adds	r3, r0, #1
 8009460:	d103      	bne.n	800946a <sbrk_aligned+0x26>
 8009462:	f04f 34ff 	mov.w	r4, #4294967295
 8009466:	4620      	mov	r0, r4
 8009468:	bd70      	pop	{r4, r5, r6, pc}
 800946a:	1cc4      	adds	r4, r0, #3
 800946c:	f024 0403 	bic.w	r4, r4, #3
 8009470:	42a0      	cmp	r0, r4
 8009472:	d0f8      	beq.n	8009466 <sbrk_aligned+0x22>
 8009474:	1a21      	subs	r1, r4, r0
 8009476:	4628      	mov	r0, r5
 8009478:	f000 fb92 	bl	8009ba0 <_sbrk_r>
 800947c:	3001      	adds	r0, #1
 800947e:	d1f2      	bne.n	8009466 <sbrk_aligned+0x22>
 8009480:	e7ef      	b.n	8009462 <sbrk_aligned+0x1e>
 8009482:	bf00      	nop
 8009484:	20005700 	.word	0x20005700

08009488 <_malloc_r>:
 8009488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800948c:	1ccd      	adds	r5, r1, #3
 800948e:	f025 0503 	bic.w	r5, r5, #3
 8009492:	3508      	adds	r5, #8
 8009494:	2d0c      	cmp	r5, #12
 8009496:	bf38      	it	cc
 8009498:	250c      	movcc	r5, #12
 800949a:	2d00      	cmp	r5, #0
 800949c:	4606      	mov	r6, r0
 800949e:	db01      	blt.n	80094a4 <_malloc_r+0x1c>
 80094a0:	42a9      	cmp	r1, r5
 80094a2:	d904      	bls.n	80094ae <_malloc_r+0x26>
 80094a4:	230c      	movs	r3, #12
 80094a6:	6033      	str	r3, [r6, #0]
 80094a8:	2000      	movs	r0, #0
 80094aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009584 <_malloc_r+0xfc>
 80094b2:	f000 f869 	bl	8009588 <__malloc_lock>
 80094b6:	f8d8 3000 	ldr.w	r3, [r8]
 80094ba:	461c      	mov	r4, r3
 80094bc:	bb44      	cbnz	r4, 8009510 <_malloc_r+0x88>
 80094be:	4629      	mov	r1, r5
 80094c0:	4630      	mov	r0, r6
 80094c2:	f7ff ffbf 	bl	8009444 <sbrk_aligned>
 80094c6:	1c43      	adds	r3, r0, #1
 80094c8:	4604      	mov	r4, r0
 80094ca:	d158      	bne.n	800957e <_malloc_r+0xf6>
 80094cc:	f8d8 4000 	ldr.w	r4, [r8]
 80094d0:	4627      	mov	r7, r4
 80094d2:	2f00      	cmp	r7, #0
 80094d4:	d143      	bne.n	800955e <_malloc_r+0xd6>
 80094d6:	2c00      	cmp	r4, #0
 80094d8:	d04b      	beq.n	8009572 <_malloc_r+0xea>
 80094da:	6823      	ldr	r3, [r4, #0]
 80094dc:	4639      	mov	r1, r7
 80094de:	4630      	mov	r0, r6
 80094e0:	eb04 0903 	add.w	r9, r4, r3
 80094e4:	f000 fb5c 	bl	8009ba0 <_sbrk_r>
 80094e8:	4581      	cmp	r9, r0
 80094ea:	d142      	bne.n	8009572 <_malloc_r+0xea>
 80094ec:	6821      	ldr	r1, [r4, #0]
 80094ee:	1a6d      	subs	r5, r5, r1
 80094f0:	4629      	mov	r1, r5
 80094f2:	4630      	mov	r0, r6
 80094f4:	f7ff ffa6 	bl	8009444 <sbrk_aligned>
 80094f8:	3001      	adds	r0, #1
 80094fa:	d03a      	beq.n	8009572 <_malloc_r+0xea>
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	442b      	add	r3, r5
 8009500:	6023      	str	r3, [r4, #0]
 8009502:	f8d8 3000 	ldr.w	r3, [r8]
 8009506:	685a      	ldr	r2, [r3, #4]
 8009508:	bb62      	cbnz	r2, 8009564 <_malloc_r+0xdc>
 800950a:	f8c8 7000 	str.w	r7, [r8]
 800950e:	e00f      	b.n	8009530 <_malloc_r+0xa8>
 8009510:	6822      	ldr	r2, [r4, #0]
 8009512:	1b52      	subs	r2, r2, r5
 8009514:	d420      	bmi.n	8009558 <_malloc_r+0xd0>
 8009516:	2a0b      	cmp	r2, #11
 8009518:	d917      	bls.n	800954a <_malloc_r+0xc2>
 800951a:	1961      	adds	r1, r4, r5
 800951c:	42a3      	cmp	r3, r4
 800951e:	6025      	str	r5, [r4, #0]
 8009520:	bf18      	it	ne
 8009522:	6059      	strne	r1, [r3, #4]
 8009524:	6863      	ldr	r3, [r4, #4]
 8009526:	bf08      	it	eq
 8009528:	f8c8 1000 	streq.w	r1, [r8]
 800952c:	5162      	str	r2, [r4, r5]
 800952e:	604b      	str	r3, [r1, #4]
 8009530:	4630      	mov	r0, r6
 8009532:	f000 f82f 	bl	8009594 <__malloc_unlock>
 8009536:	f104 000b 	add.w	r0, r4, #11
 800953a:	1d23      	adds	r3, r4, #4
 800953c:	f020 0007 	bic.w	r0, r0, #7
 8009540:	1ac2      	subs	r2, r0, r3
 8009542:	bf1c      	itt	ne
 8009544:	1a1b      	subne	r3, r3, r0
 8009546:	50a3      	strne	r3, [r4, r2]
 8009548:	e7af      	b.n	80094aa <_malloc_r+0x22>
 800954a:	6862      	ldr	r2, [r4, #4]
 800954c:	42a3      	cmp	r3, r4
 800954e:	bf0c      	ite	eq
 8009550:	f8c8 2000 	streq.w	r2, [r8]
 8009554:	605a      	strne	r2, [r3, #4]
 8009556:	e7eb      	b.n	8009530 <_malloc_r+0xa8>
 8009558:	4623      	mov	r3, r4
 800955a:	6864      	ldr	r4, [r4, #4]
 800955c:	e7ae      	b.n	80094bc <_malloc_r+0x34>
 800955e:	463c      	mov	r4, r7
 8009560:	687f      	ldr	r7, [r7, #4]
 8009562:	e7b6      	b.n	80094d2 <_malloc_r+0x4a>
 8009564:	461a      	mov	r2, r3
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	42a3      	cmp	r3, r4
 800956a:	d1fb      	bne.n	8009564 <_malloc_r+0xdc>
 800956c:	2300      	movs	r3, #0
 800956e:	6053      	str	r3, [r2, #4]
 8009570:	e7de      	b.n	8009530 <_malloc_r+0xa8>
 8009572:	230c      	movs	r3, #12
 8009574:	6033      	str	r3, [r6, #0]
 8009576:	4630      	mov	r0, r6
 8009578:	f000 f80c 	bl	8009594 <__malloc_unlock>
 800957c:	e794      	b.n	80094a8 <_malloc_r+0x20>
 800957e:	6005      	str	r5, [r0, #0]
 8009580:	e7d6      	b.n	8009530 <_malloc_r+0xa8>
 8009582:	bf00      	nop
 8009584:	20005704 	.word	0x20005704

08009588 <__malloc_lock>:
 8009588:	4801      	ldr	r0, [pc, #4]	@ (8009590 <__malloc_lock+0x8>)
 800958a:	f7ff bf01 	b.w	8009390 <__retarget_lock_acquire_recursive>
 800958e:	bf00      	nop
 8009590:	200056fc 	.word	0x200056fc

08009594 <__malloc_unlock>:
 8009594:	4801      	ldr	r0, [pc, #4]	@ (800959c <__malloc_unlock+0x8>)
 8009596:	f7ff befc 	b.w	8009392 <__retarget_lock_release_recursive>
 800959a:	bf00      	nop
 800959c:	200056fc 	.word	0x200056fc

080095a0 <__ssputs_r>:
 80095a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095a4:	688e      	ldr	r6, [r1, #8]
 80095a6:	461f      	mov	r7, r3
 80095a8:	42be      	cmp	r6, r7
 80095aa:	680b      	ldr	r3, [r1, #0]
 80095ac:	4682      	mov	sl, r0
 80095ae:	460c      	mov	r4, r1
 80095b0:	4690      	mov	r8, r2
 80095b2:	d82d      	bhi.n	8009610 <__ssputs_r+0x70>
 80095b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80095bc:	d026      	beq.n	800960c <__ssputs_r+0x6c>
 80095be:	6965      	ldr	r5, [r4, #20]
 80095c0:	6909      	ldr	r1, [r1, #16]
 80095c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095c6:	eba3 0901 	sub.w	r9, r3, r1
 80095ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095ce:	1c7b      	adds	r3, r7, #1
 80095d0:	444b      	add	r3, r9
 80095d2:	106d      	asrs	r5, r5, #1
 80095d4:	429d      	cmp	r5, r3
 80095d6:	bf38      	it	cc
 80095d8:	461d      	movcc	r5, r3
 80095da:	0553      	lsls	r3, r2, #21
 80095dc:	d527      	bpl.n	800962e <__ssputs_r+0x8e>
 80095de:	4629      	mov	r1, r5
 80095e0:	f7ff ff52 	bl	8009488 <_malloc_r>
 80095e4:	4606      	mov	r6, r0
 80095e6:	b360      	cbz	r0, 8009642 <__ssputs_r+0xa2>
 80095e8:	6921      	ldr	r1, [r4, #16]
 80095ea:	464a      	mov	r2, r9
 80095ec:	f7ff fed2 	bl	8009394 <memcpy>
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80095f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095fa:	81a3      	strh	r3, [r4, #12]
 80095fc:	6126      	str	r6, [r4, #16]
 80095fe:	6165      	str	r5, [r4, #20]
 8009600:	444e      	add	r6, r9
 8009602:	eba5 0509 	sub.w	r5, r5, r9
 8009606:	6026      	str	r6, [r4, #0]
 8009608:	60a5      	str	r5, [r4, #8]
 800960a:	463e      	mov	r6, r7
 800960c:	42be      	cmp	r6, r7
 800960e:	d900      	bls.n	8009612 <__ssputs_r+0x72>
 8009610:	463e      	mov	r6, r7
 8009612:	6820      	ldr	r0, [r4, #0]
 8009614:	4632      	mov	r2, r6
 8009616:	4641      	mov	r1, r8
 8009618:	f000 faa8 	bl	8009b6c <memmove>
 800961c:	68a3      	ldr	r3, [r4, #8]
 800961e:	1b9b      	subs	r3, r3, r6
 8009620:	60a3      	str	r3, [r4, #8]
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	4433      	add	r3, r6
 8009626:	6023      	str	r3, [r4, #0]
 8009628:	2000      	movs	r0, #0
 800962a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800962e:	462a      	mov	r2, r5
 8009630:	f000 fac6 	bl	8009bc0 <_realloc_r>
 8009634:	4606      	mov	r6, r0
 8009636:	2800      	cmp	r0, #0
 8009638:	d1e0      	bne.n	80095fc <__ssputs_r+0x5c>
 800963a:	6921      	ldr	r1, [r4, #16]
 800963c:	4650      	mov	r0, sl
 800963e:	f7ff feb7 	bl	80093b0 <_free_r>
 8009642:	230c      	movs	r3, #12
 8009644:	f8ca 3000 	str.w	r3, [sl]
 8009648:	89a3      	ldrh	r3, [r4, #12]
 800964a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800964e:	81a3      	strh	r3, [r4, #12]
 8009650:	f04f 30ff 	mov.w	r0, #4294967295
 8009654:	e7e9      	b.n	800962a <__ssputs_r+0x8a>
	...

08009658 <_svfiprintf_r>:
 8009658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800965c:	4698      	mov	r8, r3
 800965e:	898b      	ldrh	r3, [r1, #12]
 8009660:	061b      	lsls	r3, r3, #24
 8009662:	b09d      	sub	sp, #116	@ 0x74
 8009664:	4607      	mov	r7, r0
 8009666:	460d      	mov	r5, r1
 8009668:	4614      	mov	r4, r2
 800966a:	d510      	bpl.n	800968e <_svfiprintf_r+0x36>
 800966c:	690b      	ldr	r3, [r1, #16]
 800966e:	b973      	cbnz	r3, 800968e <_svfiprintf_r+0x36>
 8009670:	2140      	movs	r1, #64	@ 0x40
 8009672:	f7ff ff09 	bl	8009488 <_malloc_r>
 8009676:	6028      	str	r0, [r5, #0]
 8009678:	6128      	str	r0, [r5, #16]
 800967a:	b930      	cbnz	r0, 800968a <_svfiprintf_r+0x32>
 800967c:	230c      	movs	r3, #12
 800967e:	603b      	str	r3, [r7, #0]
 8009680:	f04f 30ff 	mov.w	r0, #4294967295
 8009684:	b01d      	add	sp, #116	@ 0x74
 8009686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800968a:	2340      	movs	r3, #64	@ 0x40
 800968c:	616b      	str	r3, [r5, #20]
 800968e:	2300      	movs	r3, #0
 8009690:	9309      	str	r3, [sp, #36]	@ 0x24
 8009692:	2320      	movs	r3, #32
 8009694:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009698:	f8cd 800c 	str.w	r8, [sp, #12]
 800969c:	2330      	movs	r3, #48	@ 0x30
 800969e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800983c <_svfiprintf_r+0x1e4>
 80096a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096a6:	f04f 0901 	mov.w	r9, #1
 80096aa:	4623      	mov	r3, r4
 80096ac:	469a      	mov	sl, r3
 80096ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096b2:	b10a      	cbz	r2, 80096b8 <_svfiprintf_r+0x60>
 80096b4:	2a25      	cmp	r2, #37	@ 0x25
 80096b6:	d1f9      	bne.n	80096ac <_svfiprintf_r+0x54>
 80096b8:	ebba 0b04 	subs.w	fp, sl, r4
 80096bc:	d00b      	beq.n	80096d6 <_svfiprintf_r+0x7e>
 80096be:	465b      	mov	r3, fp
 80096c0:	4622      	mov	r2, r4
 80096c2:	4629      	mov	r1, r5
 80096c4:	4638      	mov	r0, r7
 80096c6:	f7ff ff6b 	bl	80095a0 <__ssputs_r>
 80096ca:	3001      	adds	r0, #1
 80096cc:	f000 80a7 	beq.w	800981e <_svfiprintf_r+0x1c6>
 80096d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096d2:	445a      	add	r2, fp
 80096d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80096d6:	f89a 3000 	ldrb.w	r3, [sl]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f000 809f 	beq.w	800981e <_svfiprintf_r+0x1c6>
 80096e0:	2300      	movs	r3, #0
 80096e2:	f04f 32ff 	mov.w	r2, #4294967295
 80096e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096ea:	f10a 0a01 	add.w	sl, sl, #1
 80096ee:	9304      	str	r3, [sp, #16]
 80096f0:	9307      	str	r3, [sp, #28]
 80096f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80096f8:	4654      	mov	r4, sl
 80096fa:	2205      	movs	r2, #5
 80096fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009700:	484e      	ldr	r0, [pc, #312]	@ (800983c <_svfiprintf_r+0x1e4>)
 8009702:	f7f6 fd6d 	bl	80001e0 <memchr>
 8009706:	9a04      	ldr	r2, [sp, #16]
 8009708:	b9d8      	cbnz	r0, 8009742 <_svfiprintf_r+0xea>
 800970a:	06d0      	lsls	r0, r2, #27
 800970c:	bf44      	itt	mi
 800970e:	2320      	movmi	r3, #32
 8009710:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009714:	0711      	lsls	r1, r2, #28
 8009716:	bf44      	itt	mi
 8009718:	232b      	movmi	r3, #43	@ 0x2b
 800971a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800971e:	f89a 3000 	ldrb.w	r3, [sl]
 8009722:	2b2a      	cmp	r3, #42	@ 0x2a
 8009724:	d015      	beq.n	8009752 <_svfiprintf_r+0xfa>
 8009726:	9a07      	ldr	r2, [sp, #28]
 8009728:	4654      	mov	r4, sl
 800972a:	2000      	movs	r0, #0
 800972c:	f04f 0c0a 	mov.w	ip, #10
 8009730:	4621      	mov	r1, r4
 8009732:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009736:	3b30      	subs	r3, #48	@ 0x30
 8009738:	2b09      	cmp	r3, #9
 800973a:	d94b      	bls.n	80097d4 <_svfiprintf_r+0x17c>
 800973c:	b1b0      	cbz	r0, 800976c <_svfiprintf_r+0x114>
 800973e:	9207      	str	r2, [sp, #28]
 8009740:	e014      	b.n	800976c <_svfiprintf_r+0x114>
 8009742:	eba0 0308 	sub.w	r3, r0, r8
 8009746:	fa09 f303 	lsl.w	r3, r9, r3
 800974a:	4313      	orrs	r3, r2
 800974c:	9304      	str	r3, [sp, #16]
 800974e:	46a2      	mov	sl, r4
 8009750:	e7d2      	b.n	80096f8 <_svfiprintf_r+0xa0>
 8009752:	9b03      	ldr	r3, [sp, #12]
 8009754:	1d19      	adds	r1, r3, #4
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	9103      	str	r1, [sp, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	bfbb      	ittet	lt
 800975e:	425b      	neglt	r3, r3
 8009760:	f042 0202 	orrlt.w	r2, r2, #2
 8009764:	9307      	strge	r3, [sp, #28]
 8009766:	9307      	strlt	r3, [sp, #28]
 8009768:	bfb8      	it	lt
 800976a:	9204      	strlt	r2, [sp, #16]
 800976c:	7823      	ldrb	r3, [r4, #0]
 800976e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009770:	d10a      	bne.n	8009788 <_svfiprintf_r+0x130>
 8009772:	7863      	ldrb	r3, [r4, #1]
 8009774:	2b2a      	cmp	r3, #42	@ 0x2a
 8009776:	d132      	bne.n	80097de <_svfiprintf_r+0x186>
 8009778:	9b03      	ldr	r3, [sp, #12]
 800977a:	1d1a      	adds	r2, r3, #4
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	9203      	str	r2, [sp, #12]
 8009780:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009784:	3402      	adds	r4, #2
 8009786:	9305      	str	r3, [sp, #20]
 8009788:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800984c <_svfiprintf_r+0x1f4>
 800978c:	7821      	ldrb	r1, [r4, #0]
 800978e:	2203      	movs	r2, #3
 8009790:	4650      	mov	r0, sl
 8009792:	f7f6 fd25 	bl	80001e0 <memchr>
 8009796:	b138      	cbz	r0, 80097a8 <_svfiprintf_r+0x150>
 8009798:	9b04      	ldr	r3, [sp, #16]
 800979a:	eba0 000a 	sub.w	r0, r0, sl
 800979e:	2240      	movs	r2, #64	@ 0x40
 80097a0:	4082      	lsls	r2, r0
 80097a2:	4313      	orrs	r3, r2
 80097a4:	3401      	adds	r4, #1
 80097a6:	9304      	str	r3, [sp, #16]
 80097a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097ac:	4824      	ldr	r0, [pc, #144]	@ (8009840 <_svfiprintf_r+0x1e8>)
 80097ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097b2:	2206      	movs	r2, #6
 80097b4:	f7f6 fd14 	bl	80001e0 <memchr>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d036      	beq.n	800982a <_svfiprintf_r+0x1d2>
 80097bc:	4b21      	ldr	r3, [pc, #132]	@ (8009844 <_svfiprintf_r+0x1ec>)
 80097be:	bb1b      	cbnz	r3, 8009808 <_svfiprintf_r+0x1b0>
 80097c0:	9b03      	ldr	r3, [sp, #12]
 80097c2:	3307      	adds	r3, #7
 80097c4:	f023 0307 	bic.w	r3, r3, #7
 80097c8:	3308      	adds	r3, #8
 80097ca:	9303      	str	r3, [sp, #12]
 80097cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097ce:	4433      	add	r3, r6
 80097d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80097d2:	e76a      	b.n	80096aa <_svfiprintf_r+0x52>
 80097d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80097d8:	460c      	mov	r4, r1
 80097da:	2001      	movs	r0, #1
 80097dc:	e7a8      	b.n	8009730 <_svfiprintf_r+0xd8>
 80097de:	2300      	movs	r3, #0
 80097e0:	3401      	adds	r4, #1
 80097e2:	9305      	str	r3, [sp, #20]
 80097e4:	4619      	mov	r1, r3
 80097e6:	f04f 0c0a 	mov.w	ip, #10
 80097ea:	4620      	mov	r0, r4
 80097ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097f0:	3a30      	subs	r2, #48	@ 0x30
 80097f2:	2a09      	cmp	r2, #9
 80097f4:	d903      	bls.n	80097fe <_svfiprintf_r+0x1a6>
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d0c6      	beq.n	8009788 <_svfiprintf_r+0x130>
 80097fa:	9105      	str	r1, [sp, #20]
 80097fc:	e7c4      	b.n	8009788 <_svfiprintf_r+0x130>
 80097fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009802:	4604      	mov	r4, r0
 8009804:	2301      	movs	r3, #1
 8009806:	e7f0      	b.n	80097ea <_svfiprintf_r+0x192>
 8009808:	ab03      	add	r3, sp, #12
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	462a      	mov	r2, r5
 800980e:	4b0e      	ldr	r3, [pc, #56]	@ (8009848 <_svfiprintf_r+0x1f0>)
 8009810:	a904      	add	r1, sp, #16
 8009812:	4638      	mov	r0, r7
 8009814:	f3af 8000 	nop.w
 8009818:	1c42      	adds	r2, r0, #1
 800981a:	4606      	mov	r6, r0
 800981c:	d1d6      	bne.n	80097cc <_svfiprintf_r+0x174>
 800981e:	89ab      	ldrh	r3, [r5, #12]
 8009820:	065b      	lsls	r3, r3, #25
 8009822:	f53f af2d 	bmi.w	8009680 <_svfiprintf_r+0x28>
 8009826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009828:	e72c      	b.n	8009684 <_svfiprintf_r+0x2c>
 800982a:	ab03      	add	r3, sp, #12
 800982c:	9300      	str	r3, [sp, #0]
 800982e:	462a      	mov	r2, r5
 8009830:	4b05      	ldr	r3, [pc, #20]	@ (8009848 <_svfiprintf_r+0x1f0>)
 8009832:	a904      	add	r1, sp, #16
 8009834:	4638      	mov	r0, r7
 8009836:	f000 f879 	bl	800992c <_printf_i>
 800983a:	e7ed      	b.n	8009818 <_svfiprintf_r+0x1c0>
 800983c:	0800cf70 	.word	0x0800cf70
 8009840:	0800cf7a 	.word	0x0800cf7a
 8009844:	00000000 	.word	0x00000000
 8009848:	080095a1 	.word	0x080095a1
 800984c:	0800cf76 	.word	0x0800cf76

08009850 <_printf_common>:
 8009850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009854:	4616      	mov	r6, r2
 8009856:	4698      	mov	r8, r3
 8009858:	688a      	ldr	r2, [r1, #8]
 800985a:	690b      	ldr	r3, [r1, #16]
 800985c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009860:	4293      	cmp	r3, r2
 8009862:	bfb8      	it	lt
 8009864:	4613      	movlt	r3, r2
 8009866:	6033      	str	r3, [r6, #0]
 8009868:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800986c:	4607      	mov	r7, r0
 800986e:	460c      	mov	r4, r1
 8009870:	b10a      	cbz	r2, 8009876 <_printf_common+0x26>
 8009872:	3301      	adds	r3, #1
 8009874:	6033      	str	r3, [r6, #0]
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	0699      	lsls	r1, r3, #26
 800987a:	bf42      	ittt	mi
 800987c:	6833      	ldrmi	r3, [r6, #0]
 800987e:	3302      	addmi	r3, #2
 8009880:	6033      	strmi	r3, [r6, #0]
 8009882:	6825      	ldr	r5, [r4, #0]
 8009884:	f015 0506 	ands.w	r5, r5, #6
 8009888:	d106      	bne.n	8009898 <_printf_common+0x48>
 800988a:	f104 0a19 	add.w	sl, r4, #25
 800988e:	68e3      	ldr	r3, [r4, #12]
 8009890:	6832      	ldr	r2, [r6, #0]
 8009892:	1a9b      	subs	r3, r3, r2
 8009894:	42ab      	cmp	r3, r5
 8009896:	dc26      	bgt.n	80098e6 <_printf_common+0x96>
 8009898:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800989c:	6822      	ldr	r2, [r4, #0]
 800989e:	3b00      	subs	r3, #0
 80098a0:	bf18      	it	ne
 80098a2:	2301      	movne	r3, #1
 80098a4:	0692      	lsls	r2, r2, #26
 80098a6:	d42b      	bmi.n	8009900 <_printf_common+0xb0>
 80098a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80098ac:	4641      	mov	r1, r8
 80098ae:	4638      	mov	r0, r7
 80098b0:	47c8      	blx	r9
 80098b2:	3001      	adds	r0, #1
 80098b4:	d01e      	beq.n	80098f4 <_printf_common+0xa4>
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	6922      	ldr	r2, [r4, #16]
 80098ba:	f003 0306 	and.w	r3, r3, #6
 80098be:	2b04      	cmp	r3, #4
 80098c0:	bf02      	ittt	eq
 80098c2:	68e5      	ldreq	r5, [r4, #12]
 80098c4:	6833      	ldreq	r3, [r6, #0]
 80098c6:	1aed      	subeq	r5, r5, r3
 80098c8:	68a3      	ldr	r3, [r4, #8]
 80098ca:	bf0c      	ite	eq
 80098cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098d0:	2500      	movne	r5, #0
 80098d2:	4293      	cmp	r3, r2
 80098d4:	bfc4      	itt	gt
 80098d6:	1a9b      	subgt	r3, r3, r2
 80098d8:	18ed      	addgt	r5, r5, r3
 80098da:	2600      	movs	r6, #0
 80098dc:	341a      	adds	r4, #26
 80098de:	42b5      	cmp	r5, r6
 80098e0:	d11a      	bne.n	8009918 <_printf_common+0xc8>
 80098e2:	2000      	movs	r0, #0
 80098e4:	e008      	b.n	80098f8 <_printf_common+0xa8>
 80098e6:	2301      	movs	r3, #1
 80098e8:	4652      	mov	r2, sl
 80098ea:	4641      	mov	r1, r8
 80098ec:	4638      	mov	r0, r7
 80098ee:	47c8      	blx	r9
 80098f0:	3001      	adds	r0, #1
 80098f2:	d103      	bne.n	80098fc <_printf_common+0xac>
 80098f4:	f04f 30ff 	mov.w	r0, #4294967295
 80098f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098fc:	3501      	adds	r5, #1
 80098fe:	e7c6      	b.n	800988e <_printf_common+0x3e>
 8009900:	18e1      	adds	r1, r4, r3
 8009902:	1c5a      	adds	r2, r3, #1
 8009904:	2030      	movs	r0, #48	@ 0x30
 8009906:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800990a:	4422      	add	r2, r4
 800990c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009910:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009914:	3302      	adds	r3, #2
 8009916:	e7c7      	b.n	80098a8 <_printf_common+0x58>
 8009918:	2301      	movs	r3, #1
 800991a:	4622      	mov	r2, r4
 800991c:	4641      	mov	r1, r8
 800991e:	4638      	mov	r0, r7
 8009920:	47c8      	blx	r9
 8009922:	3001      	adds	r0, #1
 8009924:	d0e6      	beq.n	80098f4 <_printf_common+0xa4>
 8009926:	3601      	adds	r6, #1
 8009928:	e7d9      	b.n	80098de <_printf_common+0x8e>
	...

0800992c <_printf_i>:
 800992c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009930:	7e0f      	ldrb	r7, [r1, #24]
 8009932:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009934:	2f78      	cmp	r7, #120	@ 0x78
 8009936:	4691      	mov	r9, r2
 8009938:	4680      	mov	r8, r0
 800993a:	460c      	mov	r4, r1
 800993c:	469a      	mov	sl, r3
 800993e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009942:	d807      	bhi.n	8009954 <_printf_i+0x28>
 8009944:	2f62      	cmp	r7, #98	@ 0x62
 8009946:	d80a      	bhi.n	800995e <_printf_i+0x32>
 8009948:	2f00      	cmp	r7, #0
 800994a:	f000 80d2 	beq.w	8009af2 <_printf_i+0x1c6>
 800994e:	2f58      	cmp	r7, #88	@ 0x58
 8009950:	f000 80b9 	beq.w	8009ac6 <_printf_i+0x19a>
 8009954:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009958:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800995c:	e03a      	b.n	80099d4 <_printf_i+0xa8>
 800995e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009962:	2b15      	cmp	r3, #21
 8009964:	d8f6      	bhi.n	8009954 <_printf_i+0x28>
 8009966:	a101      	add	r1, pc, #4	@ (adr r1, 800996c <_printf_i+0x40>)
 8009968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800996c:	080099c5 	.word	0x080099c5
 8009970:	080099d9 	.word	0x080099d9
 8009974:	08009955 	.word	0x08009955
 8009978:	08009955 	.word	0x08009955
 800997c:	08009955 	.word	0x08009955
 8009980:	08009955 	.word	0x08009955
 8009984:	080099d9 	.word	0x080099d9
 8009988:	08009955 	.word	0x08009955
 800998c:	08009955 	.word	0x08009955
 8009990:	08009955 	.word	0x08009955
 8009994:	08009955 	.word	0x08009955
 8009998:	08009ad9 	.word	0x08009ad9
 800999c:	08009a03 	.word	0x08009a03
 80099a0:	08009a93 	.word	0x08009a93
 80099a4:	08009955 	.word	0x08009955
 80099a8:	08009955 	.word	0x08009955
 80099ac:	08009afb 	.word	0x08009afb
 80099b0:	08009955 	.word	0x08009955
 80099b4:	08009a03 	.word	0x08009a03
 80099b8:	08009955 	.word	0x08009955
 80099bc:	08009955 	.word	0x08009955
 80099c0:	08009a9b 	.word	0x08009a9b
 80099c4:	6833      	ldr	r3, [r6, #0]
 80099c6:	1d1a      	adds	r2, r3, #4
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6032      	str	r2, [r6, #0]
 80099cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80099d4:	2301      	movs	r3, #1
 80099d6:	e09d      	b.n	8009b14 <_printf_i+0x1e8>
 80099d8:	6833      	ldr	r3, [r6, #0]
 80099da:	6820      	ldr	r0, [r4, #0]
 80099dc:	1d19      	adds	r1, r3, #4
 80099de:	6031      	str	r1, [r6, #0]
 80099e0:	0606      	lsls	r6, r0, #24
 80099e2:	d501      	bpl.n	80099e8 <_printf_i+0xbc>
 80099e4:	681d      	ldr	r5, [r3, #0]
 80099e6:	e003      	b.n	80099f0 <_printf_i+0xc4>
 80099e8:	0645      	lsls	r5, r0, #25
 80099ea:	d5fb      	bpl.n	80099e4 <_printf_i+0xb8>
 80099ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80099f0:	2d00      	cmp	r5, #0
 80099f2:	da03      	bge.n	80099fc <_printf_i+0xd0>
 80099f4:	232d      	movs	r3, #45	@ 0x2d
 80099f6:	426d      	negs	r5, r5
 80099f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099fc:	4859      	ldr	r0, [pc, #356]	@ (8009b64 <_printf_i+0x238>)
 80099fe:	230a      	movs	r3, #10
 8009a00:	e011      	b.n	8009a26 <_printf_i+0xfa>
 8009a02:	6821      	ldr	r1, [r4, #0]
 8009a04:	6833      	ldr	r3, [r6, #0]
 8009a06:	0608      	lsls	r0, r1, #24
 8009a08:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a0c:	d402      	bmi.n	8009a14 <_printf_i+0xe8>
 8009a0e:	0649      	lsls	r1, r1, #25
 8009a10:	bf48      	it	mi
 8009a12:	b2ad      	uxthmi	r5, r5
 8009a14:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a16:	4853      	ldr	r0, [pc, #332]	@ (8009b64 <_printf_i+0x238>)
 8009a18:	6033      	str	r3, [r6, #0]
 8009a1a:	bf14      	ite	ne
 8009a1c:	230a      	movne	r3, #10
 8009a1e:	2308      	moveq	r3, #8
 8009a20:	2100      	movs	r1, #0
 8009a22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a26:	6866      	ldr	r6, [r4, #4]
 8009a28:	60a6      	str	r6, [r4, #8]
 8009a2a:	2e00      	cmp	r6, #0
 8009a2c:	bfa2      	ittt	ge
 8009a2e:	6821      	ldrge	r1, [r4, #0]
 8009a30:	f021 0104 	bicge.w	r1, r1, #4
 8009a34:	6021      	strge	r1, [r4, #0]
 8009a36:	b90d      	cbnz	r5, 8009a3c <_printf_i+0x110>
 8009a38:	2e00      	cmp	r6, #0
 8009a3a:	d04b      	beq.n	8009ad4 <_printf_i+0x1a8>
 8009a3c:	4616      	mov	r6, r2
 8009a3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a42:	fb03 5711 	mls	r7, r3, r1, r5
 8009a46:	5dc7      	ldrb	r7, [r0, r7]
 8009a48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a4c:	462f      	mov	r7, r5
 8009a4e:	42bb      	cmp	r3, r7
 8009a50:	460d      	mov	r5, r1
 8009a52:	d9f4      	bls.n	8009a3e <_printf_i+0x112>
 8009a54:	2b08      	cmp	r3, #8
 8009a56:	d10b      	bne.n	8009a70 <_printf_i+0x144>
 8009a58:	6823      	ldr	r3, [r4, #0]
 8009a5a:	07df      	lsls	r7, r3, #31
 8009a5c:	d508      	bpl.n	8009a70 <_printf_i+0x144>
 8009a5e:	6923      	ldr	r3, [r4, #16]
 8009a60:	6861      	ldr	r1, [r4, #4]
 8009a62:	4299      	cmp	r1, r3
 8009a64:	bfde      	ittt	le
 8009a66:	2330      	movle	r3, #48	@ 0x30
 8009a68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a70:	1b92      	subs	r2, r2, r6
 8009a72:	6122      	str	r2, [r4, #16]
 8009a74:	f8cd a000 	str.w	sl, [sp]
 8009a78:	464b      	mov	r3, r9
 8009a7a:	aa03      	add	r2, sp, #12
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	4640      	mov	r0, r8
 8009a80:	f7ff fee6 	bl	8009850 <_printf_common>
 8009a84:	3001      	adds	r0, #1
 8009a86:	d14a      	bne.n	8009b1e <_printf_i+0x1f2>
 8009a88:	f04f 30ff 	mov.w	r0, #4294967295
 8009a8c:	b004      	add	sp, #16
 8009a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a92:	6823      	ldr	r3, [r4, #0]
 8009a94:	f043 0320 	orr.w	r3, r3, #32
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	4833      	ldr	r0, [pc, #204]	@ (8009b68 <_printf_i+0x23c>)
 8009a9c:	2778      	movs	r7, #120	@ 0x78
 8009a9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009aa2:	6823      	ldr	r3, [r4, #0]
 8009aa4:	6831      	ldr	r1, [r6, #0]
 8009aa6:	061f      	lsls	r7, r3, #24
 8009aa8:	f851 5b04 	ldr.w	r5, [r1], #4
 8009aac:	d402      	bmi.n	8009ab4 <_printf_i+0x188>
 8009aae:	065f      	lsls	r7, r3, #25
 8009ab0:	bf48      	it	mi
 8009ab2:	b2ad      	uxthmi	r5, r5
 8009ab4:	6031      	str	r1, [r6, #0]
 8009ab6:	07d9      	lsls	r1, r3, #31
 8009ab8:	bf44      	itt	mi
 8009aba:	f043 0320 	orrmi.w	r3, r3, #32
 8009abe:	6023      	strmi	r3, [r4, #0]
 8009ac0:	b11d      	cbz	r5, 8009aca <_printf_i+0x19e>
 8009ac2:	2310      	movs	r3, #16
 8009ac4:	e7ac      	b.n	8009a20 <_printf_i+0xf4>
 8009ac6:	4827      	ldr	r0, [pc, #156]	@ (8009b64 <_printf_i+0x238>)
 8009ac8:	e7e9      	b.n	8009a9e <_printf_i+0x172>
 8009aca:	6823      	ldr	r3, [r4, #0]
 8009acc:	f023 0320 	bic.w	r3, r3, #32
 8009ad0:	6023      	str	r3, [r4, #0]
 8009ad2:	e7f6      	b.n	8009ac2 <_printf_i+0x196>
 8009ad4:	4616      	mov	r6, r2
 8009ad6:	e7bd      	b.n	8009a54 <_printf_i+0x128>
 8009ad8:	6833      	ldr	r3, [r6, #0]
 8009ada:	6825      	ldr	r5, [r4, #0]
 8009adc:	6961      	ldr	r1, [r4, #20]
 8009ade:	1d18      	adds	r0, r3, #4
 8009ae0:	6030      	str	r0, [r6, #0]
 8009ae2:	062e      	lsls	r6, r5, #24
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	d501      	bpl.n	8009aec <_printf_i+0x1c0>
 8009ae8:	6019      	str	r1, [r3, #0]
 8009aea:	e002      	b.n	8009af2 <_printf_i+0x1c6>
 8009aec:	0668      	lsls	r0, r5, #25
 8009aee:	d5fb      	bpl.n	8009ae8 <_printf_i+0x1bc>
 8009af0:	8019      	strh	r1, [r3, #0]
 8009af2:	2300      	movs	r3, #0
 8009af4:	6123      	str	r3, [r4, #16]
 8009af6:	4616      	mov	r6, r2
 8009af8:	e7bc      	b.n	8009a74 <_printf_i+0x148>
 8009afa:	6833      	ldr	r3, [r6, #0]
 8009afc:	1d1a      	adds	r2, r3, #4
 8009afe:	6032      	str	r2, [r6, #0]
 8009b00:	681e      	ldr	r6, [r3, #0]
 8009b02:	6862      	ldr	r2, [r4, #4]
 8009b04:	2100      	movs	r1, #0
 8009b06:	4630      	mov	r0, r6
 8009b08:	f7f6 fb6a 	bl	80001e0 <memchr>
 8009b0c:	b108      	cbz	r0, 8009b12 <_printf_i+0x1e6>
 8009b0e:	1b80      	subs	r0, r0, r6
 8009b10:	6060      	str	r0, [r4, #4]
 8009b12:	6863      	ldr	r3, [r4, #4]
 8009b14:	6123      	str	r3, [r4, #16]
 8009b16:	2300      	movs	r3, #0
 8009b18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b1c:	e7aa      	b.n	8009a74 <_printf_i+0x148>
 8009b1e:	6923      	ldr	r3, [r4, #16]
 8009b20:	4632      	mov	r2, r6
 8009b22:	4649      	mov	r1, r9
 8009b24:	4640      	mov	r0, r8
 8009b26:	47d0      	blx	sl
 8009b28:	3001      	adds	r0, #1
 8009b2a:	d0ad      	beq.n	8009a88 <_printf_i+0x15c>
 8009b2c:	6823      	ldr	r3, [r4, #0]
 8009b2e:	079b      	lsls	r3, r3, #30
 8009b30:	d413      	bmi.n	8009b5a <_printf_i+0x22e>
 8009b32:	68e0      	ldr	r0, [r4, #12]
 8009b34:	9b03      	ldr	r3, [sp, #12]
 8009b36:	4298      	cmp	r0, r3
 8009b38:	bfb8      	it	lt
 8009b3a:	4618      	movlt	r0, r3
 8009b3c:	e7a6      	b.n	8009a8c <_printf_i+0x160>
 8009b3e:	2301      	movs	r3, #1
 8009b40:	4632      	mov	r2, r6
 8009b42:	4649      	mov	r1, r9
 8009b44:	4640      	mov	r0, r8
 8009b46:	47d0      	blx	sl
 8009b48:	3001      	adds	r0, #1
 8009b4a:	d09d      	beq.n	8009a88 <_printf_i+0x15c>
 8009b4c:	3501      	adds	r5, #1
 8009b4e:	68e3      	ldr	r3, [r4, #12]
 8009b50:	9903      	ldr	r1, [sp, #12]
 8009b52:	1a5b      	subs	r3, r3, r1
 8009b54:	42ab      	cmp	r3, r5
 8009b56:	dcf2      	bgt.n	8009b3e <_printf_i+0x212>
 8009b58:	e7eb      	b.n	8009b32 <_printf_i+0x206>
 8009b5a:	2500      	movs	r5, #0
 8009b5c:	f104 0619 	add.w	r6, r4, #25
 8009b60:	e7f5      	b.n	8009b4e <_printf_i+0x222>
 8009b62:	bf00      	nop
 8009b64:	0800cf81 	.word	0x0800cf81
 8009b68:	0800cf92 	.word	0x0800cf92

08009b6c <memmove>:
 8009b6c:	4288      	cmp	r0, r1
 8009b6e:	b510      	push	{r4, lr}
 8009b70:	eb01 0402 	add.w	r4, r1, r2
 8009b74:	d902      	bls.n	8009b7c <memmove+0x10>
 8009b76:	4284      	cmp	r4, r0
 8009b78:	4623      	mov	r3, r4
 8009b7a:	d807      	bhi.n	8009b8c <memmove+0x20>
 8009b7c:	1e43      	subs	r3, r0, #1
 8009b7e:	42a1      	cmp	r1, r4
 8009b80:	d008      	beq.n	8009b94 <memmove+0x28>
 8009b82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b8a:	e7f8      	b.n	8009b7e <memmove+0x12>
 8009b8c:	4402      	add	r2, r0
 8009b8e:	4601      	mov	r1, r0
 8009b90:	428a      	cmp	r2, r1
 8009b92:	d100      	bne.n	8009b96 <memmove+0x2a>
 8009b94:	bd10      	pop	{r4, pc}
 8009b96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b9e:	e7f7      	b.n	8009b90 <memmove+0x24>

08009ba0 <_sbrk_r>:
 8009ba0:	b538      	push	{r3, r4, r5, lr}
 8009ba2:	4d06      	ldr	r5, [pc, #24]	@ (8009bbc <_sbrk_r+0x1c>)
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	4608      	mov	r0, r1
 8009baa:	602b      	str	r3, [r5, #0]
 8009bac:	f7f8 fd0c 	bl	80025c8 <_sbrk>
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	d102      	bne.n	8009bba <_sbrk_r+0x1a>
 8009bb4:	682b      	ldr	r3, [r5, #0]
 8009bb6:	b103      	cbz	r3, 8009bba <_sbrk_r+0x1a>
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	bd38      	pop	{r3, r4, r5, pc}
 8009bbc:	200056f8 	.word	0x200056f8

08009bc0 <_realloc_r>:
 8009bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc4:	4680      	mov	r8, r0
 8009bc6:	4615      	mov	r5, r2
 8009bc8:	460c      	mov	r4, r1
 8009bca:	b921      	cbnz	r1, 8009bd6 <_realloc_r+0x16>
 8009bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd0:	4611      	mov	r1, r2
 8009bd2:	f7ff bc59 	b.w	8009488 <_malloc_r>
 8009bd6:	b92a      	cbnz	r2, 8009be4 <_realloc_r+0x24>
 8009bd8:	f7ff fbea 	bl	80093b0 <_free_r>
 8009bdc:	2400      	movs	r4, #0
 8009bde:	4620      	mov	r0, r4
 8009be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009be4:	f000 f81a 	bl	8009c1c <_malloc_usable_size_r>
 8009be8:	4285      	cmp	r5, r0
 8009bea:	4606      	mov	r6, r0
 8009bec:	d802      	bhi.n	8009bf4 <_realloc_r+0x34>
 8009bee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009bf2:	d8f4      	bhi.n	8009bde <_realloc_r+0x1e>
 8009bf4:	4629      	mov	r1, r5
 8009bf6:	4640      	mov	r0, r8
 8009bf8:	f7ff fc46 	bl	8009488 <_malloc_r>
 8009bfc:	4607      	mov	r7, r0
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d0ec      	beq.n	8009bdc <_realloc_r+0x1c>
 8009c02:	42b5      	cmp	r5, r6
 8009c04:	462a      	mov	r2, r5
 8009c06:	4621      	mov	r1, r4
 8009c08:	bf28      	it	cs
 8009c0a:	4632      	movcs	r2, r6
 8009c0c:	f7ff fbc2 	bl	8009394 <memcpy>
 8009c10:	4621      	mov	r1, r4
 8009c12:	4640      	mov	r0, r8
 8009c14:	f7ff fbcc 	bl	80093b0 <_free_r>
 8009c18:	463c      	mov	r4, r7
 8009c1a:	e7e0      	b.n	8009bde <_realloc_r+0x1e>

08009c1c <_malloc_usable_size_r>:
 8009c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c20:	1f18      	subs	r0, r3, #4
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	bfbc      	itt	lt
 8009c26:	580b      	ldrlt	r3, [r1, r0]
 8009c28:	18c0      	addlt	r0, r0, r3
 8009c2a:	4770      	bx	lr
 8009c2c:	0000      	movs	r0, r0
	...

08009c30 <sin>:
 8009c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c32:	ec53 2b10 	vmov	r2, r3, d0
 8009c36:	4826      	ldr	r0, [pc, #152]	@ (8009cd0 <sin+0xa0>)
 8009c38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009c3c:	4281      	cmp	r1, r0
 8009c3e:	d807      	bhi.n	8009c50 <sin+0x20>
 8009c40:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009cc8 <sin+0x98>
 8009c44:	2000      	movs	r0, #0
 8009c46:	b005      	add	sp, #20
 8009c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c4c:	f000 b90c 	b.w	8009e68 <__kernel_sin>
 8009c50:	4820      	ldr	r0, [pc, #128]	@ (8009cd4 <sin+0xa4>)
 8009c52:	4281      	cmp	r1, r0
 8009c54:	d908      	bls.n	8009c68 <sin+0x38>
 8009c56:	4610      	mov	r0, r2
 8009c58:	4619      	mov	r1, r3
 8009c5a:	f7f6 fb15 	bl	8000288 <__aeabi_dsub>
 8009c5e:	ec41 0b10 	vmov	d0, r0, r1
 8009c62:	b005      	add	sp, #20
 8009c64:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c68:	4668      	mov	r0, sp
 8009c6a:	f000 f9b9 	bl	8009fe0 <__ieee754_rem_pio2>
 8009c6e:	f000 0003 	and.w	r0, r0, #3
 8009c72:	2801      	cmp	r0, #1
 8009c74:	d00c      	beq.n	8009c90 <sin+0x60>
 8009c76:	2802      	cmp	r0, #2
 8009c78:	d011      	beq.n	8009c9e <sin+0x6e>
 8009c7a:	b9e8      	cbnz	r0, 8009cb8 <sin+0x88>
 8009c7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c80:	ed9d 0b00 	vldr	d0, [sp]
 8009c84:	2001      	movs	r0, #1
 8009c86:	f000 f8ef 	bl	8009e68 <__kernel_sin>
 8009c8a:	ec51 0b10 	vmov	r0, r1, d0
 8009c8e:	e7e6      	b.n	8009c5e <sin+0x2e>
 8009c90:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c94:	ed9d 0b00 	vldr	d0, [sp]
 8009c98:	f000 f81e 	bl	8009cd8 <__kernel_cos>
 8009c9c:	e7f5      	b.n	8009c8a <sin+0x5a>
 8009c9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ca2:	ed9d 0b00 	vldr	d0, [sp]
 8009ca6:	2001      	movs	r0, #1
 8009ca8:	f000 f8de 	bl	8009e68 <__kernel_sin>
 8009cac:	ec53 2b10 	vmov	r2, r3, d0
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009cb6:	e7d2      	b.n	8009c5e <sin+0x2e>
 8009cb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009cbc:	ed9d 0b00 	vldr	d0, [sp]
 8009cc0:	f000 f80a 	bl	8009cd8 <__kernel_cos>
 8009cc4:	e7f2      	b.n	8009cac <sin+0x7c>
 8009cc6:	bf00      	nop
	...
 8009cd0:	3fe921fb 	.word	0x3fe921fb
 8009cd4:	7fefffff 	.word	0x7fefffff

08009cd8 <__kernel_cos>:
 8009cd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cdc:	ec57 6b10 	vmov	r6, r7, d0
 8009ce0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009ce4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8009ce8:	ed8d 1b00 	vstr	d1, [sp]
 8009cec:	d206      	bcs.n	8009cfc <__kernel_cos+0x24>
 8009cee:	4630      	mov	r0, r6
 8009cf0:	4639      	mov	r1, r7
 8009cf2:	f7f6 ff1b 	bl	8000b2c <__aeabi_d2iz>
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	f000 8088 	beq.w	8009e0c <__kernel_cos+0x134>
 8009cfc:	4632      	mov	r2, r6
 8009cfe:	463b      	mov	r3, r7
 8009d00:	4630      	mov	r0, r6
 8009d02:	4639      	mov	r1, r7
 8009d04:	f7f6 fc78 	bl	80005f8 <__aeabi_dmul>
 8009d08:	4b51      	ldr	r3, [pc, #324]	@ (8009e50 <__kernel_cos+0x178>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	460d      	mov	r5, r1
 8009d10:	f7f6 fc72 	bl	80005f8 <__aeabi_dmul>
 8009d14:	a340      	add	r3, pc, #256	@ (adr r3, 8009e18 <__kernel_cos+0x140>)
 8009d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1a:	4682      	mov	sl, r0
 8009d1c:	468b      	mov	fp, r1
 8009d1e:	4620      	mov	r0, r4
 8009d20:	4629      	mov	r1, r5
 8009d22:	f7f6 fc69 	bl	80005f8 <__aeabi_dmul>
 8009d26:	a33e      	add	r3, pc, #248	@ (adr r3, 8009e20 <__kernel_cos+0x148>)
 8009d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2c:	f7f6 faae 	bl	800028c <__adddf3>
 8009d30:	4622      	mov	r2, r4
 8009d32:	462b      	mov	r3, r5
 8009d34:	f7f6 fc60 	bl	80005f8 <__aeabi_dmul>
 8009d38:	a33b      	add	r3, pc, #236	@ (adr r3, 8009e28 <__kernel_cos+0x150>)
 8009d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3e:	f7f6 faa3 	bl	8000288 <__aeabi_dsub>
 8009d42:	4622      	mov	r2, r4
 8009d44:	462b      	mov	r3, r5
 8009d46:	f7f6 fc57 	bl	80005f8 <__aeabi_dmul>
 8009d4a:	a339      	add	r3, pc, #228	@ (adr r3, 8009e30 <__kernel_cos+0x158>)
 8009d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d50:	f7f6 fa9c 	bl	800028c <__adddf3>
 8009d54:	4622      	mov	r2, r4
 8009d56:	462b      	mov	r3, r5
 8009d58:	f7f6 fc4e 	bl	80005f8 <__aeabi_dmul>
 8009d5c:	a336      	add	r3, pc, #216	@ (adr r3, 8009e38 <__kernel_cos+0x160>)
 8009d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d62:	f7f6 fa91 	bl	8000288 <__aeabi_dsub>
 8009d66:	4622      	mov	r2, r4
 8009d68:	462b      	mov	r3, r5
 8009d6a:	f7f6 fc45 	bl	80005f8 <__aeabi_dmul>
 8009d6e:	a334      	add	r3, pc, #208	@ (adr r3, 8009e40 <__kernel_cos+0x168>)
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	f7f6 fa8a 	bl	800028c <__adddf3>
 8009d78:	4622      	mov	r2, r4
 8009d7a:	462b      	mov	r3, r5
 8009d7c:	f7f6 fc3c 	bl	80005f8 <__aeabi_dmul>
 8009d80:	4622      	mov	r2, r4
 8009d82:	462b      	mov	r3, r5
 8009d84:	f7f6 fc38 	bl	80005f8 <__aeabi_dmul>
 8009d88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	460d      	mov	r5, r1
 8009d90:	4630      	mov	r0, r6
 8009d92:	4639      	mov	r1, r7
 8009d94:	f7f6 fc30 	bl	80005f8 <__aeabi_dmul>
 8009d98:	460b      	mov	r3, r1
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	4629      	mov	r1, r5
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f7f6 fa72 	bl	8000288 <__aeabi_dsub>
 8009da4:	4b2b      	ldr	r3, [pc, #172]	@ (8009e54 <__kernel_cos+0x17c>)
 8009da6:	4598      	cmp	r8, r3
 8009da8:	4606      	mov	r6, r0
 8009daa:	460f      	mov	r7, r1
 8009dac:	d810      	bhi.n	8009dd0 <__kernel_cos+0xf8>
 8009dae:	4602      	mov	r2, r0
 8009db0:	460b      	mov	r3, r1
 8009db2:	4650      	mov	r0, sl
 8009db4:	4659      	mov	r1, fp
 8009db6:	f7f6 fa67 	bl	8000288 <__aeabi_dsub>
 8009dba:	460b      	mov	r3, r1
 8009dbc:	4926      	ldr	r1, [pc, #152]	@ (8009e58 <__kernel_cos+0x180>)
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	f7f6 fa61 	bl	8000288 <__aeabi_dsub>
 8009dc6:	ec41 0b10 	vmov	d0, r0, r1
 8009dca:	b003      	add	sp, #12
 8009dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd0:	4b22      	ldr	r3, [pc, #136]	@ (8009e5c <__kernel_cos+0x184>)
 8009dd2:	4921      	ldr	r1, [pc, #132]	@ (8009e58 <__kernel_cos+0x180>)
 8009dd4:	4598      	cmp	r8, r3
 8009dd6:	bf8c      	ite	hi
 8009dd8:	4d21      	ldrhi	r5, [pc, #132]	@ (8009e60 <__kernel_cos+0x188>)
 8009dda:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8009dde:	2400      	movs	r4, #0
 8009de0:	4622      	mov	r2, r4
 8009de2:	462b      	mov	r3, r5
 8009de4:	2000      	movs	r0, #0
 8009de6:	f7f6 fa4f 	bl	8000288 <__aeabi_dsub>
 8009dea:	4622      	mov	r2, r4
 8009dec:	4680      	mov	r8, r0
 8009dee:	4689      	mov	r9, r1
 8009df0:	462b      	mov	r3, r5
 8009df2:	4650      	mov	r0, sl
 8009df4:	4659      	mov	r1, fp
 8009df6:	f7f6 fa47 	bl	8000288 <__aeabi_dsub>
 8009dfa:	4632      	mov	r2, r6
 8009dfc:	463b      	mov	r3, r7
 8009dfe:	f7f6 fa43 	bl	8000288 <__aeabi_dsub>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4640      	mov	r0, r8
 8009e08:	4649      	mov	r1, r9
 8009e0a:	e7da      	b.n	8009dc2 <__kernel_cos+0xea>
 8009e0c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009e48 <__kernel_cos+0x170>
 8009e10:	e7db      	b.n	8009dca <__kernel_cos+0xf2>
 8009e12:	bf00      	nop
 8009e14:	f3af 8000 	nop.w
 8009e18:	be8838d4 	.word	0xbe8838d4
 8009e1c:	bda8fae9 	.word	0xbda8fae9
 8009e20:	bdb4b1c4 	.word	0xbdb4b1c4
 8009e24:	3e21ee9e 	.word	0x3e21ee9e
 8009e28:	809c52ad 	.word	0x809c52ad
 8009e2c:	3e927e4f 	.word	0x3e927e4f
 8009e30:	19cb1590 	.word	0x19cb1590
 8009e34:	3efa01a0 	.word	0x3efa01a0
 8009e38:	16c15177 	.word	0x16c15177
 8009e3c:	3f56c16c 	.word	0x3f56c16c
 8009e40:	5555554c 	.word	0x5555554c
 8009e44:	3fa55555 	.word	0x3fa55555
 8009e48:	00000000 	.word	0x00000000
 8009e4c:	3ff00000 	.word	0x3ff00000
 8009e50:	3fe00000 	.word	0x3fe00000
 8009e54:	3fd33332 	.word	0x3fd33332
 8009e58:	3ff00000 	.word	0x3ff00000
 8009e5c:	3fe90000 	.word	0x3fe90000
 8009e60:	3fd20000 	.word	0x3fd20000
 8009e64:	00000000 	.word	0x00000000

08009e68 <__kernel_sin>:
 8009e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e6c:	ec55 4b10 	vmov	r4, r5, d0
 8009e70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009e74:	b085      	sub	sp, #20
 8009e76:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009e7a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009e7e:	4680      	mov	r8, r0
 8009e80:	d205      	bcs.n	8009e8e <__kernel_sin+0x26>
 8009e82:	4620      	mov	r0, r4
 8009e84:	4629      	mov	r1, r5
 8009e86:	f7f6 fe51 	bl	8000b2c <__aeabi_d2iz>
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	d052      	beq.n	8009f34 <__kernel_sin+0xcc>
 8009e8e:	4622      	mov	r2, r4
 8009e90:	462b      	mov	r3, r5
 8009e92:	4620      	mov	r0, r4
 8009e94:	4629      	mov	r1, r5
 8009e96:	f7f6 fbaf 	bl	80005f8 <__aeabi_dmul>
 8009e9a:	4682      	mov	sl, r0
 8009e9c:	468b      	mov	fp, r1
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	f7f6 fba7 	bl	80005f8 <__aeabi_dmul>
 8009eaa:	a342      	add	r3, pc, #264	@ (adr r3, 8009fb4 <__kernel_sin+0x14c>)
 8009eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb0:	e9cd 0100 	strd	r0, r1, [sp]
 8009eb4:	4650      	mov	r0, sl
 8009eb6:	4659      	mov	r1, fp
 8009eb8:	f7f6 fb9e 	bl	80005f8 <__aeabi_dmul>
 8009ebc:	a33f      	add	r3, pc, #252	@ (adr r3, 8009fbc <__kernel_sin+0x154>)
 8009ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec2:	f7f6 f9e1 	bl	8000288 <__aeabi_dsub>
 8009ec6:	4652      	mov	r2, sl
 8009ec8:	465b      	mov	r3, fp
 8009eca:	f7f6 fb95 	bl	80005f8 <__aeabi_dmul>
 8009ece:	a33d      	add	r3, pc, #244	@ (adr r3, 8009fc4 <__kernel_sin+0x15c>)
 8009ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed4:	f7f6 f9da 	bl	800028c <__adddf3>
 8009ed8:	4652      	mov	r2, sl
 8009eda:	465b      	mov	r3, fp
 8009edc:	f7f6 fb8c 	bl	80005f8 <__aeabi_dmul>
 8009ee0:	a33a      	add	r3, pc, #232	@ (adr r3, 8009fcc <__kernel_sin+0x164>)
 8009ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee6:	f7f6 f9cf 	bl	8000288 <__aeabi_dsub>
 8009eea:	4652      	mov	r2, sl
 8009eec:	465b      	mov	r3, fp
 8009eee:	f7f6 fb83 	bl	80005f8 <__aeabi_dmul>
 8009ef2:	a338      	add	r3, pc, #224	@ (adr r3, 8009fd4 <__kernel_sin+0x16c>)
 8009ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef8:	f7f6 f9c8 	bl	800028c <__adddf3>
 8009efc:	4606      	mov	r6, r0
 8009efe:	460f      	mov	r7, r1
 8009f00:	f1b8 0f00 	cmp.w	r8, #0
 8009f04:	d11b      	bne.n	8009f3e <__kernel_sin+0xd6>
 8009f06:	4602      	mov	r2, r0
 8009f08:	460b      	mov	r3, r1
 8009f0a:	4650      	mov	r0, sl
 8009f0c:	4659      	mov	r1, fp
 8009f0e:	f7f6 fb73 	bl	80005f8 <__aeabi_dmul>
 8009f12:	a325      	add	r3, pc, #148	@ (adr r3, 8009fa8 <__kernel_sin+0x140>)
 8009f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f18:	f7f6 f9b6 	bl	8000288 <__aeabi_dsub>
 8009f1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f20:	f7f6 fb6a 	bl	80005f8 <__aeabi_dmul>
 8009f24:	4602      	mov	r2, r0
 8009f26:	460b      	mov	r3, r1
 8009f28:	4620      	mov	r0, r4
 8009f2a:	4629      	mov	r1, r5
 8009f2c:	f7f6 f9ae 	bl	800028c <__adddf3>
 8009f30:	4604      	mov	r4, r0
 8009f32:	460d      	mov	r5, r1
 8009f34:	ec45 4b10 	vmov	d0, r4, r5
 8009f38:	b005      	add	sp, #20
 8009f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f42:	4b1b      	ldr	r3, [pc, #108]	@ (8009fb0 <__kernel_sin+0x148>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	f7f6 fb57 	bl	80005f8 <__aeabi_dmul>
 8009f4a:	4632      	mov	r2, r6
 8009f4c:	4680      	mov	r8, r0
 8009f4e:	4689      	mov	r9, r1
 8009f50:	463b      	mov	r3, r7
 8009f52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f56:	f7f6 fb4f 	bl	80005f8 <__aeabi_dmul>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	4640      	mov	r0, r8
 8009f60:	4649      	mov	r1, r9
 8009f62:	f7f6 f991 	bl	8000288 <__aeabi_dsub>
 8009f66:	4652      	mov	r2, sl
 8009f68:	465b      	mov	r3, fp
 8009f6a:	f7f6 fb45 	bl	80005f8 <__aeabi_dmul>
 8009f6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f72:	f7f6 f989 	bl	8000288 <__aeabi_dsub>
 8009f76:	a30c      	add	r3, pc, #48	@ (adr r3, 8009fa8 <__kernel_sin+0x140>)
 8009f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7c:	4606      	mov	r6, r0
 8009f7e:	460f      	mov	r7, r1
 8009f80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f84:	f7f6 fb38 	bl	80005f8 <__aeabi_dmul>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	4639      	mov	r1, r7
 8009f90:	f7f6 f97c 	bl	800028c <__adddf3>
 8009f94:	4602      	mov	r2, r0
 8009f96:	460b      	mov	r3, r1
 8009f98:	4620      	mov	r0, r4
 8009f9a:	4629      	mov	r1, r5
 8009f9c:	f7f6 f974 	bl	8000288 <__aeabi_dsub>
 8009fa0:	e7c6      	b.n	8009f30 <__kernel_sin+0xc8>
 8009fa2:	bf00      	nop
 8009fa4:	f3af 8000 	nop.w
 8009fa8:	55555549 	.word	0x55555549
 8009fac:	3fc55555 	.word	0x3fc55555
 8009fb0:	3fe00000 	.word	0x3fe00000
 8009fb4:	5acfd57c 	.word	0x5acfd57c
 8009fb8:	3de5d93a 	.word	0x3de5d93a
 8009fbc:	8a2b9ceb 	.word	0x8a2b9ceb
 8009fc0:	3e5ae5e6 	.word	0x3e5ae5e6
 8009fc4:	57b1fe7d 	.word	0x57b1fe7d
 8009fc8:	3ec71de3 	.word	0x3ec71de3
 8009fcc:	19c161d5 	.word	0x19c161d5
 8009fd0:	3f2a01a0 	.word	0x3f2a01a0
 8009fd4:	1110f8a6 	.word	0x1110f8a6
 8009fd8:	3f811111 	.word	0x3f811111
 8009fdc:	00000000 	.word	0x00000000

08009fe0 <__ieee754_rem_pio2>:
 8009fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	ec57 6b10 	vmov	r6, r7, d0
 8009fe8:	4bc5      	ldr	r3, [pc, #788]	@ (800a300 <__ieee754_rem_pio2+0x320>)
 8009fea:	b08d      	sub	sp, #52	@ 0x34
 8009fec:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009ff0:	4598      	cmp	r8, r3
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	9704      	str	r7, [sp, #16]
 8009ff6:	d807      	bhi.n	800a008 <__ieee754_rem_pio2+0x28>
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	ed80 0b00 	vstr	d0, [r0]
 800a000:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a004:	2500      	movs	r5, #0
 800a006:	e028      	b.n	800a05a <__ieee754_rem_pio2+0x7a>
 800a008:	4bbe      	ldr	r3, [pc, #760]	@ (800a304 <__ieee754_rem_pio2+0x324>)
 800a00a:	4598      	cmp	r8, r3
 800a00c:	d878      	bhi.n	800a100 <__ieee754_rem_pio2+0x120>
 800a00e:	9b04      	ldr	r3, [sp, #16]
 800a010:	4dbd      	ldr	r5, [pc, #756]	@ (800a308 <__ieee754_rem_pio2+0x328>)
 800a012:	2b00      	cmp	r3, #0
 800a014:	4630      	mov	r0, r6
 800a016:	a3ac      	add	r3, pc, #688	@ (adr r3, 800a2c8 <__ieee754_rem_pio2+0x2e8>)
 800a018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01c:	4639      	mov	r1, r7
 800a01e:	dd38      	ble.n	800a092 <__ieee754_rem_pio2+0xb2>
 800a020:	f7f6 f932 	bl	8000288 <__aeabi_dsub>
 800a024:	45a8      	cmp	r8, r5
 800a026:	4606      	mov	r6, r0
 800a028:	460f      	mov	r7, r1
 800a02a:	d01a      	beq.n	800a062 <__ieee754_rem_pio2+0x82>
 800a02c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800a2d0 <__ieee754_rem_pio2+0x2f0>)
 800a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a032:	f7f6 f929 	bl	8000288 <__aeabi_dsub>
 800a036:	4602      	mov	r2, r0
 800a038:	460b      	mov	r3, r1
 800a03a:	4680      	mov	r8, r0
 800a03c:	4689      	mov	r9, r1
 800a03e:	4630      	mov	r0, r6
 800a040:	4639      	mov	r1, r7
 800a042:	f7f6 f921 	bl	8000288 <__aeabi_dsub>
 800a046:	a3a2      	add	r3, pc, #648	@ (adr r3, 800a2d0 <__ieee754_rem_pio2+0x2f0>)
 800a048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04c:	f7f6 f91c 	bl	8000288 <__aeabi_dsub>
 800a050:	e9c4 8900 	strd	r8, r9, [r4]
 800a054:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a058:	2501      	movs	r5, #1
 800a05a:	4628      	mov	r0, r5
 800a05c:	b00d      	add	sp, #52	@ 0x34
 800a05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a062:	a39d      	add	r3, pc, #628	@ (adr r3, 800a2d8 <__ieee754_rem_pio2+0x2f8>)
 800a064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a068:	f7f6 f90e 	bl	8000288 <__aeabi_dsub>
 800a06c:	a39c      	add	r3, pc, #624	@ (adr r3, 800a2e0 <__ieee754_rem_pio2+0x300>)
 800a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a072:	4606      	mov	r6, r0
 800a074:	460f      	mov	r7, r1
 800a076:	f7f6 f907 	bl	8000288 <__aeabi_dsub>
 800a07a:	4602      	mov	r2, r0
 800a07c:	460b      	mov	r3, r1
 800a07e:	4680      	mov	r8, r0
 800a080:	4689      	mov	r9, r1
 800a082:	4630      	mov	r0, r6
 800a084:	4639      	mov	r1, r7
 800a086:	f7f6 f8ff 	bl	8000288 <__aeabi_dsub>
 800a08a:	a395      	add	r3, pc, #596	@ (adr r3, 800a2e0 <__ieee754_rem_pio2+0x300>)
 800a08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a090:	e7dc      	b.n	800a04c <__ieee754_rem_pio2+0x6c>
 800a092:	f7f6 f8fb 	bl	800028c <__adddf3>
 800a096:	45a8      	cmp	r8, r5
 800a098:	4606      	mov	r6, r0
 800a09a:	460f      	mov	r7, r1
 800a09c:	d018      	beq.n	800a0d0 <__ieee754_rem_pio2+0xf0>
 800a09e:	a38c      	add	r3, pc, #560	@ (adr r3, 800a2d0 <__ieee754_rem_pio2+0x2f0>)
 800a0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a4:	f7f6 f8f2 	bl	800028c <__adddf3>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4680      	mov	r8, r0
 800a0ae:	4689      	mov	r9, r1
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	4639      	mov	r1, r7
 800a0b4:	f7f6 f8e8 	bl	8000288 <__aeabi_dsub>
 800a0b8:	a385      	add	r3, pc, #532	@ (adr r3, 800a2d0 <__ieee754_rem_pio2+0x2f0>)
 800a0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0be:	f7f6 f8e5 	bl	800028c <__adddf3>
 800a0c2:	f04f 35ff 	mov.w	r5, #4294967295
 800a0c6:	e9c4 8900 	strd	r8, r9, [r4]
 800a0ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a0ce:	e7c4      	b.n	800a05a <__ieee754_rem_pio2+0x7a>
 800a0d0:	a381      	add	r3, pc, #516	@ (adr r3, 800a2d8 <__ieee754_rem_pio2+0x2f8>)
 800a0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d6:	f7f6 f8d9 	bl	800028c <__adddf3>
 800a0da:	a381      	add	r3, pc, #516	@ (adr r3, 800a2e0 <__ieee754_rem_pio2+0x300>)
 800a0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	460f      	mov	r7, r1
 800a0e4:	f7f6 f8d2 	bl	800028c <__adddf3>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	4680      	mov	r8, r0
 800a0ee:	4689      	mov	r9, r1
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	4639      	mov	r1, r7
 800a0f4:	f7f6 f8c8 	bl	8000288 <__aeabi_dsub>
 800a0f8:	a379      	add	r3, pc, #484	@ (adr r3, 800a2e0 <__ieee754_rem_pio2+0x300>)
 800a0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fe:	e7de      	b.n	800a0be <__ieee754_rem_pio2+0xde>
 800a100:	4b82      	ldr	r3, [pc, #520]	@ (800a30c <__ieee754_rem_pio2+0x32c>)
 800a102:	4598      	cmp	r8, r3
 800a104:	f200 80d1 	bhi.w	800a2aa <__ieee754_rem_pio2+0x2ca>
 800a108:	f000 f966 	bl	800a3d8 <fabs>
 800a10c:	ec57 6b10 	vmov	r6, r7, d0
 800a110:	a375      	add	r3, pc, #468	@ (adr r3, 800a2e8 <__ieee754_rem_pio2+0x308>)
 800a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a116:	4630      	mov	r0, r6
 800a118:	4639      	mov	r1, r7
 800a11a:	f7f6 fa6d 	bl	80005f8 <__aeabi_dmul>
 800a11e:	4b7c      	ldr	r3, [pc, #496]	@ (800a310 <__ieee754_rem_pio2+0x330>)
 800a120:	2200      	movs	r2, #0
 800a122:	f7f6 f8b3 	bl	800028c <__adddf3>
 800a126:	f7f6 fd01 	bl	8000b2c <__aeabi_d2iz>
 800a12a:	4605      	mov	r5, r0
 800a12c:	f7f6 f9fa 	bl	8000524 <__aeabi_i2d>
 800a130:	4602      	mov	r2, r0
 800a132:	460b      	mov	r3, r1
 800a134:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a138:	a363      	add	r3, pc, #396	@ (adr r3, 800a2c8 <__ieee754_rem_pio2+0x2e8>)
 800a13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13e:	f7f6 fa5b 	bl	80005f8 <__aeabi_dmul>
 800a142:	4602      	mov	r2, r0
 800a144:	460b      	mov	r3, r1
 800a146:	4630      	mov	r0, r6
 800a148:	4639      	mov	r1, r7
 800a14a:	f7f6 f89d 	bl	8000288 <__aeabi_dsub>
 800a14e:	a360      	add	r3, pc, #384	@ (adr r3, 800a2d0 <__ieee754_rem_pio2+0x2f0>)
 800a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a154:	4682      	mov	sl, r0
 800a156:	468b      	mov	fp, r1
 800a158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a15c:	f7f6 fa4c 	bl	80005f8 <__aeabi_dmul>
 800a160:	2d1f      	cmp	r5, #31
 800a162:	4606      	mov	r6, r0
 800a164:	460f      	mov	r7, r1
 800a166:	dc0c      	bgt.n	800a182 <__ieee754_rem_pio2+0x1a2>
 800a168:	4b6a      	ldr	r3, [pc, #424]	@ (800a314 <__ieee754_rem_pio2+0x334>)
 800a16a:	1e6a      	subs	r2, r5, #1
 800a16c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a170:	4543      	cmp	r3, r8
 800a172:	d006      	beq.n	800a182 <__ieee754_rem_pio2+0x1a2>
 800a174:	4632      	mov	r2, r6
 800a176:	463b      	mov	r3, r7
 800a178:	4650      	mov	r0, sl
 800a17a:	4659      	mov	r1, fp
 800a17c:	f7f6 f884 	bl	8000288 <__aeabi_dsub>
 800a180:	e00e      	b.n	800a1a0 <__ieee754_rem_pio2+0x1c0>
 800a182:	463b      	mov	r3, r7
 800a184:	4632      	mov	r2, r6
 800a186:	4650      	mov	r0, sl
 800a188:	4659      	mov	r1, fp
 800a18a:	f7f6 f87d 	bl	8000288 <__aeabi_dsub>
 800a18e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a192:	9305      	str	r3, [sp, #20]
 800a194:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a198:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a19c:	2b10      	cmp	r3, #16
 800a19e:	dc02      	bgt.n	800a1a6 <__ieee754_rem_pio2+0x1c6>
 800a1a0:	e9c4 0100 	strd	r0, r1, [r4]
 800a1a4:	e039      	b.n	800a21a <__ieee754_rem_pio2+0x23a>
 800a1a6:	a34c      	add	r3, pc, #304	@ (adr r3, 800a2d8 <__ieee754_rem_pio2+0x2f8>)
 800a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1b0:	f7f6 fa22 	bl	80005f8 <__aeabi_dmul>
 800a1b4:	4606      	mov	r6, r0
 800a1b6:	460f      	mov	r7, r1
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	4650      	mov	r0, sl
 800a1be:	4659      	mov	r1, fp
 800a1c0:	f7f6 f862 	bl	8000288 <__aeabi_dsub>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	4680      	mov	r8, r0
 800a1ca:	4689      	mov	r9, r1
 800a1cc:	4650      	mov	r0, sl
 800a1ce:	4659      	mov	r1, fp
 800a1d0:	f7f6 f85a 	bl	8000288 <__aeabi_dsub>
 800a1d4:	4632      	mov	r2, r6
 800a1d6:	463b      	mov	r3, r7
 800a1d8:	f7f6 f856 	bl	8000288 <__aeabi_dsub>
 800a1dc:	a340      	add	r3, pc, #256	@ (adr r3, 800a2e0 <__ieee754_rem_pio2+0x300>)
 800a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e2:	4606      	mov	r6, r0
 800a1e4:	460f      	mov	r7, r1
 800a1e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1ea:	f7f6 fa05 	bl	80005f8 <__aeabi_dmul>
 800a1ee:	4632      	mov	r2, r6
 800a1f0:	463b      	mov	r3, r7
 800a1f2:	f7f6 f849 	bl	8000288 <__aeabi_dsub>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	4606      	mov	r6, r0
 800a1fc:	460f      	mov	r7, r1
 800a1fe:	4640      	mov	r0, r8
 800a200:	4649      	mov	r1, r9
 800a202:	f7f6 f841 	bl	8000288 <__aeabi_dsub>
 800a206:	9a05      	ldr	r2, [sp, #20]
 800a208:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	2b31      	cmp	r3, #49	@ 0x31
 800a210:	dc20      	bgt.n	800a254 <__ieee754_rem_pio2+0x274>
 800a212:	e9c4 0100 	strd	r0, r1, [r4]
 800a216:	46c2      	mov	sl, r8
 800a218:	46cb      	mov	fp, r9
 800a21a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a21e:	4650      	mov	r0, sl
 800a220:	4642      	mov	r2, r8
 800a222:	464b      	mov	r3, r9
 800a224:	4659      	mov	r1, fp
 800a226:	f7f6 f82f 	bl	8000288 <__aeabi_dsub>
 800a22a:	463b      	mov	r3, r7
 800a22c:	4632      	mov	r2, r6
 800a22e:	f7f6 f82b 	bl	8000288 <__aeabi_dsub>
 800a232:	9b04      	ldr	r3, [sp, #16]
 800a234:	2b00      	cmp	r3, #0
 800a236:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a23a:	f6bf af0e 	bge.w	800a05a <__ieee754_rem_pio2+0x7a>
 800a23e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a242:	6063      	str	r3, [r4, #4]
 800a244:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a248:	f8c4 8000 	str.w	r8, [r4]
 800a24c:	60a0      	str	r0, [r4, #8]
 800a24e:	60e3      	str	r3, [r4, #12]
 800a250:	426d      	negs	r5, r5
 800a252:	e702      	b.n	800a05a <__ieee754_rem_pio2+0x7a>
 800a254:	a326      	add	r3, pc, #152	@ (adr r3, 800a2f0 <__ieee754_rem_pio2+0x310>)
 800a256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a25e:	f7f6 f9cb 	bl	80005f8 <__aeabi_dmul>
 800a262:	4606      	mov	r6, r0
 800a264:	460f      	mov	r7, r1
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
 800a26a:	4640      	mov	r0, r8
 800a26c:	4649      	mov	r1, r9
 800a26e:	f7f6 f80b 	bl	8000288 <__aeabi_dsub>
 800a272:	4602      	mov	r2, r0
 800a274:	460b      	mov	r3, r1
 800a276:	4682      	mov	sl, r0
 800a278:	468b      	mov	fp, r1
 800a27a:	4640      	mov	r0, r8
 800a27c:	4649      	mov	r1, r9
 800a27e:	f7f6 f803 	bl	8000288 <__aeabi_dsub>
 800a282:	4632      	mov	r2, r6
 800a284:	463b      	mov	r3, r7
 800a286:	f7f5 ffff 	bl	8000288 <__aeabi_dsub>
 800a28a:	a31b      	add	r3, pc, #108	@ (adr r3, 800a2f8 <__ieee754_rem_pio2+0x318>)
 800a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a290:	4606      	mov	r6, r0
 800a292:	460f      	mov	r7, r1
 800a294:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a298:	f7f6 f9ae 	bl	80005f8 <__aeabi_dmul>
 800a29c:	4632      	mov	r2, r6
 800a29e:	463b      	mov	r3, r7
 800a2a0:	f7f5 fff2 	bl	8000288 <__aeabi_dsub>
 800a2a4:	4606      	mov	r6, r0
 800a2a6:	460f      	mov	r7, r1
 800a2a8:	e764      	b.n	800a174 <__ieee754_rem_pio2+0x194>
 800a2aa:	4b1b      	ldr	r3, [pc, #108]	@ (800a318 <__ieee754_rem_pio2+0x338>)
 800a2ac:	4598      	cmp	r8, r3
 800a2ae:	d935      	bls.n	800a31c <__ieee754_rem_pio2+0x33c>
 800a2b0:	4632      	mov	r2, r6
 800a2b2:	463b      	mov	r3, r7
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	4639      	mov	r1, r7
 800a2b8:	f7f5 ffe6 	bl	8000288 <__aeabi_dsub>
 800a2bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a2c0:	e9c4 0100 	strd	r0, r1, [r4]
 800a2c4:	e69e      	b.n	800a004 <__ieee754_rem_pio2+0x24>
 800a2c6:	bf00      	nop
 800a2c8:	54400000 	.word	0x54400000
 800a2cc:	3ff921fb 	.word	0x3ff921fb
 800a2d0:	1a626331 	.word	0x1a626331
 800a2d4:	3dd0b461 	.word	0x3dd0b461
 800a2d8:	1a600000 	.word	0x1a600000
 800a2dc:	3dd0b461 	.word	0x3dd0b461
 800a2e0:	2e037073 	.word	0x2e037073
 800a2e4:	3ba3198a 	.word	0x3ba3198a
 800a2e8:	6dc9c883 	.word	0x6dc9c883
 800a2ec:	3fe45f30 	.word	0x3fe45f30
 800a2f0:	2e000000 	.word	0x2e000000
 800a2f4:	3ba3198a 	.word	0x3ba3198a
 800a2f8:	252049c1 	.word	0x252049c1
 800a2fc:	397b839a 	.word	0x397b839a
 800a300:	3fe921fb 	.word	0x3fe921fb
 800a304:	4002d97b 	.word	0x4002d97b
 800a308:	3ff921fb 	.word	0x3ff921fb
 800a30c:	413921fb 	.word	0x413921fb
 800a310:	3fe00000 	.word	0x3fe00000
 800a314:	0800cfa4 	.word	0x0800cfa4
 800a318:	7fefffff 	.word	0x7fefffff
 800a31c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a320:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a324:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a328:	4630      	mov	r0, r6
 800a32a:	460f      	mov	r7, r1
 800a32c:	f7f6 fbfe 	bl	8000b2c <__aeabi_d2iz>
 800a330:	f7f6 f8f8 	bl	8000524 <__aeabi_i2d>
 800a334:	4602      	mov	r2, r0
 800a336:	460b      	mov	r3, r1
 800a338:	4630      	mov	r0, r6
 800a33a:	4639      	mov	r1, r7
 800a33c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a340:	f7f5 ffa2 	bl	8000288 <__aeabi_dsub>
 800a344:	4b22      	ldr	r3, [pc, #136]	@ (800a3d0 <__ieee754_rem_pio2+0x3f0>)
 800a346:	2200      	movs	r2, #0
 800a348:	f7f6 f956 	bl	80005f8 <__aeabi_dmul>
 800a34c:	460f      	mov	r7, r1
 800a34e:	4606      	mov	r6, r0
 800a350:	f7f6 fbec 	bl	8000b2c <__aeabi_d2iz>
 800a354:	f7f6 f8e6 	bl	8000524 <__aeabi_i2d>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	4630      	mov	r0, r6
 800a35e:	4639      	mov	r1, r7
 800a360:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a364:	f7f5 ff90 	bl	8000288 <__aeabi_dsub>
 800a368:	4b19      	ldr	r3, [pc, #100]	@ (800a3d0 <__ieee754_rem_pio2+0x3f0>)
 800a36a:	2200      	movs	r2, #0
 800a36c:	f7f6 f944 	bl	80005f8 <__aeabi_dmul>
 800a370:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a374:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a378:	f04f 0803 	mov.w	r8, #3
 800a37c:	2600      	movs	r6, #0
 800a37e:	2700      	movs	r7, #0
 800a380:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a384:	4632      	mov	r2, r6
 800a386:	463b      	mov	r3, r7
 800a388:	46c2      	mov	sl, r8
 800a38a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a38e:	f7f6 fb9b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a392:	2800      	cmp	r0, #0
 800a394:	d1f4      	bne.n	800a380 <__ieee754_rem_pio2+0x3a0>
 800a396:	4b0f      	ldr	r3, [pc, #60]	@ (800a3d4 <__ieee754_rem_pio2+0x3f4>)
 800a398:	9301      	str	r3, [sp, #4]
 800a39a:	2302      	movs	r3, #2
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	462a      	mov	r2, r5
 800a3a0:	4653      	mov	r3, sl
 800a3a2:	4621      	mov	r1, r4
 800a3a4:	a806      	add	r0, sp, #24
 800a3a6:	f000 f81f 	bl	800a3e8 <__kernel_rem_pio2>
 800a3aa:	9b04      	ldr	r3, [sp, #16]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	4605      	mov	r5, r0
 800a3b0:	f6bf ae53 	bge.w	800a05a <__ieee754_rem_pio2+0x7a>
 800a3b4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a3b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a3bc:	e9c4 2300 	strd	r2, r3, [r4]
 800a3c0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a3c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a3c8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a3cc:	e740      	b.n	800a250 <__ieee754_rem_pio2+0x270>
 800a3ce:	bf00      	nop
 800a3d0:	41700000 	.word	0x41700000
 800a3d4:	0800d024 	.word	0x0800d024

0800a3d8 <fabs>:
 800a3d8:	ec51 0b10 	vmov	r0, r1, d0
 800a3dc:	4602      	mov	r2, r0
 800a3de:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a3e2:	ec43 2b10 	vmov	d0, r2, r3
 800a3e6:	4770      	bx	lr

0800a3e8 <__kernel_rem_pio2>:
 800a3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ec:	ed2d 8b02 	vpush	{d8}
 800a3f0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a3f4:	f112 0f14 	cmn.w	r2, #20
 800a3f8:	9306      	str	r3, [sp, #24]
 800a3fa:	9104      	str	r1, [sp, #16]
 800a3fc:	4bbe      	ldr	r3, [pc, #760]	@ (800a6f8 <__kernel_rem_pio2+0x310>)
 800a3fe:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800a400:	9008      	str	r0, [sp, #32]
 800a402:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a406:	9300      	str	r3, [sp, #0]
 800a408:	9b06      	ldr	r3, [sp, #24]
 800a40a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a40e:	bfa8      	it	ge
 800a410:	1ed4      	subge	r4, r2, #3
 800a412:	9305      	str	r3, [sp, #20]
 800a414:	bfb2      	itee	lt
 800a416:	2400      	movlt	r4, #0
 800a418:	2318      	movge	r3, #24
 800a41a:	fb94 f4f3 	sdivge	r4, r4, r3
 800a41e:	f06f 0317 	mvn.w	r3, #23
 800a422:	fb04 3303 	mla	r3, r4, r3, r3
 800a426:	eb03 0b02 	add.w	fp, r3, r2
 800a42a:	9b00      	ldr	r3, [sp, #0]
 800a42c:	9a05      	ldr	r2, [sp, #20]
 800a42e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800a6e8 <__kernel_rem_pio2+0x300>
 800a432:	eb03 0802 	add.w	r8, r3, r2
 800a436:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a438:	1aa7      	subs	r7, r4, r2
 800a43a:	ae20      	add	r6, sp, #128	@ 0x80
 800a43c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a440:	2500      	movs	r5, #0
 800a442:	4545      	cmp	r5, r8
 800a444:	dd13      	ble.n	800a46e <__kernel_rem_pio2+0x86>
 800a446:	9b06      	ldr	r3, [sp, #24]
 800a448:	aa20      	add	r2, sp, #128	@ 0x80
 800a44a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a44e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800a452:	f04f 0800 	mov.w	r8, #0
 800a456:	9b00      	ldr	r3, [sp, #0]
 800a458:	4598      	cmp	r8, r3
 800a45a:	dc31      	bgt.n	800a4c0 <__kernel_rem_pio2+0xd8>
 800a45c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800a6e8 <__kernel_rem_pio2+0x300>
 800a460:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a464:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a468:	462f      	mov	r7, r5
 800a46a:	2600      	movs	r6, #0
 800a46c:	e01b      	b.n	800a4a6 <__kernel_rem_pio2+0xbe>
 800a46e:	42ef      	cmn	r7, r5
 800a470:	d407      	bmi.n	800a482 <__kernel_rem_pio2+0x9a>
 800a472:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a476:	f7f6 f855 	bl	8000524 <__aeabi_i2d>
 800a47a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a47e:	3501      	adds	r5, #1
 800a480:	e7df      	b.n	800a442 <__kernel_rem_pio2+0x5a>
 800a482:	ec51 0b18 	vmov	r0, r1, d8
 800a486:	e7f8      	b.n	800a47a <__kernel_rem_pio2+0x92>
 800a488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a48c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a490:	f7f6 f8b2 	bl	80005f8 <__aeabi_dmul>
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a49c:	f7f5 fef6 	bl	800028c <__adddf3>
 800a4a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4a4:	3601      	adds	r6, #1
 800a4a6:	9b05      	ldr	r3, [sp, #20]
 800a4a8:	429e      	cmp	r6, r3
 800a4aa:	f1a7 0708 	sub.w	r7, r7, #8
 800a4ae:	ddeb      	ble.n	800a488 <__kernel_rem_pio2+0xa0>
 800a4b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a4b4:	f108 0801 	add.w	r8, r8, #1
 800a4b8:	ecaa 7b02 	vstmia	sl!, {d7}
 800a4bc:	3508      	adds	r5, #8
 800a4be:	e7ca      	b.n	800a456 <__kernel_rem_pio2+0x6e>
 800a4c0:	9b00      	ldr	r3, [sp, #0]
 800a4c2:	f8dd 8000 	ldr.w	r8, [sp]
 800a4c6:	aa0c      	add	r2, sp, #48	@ 0x30
 800a4c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a4d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a4d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4d6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800a4da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4dc:	ab98      	add	r3, sp, #608	@ 0x260
 800a4de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a4e2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800a4e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a4ea:	ac0c      	add	r4, sp, #48	@ 0x30
 800a4ec:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a4ee:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800a4f2:	46a1      	mov	r9, r4
 800a4f4:	46c2      	mov	sl, r8
 800a4f6:	f1ba 0f00 	cmp.w	sl, #0
 800a4fa:	f1a5 0508 	sub.w	r5, r5, #8
 800a4fe:	dc77      	bgt.n	800a5f0 <__kernel_rem_pio2+0x208>
 800a500:	4658      	mov	r0, fp
 800a502:	ed9d 0b02 	vldr	d0, [sp, #8]
 800a506:	f000 fac7 	bl	800aa98 <scalbn>
 800a50a:	ec57 6b10 	vmov	r6, r7, d0
 800a50e:	2200      	movs	r2, #0
 800a510:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a514:	4630      	mov	r0, r6
 800a516:	4639      	mov	r1, r7
 800a518:	f7f6 f86e 	bl	80005f8 <__aeabi_dmul>
 800a51c:	ec41 0b10 	vmov	d0, r0, r1
 800a520:	f000 fb3a 	bl	800ab98 <floor>
 800a524:	4b75      	ldr	r3, [pc, #468]	@ (800a6fc <__kernel_rem_pio2+0x314>)
 800a526:	ec51 0b10 	vmov	r0, r1, d0
 800a52a:	2200      	movs	r2, #0
 800a52c:	f7f6 f864 	bl	80005f8 <__aeabi_dmul>
 800a530:	4602      	mov	r2, r0
 800a532:	460b      	mov	r3, r1
 800a534:	4630      	mov	r0, r6
 800a536:	4639      	mov	r1, r7
 800a538:	f7f5 fea6 	bl	8000288 <__aeabi_dsub>
 800a53c:	460f      	mov	r7, r1
 800a53e:	4606      	mov	r6, r0
 800a540:	f7f6 faf4 	bl	8000b2c <__aeabi_d2iz>
 800a544:	9002      	str	r0, [sp, #8]
 800a546:	f7f5 ffed 	bl	8000524 <__aeabi_i2d>
 800a54a:	4602      	mov	r2, r0
 800a54c:	460b      	mov	r3, r1
 800a54e:	4630      	mov	r0, r6
 800a550:	4639      	mov	r1, r7
 800a552:	f7f5 fe99 	bl	8000288 <__aeabi_dsub>
 800a556:	f1bb 0f00 	cmp.w	fp, #0
 800a55a:	4606      	mov	r6, r0
 800a55c:	460f      	mov	r7, r1
 800a55e:	dd6c      	ble.n	800a63a <__kernel_rem_pio2+0x252>
 800a560:	f108 31ff 	add.w	r1, r8, #4294967295
 800a564:	ab0c      	add	r3, sp, #48	@ 0x30
 800a566:	9d02      	ldr	r5, [sp, #8]
 800a568:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a56c:	f1cb 0018 	rsb	r0, fp, #24
 800a570:	fa43 f200 	asr.w	r2, r3, r0
 800a574:	4415      	add	r5, r2
 800a576:	4082      	lsls	r2, r0
 800a578:	1a9b      	subs	r3, r3, r2
 800a57a:	aa0c      	add	r2, sp, #48	@ 0x30
 800a57c:	9502      	str	r5, [sp, #8]
 800a57e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a582:	f1cb 0217 	rsb	r2, fp, #23
 800a586:	fa43 f902 	asr.w	r9, r3, r2
 800a58a:	f1b9 0f00 	cmp.w	r9, #0
 800a58e:	dd64      	ble.n	800a65a <__kernel_rem_pio2+0x272>
 800a590:	9b02      	ldr	r3, [sp, #8]
 800a592:	2200      	movs	r2, #0
 800a594:	3301      	adds	r3, #1
 800a596:	9302      	str	r3, [sp, #8]
 800a598:	4615      	mov	r5, r2
 800a59a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800a59e:	4590      	cmp	r8, r2
 800a5a0:	f300 80b8 	bgt.w	800a714 <__kernel_rem_pio2+0x32c>
 800a5a4:	f1bb 0f00 	cmp.w	fp, #0
 800a5a8:	dd07      	ble.n	800a5ba <__kernel_rem_pio2+0x1d2>
 800a5aa:	f1bb 0f01 	cmp.w	fp, #1
 800a5ae:	f000 80bf 	beq.w	800a730 <__kernel_rem_pio2+0x348>
 800a5b2:	f1bb 0f02 	cmp.w	fp, #2
 800a5b6:	f000 80c6 	beq.w	800a746 <__kernel_rem_pio2+0x35e>
 800a5ba:	f1b9 0f02 	cmp.w	r9, #2
 800a5be:	d14c      	bne.n	800a65a <__kernel_rem_pio2+0x272>
 800a5c0:	4632      	mov	r2, r6
 800a5c2:	463b      	mov	r3, r7
 800a5c4:	494e      	ldr	r1, [pc, #312]	@ (800a700 <__kernel_rem_pio2+0x318>)
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	f7f5 fe5e 	bl	8000288 <__aeabi_dsub>
 800a5cc:	4606      	mov	r6, r0
 800a5ce:	460f      	mov	r7, r1
 800a5d0:	2d00      	cmp	r5, #0
 800a5d2:	d042      	beq.n	800a65a <__kernel_rem_pio2+0x272>
 800a5d4:	4658      	mov	r0, fp
 800a5d6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800a6f0 <__kernel_rem_pio2+0x308>
 800a5da:	f000 fa5d 	bl	800aa98 <scalbn>
 800a5de:	4630      	mov	r0, r6
 800a5e0:	4639      	mov	r1, r7
 800a5e2:	ec53 2b10 	vmov	r2, r3, d0
 800a5e6:	f7f5 fe4f 	bl	8000288 <__aeabi_dsub>
 800a5ea:	4606      	mov	r6, r0
 800a5ec:	460f      	mov	r7, r1
 800a5ee:	e034      	b.n	800a65a <__kernel_rem_pio2+0x272>
 800a5f0:	4b44      	ldr	r3, [pc, #272]	@ (800a704 <__kernel_rem_pio2+0x31c>)
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5f8:	f7f5 fffe 	bl	80005f8 <__aeabi_dmul>
 800a5fc:	f7f6 fa96 	bl	8000b2c <__aeabi_d2iz>
 800a600:	f7f5 ff90 	bl	8000524 <__aeabi_i2d>
 800a604:	4b40      	ldr	r3, [pc, #256]	@ (800a708 <__kernel_rem_pio2+0x320>)
 800a606:	2200      	movs	r2, #0
 800a608:	4606      	mov	r6, r0
 800a60a:	460f      	mov	r7, r1
 800a60c:	f7f5 fff4 	bl	80005f8 <__aeabi_dmul>
 800a610:	4602      	mov	r2, r0
 800a612:	460b      	mov	r3, r1
 800a614:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a618:	f7f5 fe36 	bl	8000288 <__aeabi_dsub>
 800a61c:	f7f6 fa86 	bl	8000b2c <__aeabi_d2iz>
 800a620:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a624:	f849 0b04 	str.w	r0, [r9], #4
 800a628:	4639      	mov	r1, r7
 800a62a:	4630      	mov	r0, r6
 800a62c:	f7f5 fe2e 	bl	800028c <__adddf3>
 800a630:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a638:	e75d      	b.n	800a4f6 <__kernel_rem_pio2+0x10e>
 800a63a:	d107      	bne.n	800a64c <__kernel_rem_pio2+0x264>
 800a63c:	f108 33ff 	add.w	r3, r8, #4294967295
 800a640:	aa0c      	add	r2, sp, #48	@ 0x30
 800a642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a646:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800a64a:	e79e      	b.n	800a58a <__kernel_rem_pio2+0x1a2>
 800a64c:	4b2f      	ldr	r3, [pc, #188]	@ (800a70c <__kernel_rem_pio2+0x324>)
 800a64e:	2200      	movs	r2, #0
 800a650:	f7f6 fa58 	bl	8000b04 <__aeabi_dcmpge>
 800a654:	2800      	cmp	r0, #0
 800a656:	d143      	bne.n	800a6e0 <__kernel_rem_pio2+0x2f8>
 800a658:	4681      	mov	r9, r0
 800a65a:	2200      	movs	r2, #0
 800a65c:	2300      	movs	r3, #0
 800a65e:	4630      	mov	r0, r6
 800a660:	4639      	mov	r1, r7
 800a662:	f7f6 fa31 	bl	8000ac8 <__aeabi_dcmpeq>
 800a666:	2800      	cmp	r0, #0
 800a668:	f000 80bf 	beq.w	800a7ea <__kernel_rem_pio2+0x402>
 800a66c:	f108 33ff 	add.w	r3, r8, #4294967295
 800a670:	2200      	movs	r2, #0
 800a672:	9900      	ldr	r1, [sp, #0]
 800a674:	428b      	cmp	r3, r1
 800a676:	da6e      	bge.n	800a756 <__kernel_rem_pio2+0x36e>
 800a678:	2a00      	cmp	r2, #0
 800a67a:	f000 8089 	beq.w	800a790 <__kernel_rem_pio2+0x3a8>
 800a67e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a682:	ab0c      	add	r3, sp, #48	@ 0x30
 800a684:	f1ab 0b18 	sub.w	fp, fp, #24
 800a688:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d0f6      	beq.n	800a67e <__kernel_rem_pio2+0x296>
 800a690:	4658      	mov	r0, fp
 800a692:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800a6f0 <__kernel_rem_pio2+0x308>
 800a696:	f000 f9ff 	bl	800aa98 <scalbn>
 800a69a:	f108 0301 	add.w	r3, r8, #1
 800a69e:	00da      	lsls	r2, r3, #3
 800a6a0:	9205      	str	r2, [sp, #20]
 800a6a2:	ec55 4b10 	vmov	r4, r5, d0
 800a6a6:	aa70      	add	r2, sp, #448	@ 0x1c0
 800a6a8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800a704 <__kernel_rem_pio2+0x31c>
 800a6ac:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800a6b0:	4646      	mov	r6, r8
 800a6b2:	f04f 0a00 	mov.w	sl, #0
 800a6b6:	2e00      	cmp	r6, #0
 800a6b8:	f280 80cf 	bge.w	800a85a <__kernel_rem_pio2+0x472>
 800a6bc:	4644      	mov	r4, r8
 800a6be:	2c00      	cmp	r4, #0
 800a6c0:	f2c0 80fd 	blt.w	800a8be <__kernel_rem_pio2+0x4d6>
 800a6c4:	4b12      	ldr	r3, [pc, #72]	@ (800a710 <__kernel_rem_pio2+0x328>)
 800a6c6:	461f      	mov	r7, r3
 800a6c8:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a6ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a6ce:	9306      	str	r3, [sp, #24]
 800a6d0:	f04f 0a00 	mov.w	sl, #0
 800a6d4:	f04f 0b00 	mov.w	fp, #0
 800a6d8:	2600      	movs	r6, #0
 800a6da:	eba8 0504 	sub.w	r5, r8, r4
 800a6de:	e0e2      	b.n	800a8a6 <__kernel_rem_pio2+0x4be>
 800a6e0:	f04f 0902 	mov.w	r9, #2
 800a6e4:	e754      	b.n	800a590 <__kernel_rem_pio2+0x1a8>
 800a6e6:	bf00      	nop
	...
 800a6f4:	3ff00000 	.word	0x3ff00000
 800a6f8:	0800d170 	.word	0x0800d170
 800a6fc:	40200000 	.word	0x40200000
 800a700:	3ff00000 	.word	0x3ff00000
 800a704:	3e700000 	.word	0x3e700000
 800a708:	41700000 	.word	0x41700000
 800a70c:	3fe00000 	.word	0x3fe00000
 800a710:	0800d130 	.word	0x0800d130
 800a714:	f854 3b04 	ldr.w	r3, [r4], #4
 800a718:	b945      	cbnz	r5, 800a72c <__kernel_rem_pio2+0x344>
 800a71a:	b123      	cbz	r3, 800a726 <__kernel_rem_pio2+0x33e>
 800a71c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800a720:	f844 3c04 	str.w	r3, [r4, #-4]
 800a724:	2301      	movs	r3, #1
 800a726:	3201      	adds	r2, #1
 800a728:	461d      	mov	r5, r3
 800a72a:	e738      	b.n	800a59e <__kernel_rem_pio2+0x1b6>
 800a72c:	1acb      	subs	r3, r1, r3
 800a72e:	e7f7      	b.n	800a720 <__kernel_rem_pio2+0x338>
 800a730:	f108 32ff 	add.w	r2, r8, #4294967295
 800a734:	ab0c      	add	r3, sp, #48	@ 0x30
 800a736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a73a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a73e:	a90c      	add	r1, sp, #48	@ 0x30
 800a740:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a744:	e739      	b.n	800a5ba <__kernel_rem_pio2+0x1d2>
 800a746:	f108 32ff 	add.w	r2, r8, #4294967295
 800a74a:	ab0c      	add	r3, sp, #48	@ 0x30
 800a74c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a750:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a754:	e7f3      	b.n	800a73e <__kernel_rem_pio2+0x356>
 800a756:	a90c      	add	r1, sp, #48	@ 0x30
 800a758:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a75c:	3b01      	subs	r3, #1
 800a75e:	430a      	orrs	r2, r1
 800a760:	e787      	b.n	800a672 <__kernel_rem_pio2+0x28a>
 800a762:	3401      	adds	r4, #1
 800a764:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a768:	2a00      	cmp	r2, #0
 800a76a:	d0fa      	beq.n	800a762 <__kernel_rem_pio2+0x37a>
 800a76c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a76e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a772:	eb0d 0503 	add.w	r5, sp, r3
 800a776:	9b06      	ldr	r3, [sp, #24]
 800a778:	aa20      	add	r2, sp, #128	@ 0x80
 800a77a:	4443      	add	r3, r8
 800a77c:	f108 0701 	add.w	r7, r8, #1
 800a780:	3d98      	subs	r5, #152	@ 0x98
 800a782:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800a786:	4444      	add	r4, r8
 800a788:	42bc      	cmp	r4, r7
 800a78a:	da04      	bge.n	800a796 <__kernel_rem_pio2+0x3ae>
 800a78c:	46a0      	mov	r8, r4
 800a78e:	e6a2      	b.n	800a4d6 <__kernel_rem_pio2+0xee>
 800a790:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a792:	2401      	movs	r4, #1
 800a794:	e7e6      	b.n	800a764 <__kernel_rem_pio2+0x37c>
 800a796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a798:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a79c:	f7f5 fec2 	bl	8000524 <__aeabi_i2d>
 800a7a0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800aa68 <__kernel_rem_pio2+0x680>
 800a7a4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a7a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a7ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a7b0:	46b2      	mov	sl, r6
 800a7b2:	f04f 0800 	mov.w	r8, #0
 800a7b6:	9b05      	ldr	r3, [sp, #20]
 800a7b8:	4598      	cmp	r8, r3
 800a7ba:	dd05      	ble.n	800a7c8 <__kernel_rem_pio2+0x3e0>
 800a7bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7c0:	3701      	adds	r7, #1
 800a7c2:	eca5 7b02 	vstmia	r5!, {d7}
 800a7c6:	e7df      	b.n	800a788 <__kernel_rem_pio2+0x3a0>
 800a7c8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800a7cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a7d0:	f7f5 ff12 	bl	80005f8 <__aeabi_dmul>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7dc:	f7f5 fd56 	bl	800028c <__adddf3>
 800a7e0:	f108 0801 	add.w	r8, r8, #1
 800a7e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7e8:	e7e5      	b.n	800a7b6 <__kernel_rem_pio2+0x3ce>
 800a7ea:	f1cb 0000 	rsb	r0, fp, #0
 800a7ee:	ec47 6b10 	vmov	d0, r6, r7
 800a7f2:	f000 f951 	bl	800aa98 <scalbn>
 800a7f6:	ec55 4b10 	vmov	r4, r5, d0
 800a7fa:	4b9d      	ldr	r3, [pc, #628]	@ (800aa70 <__kernel_rem_pio2+0x688>)
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	4620      	mov	r0, r4
 800a800:	4629      	mov	r1, r5
 800a802:	f7f6 f97f 	bl	8000b04 <__aeabi_dcmpge>
 800a806:	b300      	cbz	r0, 800a84a <__kernel_rem_pio2+0x462>
 800a808:	4b9a      	ldr	r3, [pc, #616]	@ (800aa74 <__kernel_rem_pio2+0x68c>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	4620      	mov	r0, r4
 800a80e:	4629      	mov	r1, r5
 800a810:	f7f5 fef2 	bl	80005f8 <__aeabi_dmul>
 800a814:	f7f6 f98a 	bl	8000b2c <__aeabi_d2iz>
 800a818:	4606      	mov	r6, r0
 800a81a:	f7f5 fe83 	bl	8000524 <__aeabi_i2d>
 800a81e:	4b94      	ldr	r3, [pc, #592]	@ (800aa70 <__kernel_rem_pio2+0x688>)
 800a820:	2200      	movs	r2, #0
 800a822:	f7f5 fee9 	bl	80005f8 <__aeabi_dmul>
 800a826:	460b      	mov	r3, r1
 800a828:	4602      	mov	r2, r0
 800a82a:	4629      	mov	r1, r5
 800a82c:	4620      	mov	r0, r4
 800a82e:	f7f5 fd2b 	bl	8000288 <__aeabi_dsub>
 800a832:	f7f6 f97b 	bl	8000b2c <__aeabi_d2iz>
 800a836:	ab0c      	add	r3, sp, #48	@ 0x30
 800a838:	f10b 0b18 	add.w	fp, fp, #24
 800a83c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a840:	f108 0801 	add.w	r8, r8, #1
 800a844:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800a848:	e722      	b.n	800a690 <__kernel_rem_pio2+0x2a8>
 800a84a:	4620      	mov	r0, r4
 800a84c:	4629      	mov	r1, r5
 800a84e:	f7f6 f96d 	bl	8000b2c <__aeabi_d2iz>
 800a852:	ab0c      	add	r3, sp, #48	@ 0x30
 800a854:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a858:	e71a      	b.n	800a690 <__kernel_rem_pio2+0x2a8>
 800a85a:	ab0c      	add	r3, sp, #48	@ 0x30
 800a85c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a860:	f7f5 fe60 	bl	8000524 <__aeabi_i2d>
 800a864:	4622      	mov	r2, r4
 800a866:	462b      	mov	r3, r5
 800a868:	f7f5 fec6 	bl	80005f8 <__aeabi_dmul>
 800a86c:	4652      	mov	r2, sl
 800a86e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800a872:	465b      	mov	r3, fp
 800a874:	4620      	mov	r0, r4
 800a876:	4629      	mov	r1, r5
 800a878:	f7f5 febe 	bl	80005f8 <__aeabi_dmul>
 800a87c:	3e01      	subs	r6, #1
 800a87e:	4604      	mov	r4, r0
 800a880:	460d      	mov	r5, r1
 800a882:	e718      	b.n	800a6b6 <__kernel_rem_pio2+0x2ce>
 800a884:	9906      	ldr	r1, [sp, #24]
 800a886:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800a88a:	9106      	str	r1, [sp, #24]
 800a88c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800a890:	f7f5 feb2 	bl	80005f8 <__aeabi_dmul>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	4650      	mov	r0, sl
 800a89a:	4659      	mov	r1, fp
 800a89c:	f7f5 fcf6 	bl	800028c <__adddf3>
 800a8a0:	3601      	adds	r6, #1
 800a8a2:	4682      	mov	sl, r0
 800a8a4:	468b      	mov	fp, r1
 800a8a6:	9b00      	ldr	r3, [sp, #0]
 800a8a8:	429e      	cmp	r6, r3
 800a8aa:	dc01      	bgt.n	800a8b0 <__kernel_rem_pio2+0x4c8>
 800a8ac:	42b5      	cmp	r5, r6
 800a8ae:	dae9      	bge.n	800a884 <__kernel_rem_pio2+0x49c>
 800a8b0:	ab48      	add	r3, sp, #288	@ 0x120
 800a8b2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a8b6:	e9c5 ab00 	strd	sl, fp, [r5]
 800a8ba:	3c01      	subs	r4, #1
 800a8bc:	e6ff      	b.n	800a6be <__kernel_rem_pio2+0x2d6>
 800a8be:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a8c0:	2b02      	cmp	r3, #2
 800a8c2:	dc0b      	bgt.n	800a8dc <__kernel_rem_pio2+0x4f4>
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	dc39      	bgt.n	800a93c <__kernel_rem_pio2+0x554>
 800a8c8:	d05d      	beq.n	800a986 <__kernel_rem_pio2+0x59e>
 800a8ca:	9b02      	ldr	r3, [sp, #8]
 800a8cc:	f003 0007 	and.w	r0, r3, #7
 800a8d0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800a8d4:	ecbd 8b02 	vpop	{d8}
 800a8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8dc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a8de:	2b03      	cmp	r3, #3
 800a8e0:	d1f3      	bne.n	800a8ca <__kernel_rem_pio2+0x4e2>
 800a8e2:	9b05      	ldr	r3, [sp, #20]
 800a8e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a8e8:	eb0d 0403 	add.w	r4, sp, r3
 800a8ec:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800a8f0:	4625      	mov	r5, r4
 800a8f2:	46c2      	mov	sl, r8
 800a8f4:	f1ba 0f00 	cmp.w	sl, #0
 800a8f8:	f1a5 0508 	sub.w	r5, r5, #8
 800a8fc:	dc6b      	bgt.n	800a9d6 <__kernel_rem_pio2+0x5ee>
 800a8fe:	4645      	mov	r5, r8
 800a900:	2d01      	cmp	r5, #1
 800a902:	f1a4 0408 	sub.w	r4, r4, #8
 800a906:	f300 8087 	bgt.w	800aa18 <__kernel_rem_pio2+0x630>
 800a90a:	9c05      	ldr	r4, [sp, #20]
 800a90c:	ab48      	add	r3, sp, #288	@ 0x120
 800a90e:	441c      	add	r4, r3
 800a910:	2000      	movs	r0, #0
 800a912:	2100      	movs	r1, #0
 800a914:	f1b8 0f01 	cmp.w	r8, #1
 800a918:	f300 809c 	bgt.w	800aa54 <__kernel_rem_pio2+0x66c>
 800a91c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800a920:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800a924:	f1b9 0f00 	cmp.w	r9, #0
 800a928:	f040 80a6 	bne.w	800aa78 <__kernel_rem_pio2+0x690>
 800a92c:	9b04      	ldr	r3, [sp, #16]
 800a92e:	e9c3 7800 	strd	r7, r8, [r3]
 800a932:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a936:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a93a:	e7c6      	b.n	800a8ca <__kernel_rem_pio2+0x4e2>
 800a93c:	9d05      	ldr	r5, [sp, #20]
 800a93e:	ab48      	add	r3, sp, #288	@ 0x120
 800a940:	441d      	add	r5, r3
 800a942:	4644      	mov	r4, r8
 800a944:	2000      	movs	r0, #0
 800a946:	2100      	movs	r1, #0
 800a948:	2c00      	cmp	r4, #0
 800a94a:	da35      	bge.n	800a9b8 <__kernel_rem_pio2+0x5d0>
 800a94c:	f1b9 0f00 	cmp.w	r9, #0
 800a950:	d038      	beq.n	800a9c4 <__kernel_rem_pio2+0x5dc>
 800a952:	4602      	mov	r2, r0
 800a954:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a958:	9c04      	ldr	r4, [sp, #16]
 800a95a:	e9c4 2300 	strd	r2, r3, [r4]
 800a95e:	4602      	mov	r2, r0
 800a960:	460b      	mov	r3, r1
 800a962:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800a966:	f7f5 fc8f 	bl	8000288 <__aeabi_dsub>
 800a96a:	ad4a      	add	r5, sp, #296	@ 0x128
 800a96c:	2401      	movs	r4, #1
 800a96e:	45a0      	cmp	r8, r4
 800a970:	da2b      	bge.n	800a9ca <__kernel_rem_pio2+0x5e2>
 800a972:	f1b9 0f00 	cmp.w	r9, #0
 800a976:	d002      	beq.n	800a97e <__kernel_rem_pio2+0x596>
 800a978:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a97c:	4619      	mov	r1, r3
 800a97e:	9b04      	ldr	r3, [sp, #16]
 800a980:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a984:	e7a1      	b.n	800a8ca <__kernel_rem_pio2+0x4e2>
 800a986:	9c05      	ldr	r4, [sp, #20]
 800a988:	ab48      	add	r3, sp, #288	@ 0x120
 800a98a:	441c      	add	r4, r3
 800a98c:	2000      	movs	r0, #0
 800a98e:	2100      	movs	r1, #0
 800a990:	f1b8 0f00 	cmp.w	r8, #0
 800a994:	da09      	bge.n	800a9aa <__kernel_rem_pio2+0x5c2>
 800a996:	f1b9 0f00 	cmp.w	r9, #0
 800a99a:	d002      	beq.n	800a9a2 <__kernel_rem_pio2+0x5ba>
 800a99c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	9b04      	ldr	r3, [sp, #16]
 800a9a4:	e9c3 0100 	strd	r0, r1, [r3]
 800a9a8:	e78f      	b.n	800a8ca <__kernel_rem_pio2+0x4e2>
 800a9aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a9ae:	f7f5 fc6d 	bl	800028c <__adddf3>
 800a9b2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a9b6:	e7eb      	b.n	800a990 <__kernel_rem_pio2+0x5a8>
 800a9b8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a9bc:	f7f5 fc66 	bl	800028c <__adddf3>
 800a9c0:	3c01      	subs	r4, #1
 800a9c2:	e7c1      	b.n	800a948 <__kernel_rem_pio2+0x560>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	e7c6      	b.n	800a958 <__kernel_rem_pio2+0x570>
 800a9ca:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a9ce:	f7f5 fc5d 	bl	800028c <__adddf3>
 800a9d2:	3401      	adds	r4, #1
 800a9d4:	e7cb      	b.n	800a96e <__kernel_rem_pio2+0x586>
 800a9d6:	ed95 7b00 	vldr	d7, [r5]
 800a9da:	ed8d 7b00 	vstr	d7, [sp]
 800a9de:	ed95 7b02 	vldr	d7, [r5, #8]
 800a9e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9e6:	ec53 2b17 	vmov	r2, r3, d7
 800a9ea:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9ee:	f7f5 fc4d 	bl	800028c <__adddf3>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4606      	mov	r6, r0
 800a9f8:	460f      	mov	r7, r1
 800a9fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9fe:	f7f5 fc43 	bl	8000288 <__aeabi_dsub>
 800aa02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa06:	f7f5 fc41 	bl	800028c <__adddf3>
 800aa0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa0e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800aa12:	e9c5 6700 	strd	r6, r7, [r5]
 800aa16:	e76d      	b.n	800a8f4 <__kernel_rem_pio2+0x50c>
 800aa18:	ed94 7b00 	vldr	d7, [r4]
 800aa1c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800aa20:	ec51 0b17 	vmov	r0, r1, d7
 800aa24:	4652      	mov	r2, sl
 800aa26:	465b      	mov	r3, fp
 800aa28:	ed8d 7b00 	vstr	d7, [sp]
 800aa2c:	f7f5 fc2e 	bl	800028c <__adddf3>
 800aa30:	4602      	mov	r2, r0
 800aa32:	460b      	mov	r3, r1
 800aa34:	4606      	mov	r6, r0
 800aa36:	460f      	mov	r7, r1
 800aa38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa3c:	f7f5 fc24 	bl	8000288 <__aeabi_dsub>
 800aa40:	4652      	mov	r2, sl
 800aa42:	465b      	mov	r3, fp
 800aa44:	f7f5 fc22 	bl	800028c <__adddf3>
 800aa48:	3d01      	subs	r5, #1
 800aa4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa4e:	e9c4 6700 	strd	r6, r7, [r4]
 800aa52:	e755      	b.n	800a900 <__kernel_rem_pio2+0x518>
 800aa54:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa58:	f7f5 fc18 	bl	800028c <__adddf3>
 800aa5c:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa60:	e758      	b.n	800a914 <__kernel_rem_pio2+0x52c>
 800aa62:	bf00      	nop
 800aa64:	f3af 8000 	nop.w
	...
 800aa70:	41700000 	.word	0x41700000
 800aa74:	3e700000 	.word	0x3e700000
 800aa78:	9b04      	ldr	r3, [sp, #16]
 800aa7a:	9a04      	ldr	r2, [sp, #16]
 800aa7c:	601f      	str	r7, [r3, #0]
 800aa7e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800aa82:	605c      	str	r4, [r3, #4]
 800aa84:	609d      	str	r5, [r3, #8]
 800aa86:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aa8a:	60d3      	str	r3, [r2, #12]
 800aa8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa90:	6110      	str	r0, [r2, #16]
 800aa92:	6153      	str	r3, [r2, #20]
 800aa94:	e719      	b.n	800a8ca <__kernel_rem_pio2+0x4e2>
 800aa96:	bf00      	nop

0800aa98 <scalbn>:
 800aa98:	b570      	push	{r4, r5, r6, lr}
 800aa9a:	ec55 4b10 	vmov	r4, r5, d0
 800aa9e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800aaa2:	4606      	mov	r6, r0
 800aaa4:	462b      	mov	r3, r5
 800aaa6:	b991      	cbnz	r1, 800aace <scalbn+0x36>
 800aaa8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800aaac:	4323      	orrs	r3, r4
 800aaae:	d03d      	beq.n	800ab2c <scalbn+0x94>
 800aab0:	4b35      	ldr	r3, [pc, #212]	@ (800ab88 <scalbn+0xf0>)
 800aab2:	4620      	mov	r0, r4
 800aab4:	4629      	mov	r1, r5
 800aab6:	2200      	movs	r2, #0
 800aab8:	f7f5 fd9e 	bl	80005f8 <__aeabi_dmul>
 800aabc:	4b33      	ldr	r3, [pc, #204]	@ (800ab8c <scalbn+0xf4>)
 800aabe:	429e      	cmp	r6, r3
 800aac0:	4604      	mov	r4, r0
 800aac2:	460d      	mov	r5, r1
 800aac4:	da0f      	bge.n	800aae6 <scalbn+0x4e>
 800aac6:	a328      	add	r3, pc, #160	@ (adr r3, 800ab68 <scalbn+0xd0>)
 800aac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aacc:	e01e      	b.n	800ab0c <scalbn+0x74>
 800aace:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800aad2:	4291      	cmp	r1, r2
 800aad4:	d10b      	bne.n	800aaee <scalbn+0x56>
 800aad6:	4622      	mov	r2, r4
 800aad8:	4620      	mov	r0, r4
 800aada:	4629      	mov	r1, r5
 800aadc:	f7f5 fbd6 	bl	800028c <__adddf3>
 800aae0:	4604      	mov	r4, r0
 800aae2:	460d      	mov	r5, r1
 800aae4:	e022      	b.n	800ab2c <scalbn+0x94>
 800aae6:	460b      	mov	r3, r1
 800aae8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800aaec:	3936      	subs	r1, #54	@ 0x36
 800aaee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800aaf2:	4296      	cmp	r6, r2
 800aaf4:	dd0d      	ble.n	800ab12 <scalbn+0x7a>
 800aaf6:	2d00      	cmp	r5, #0
 800aaf8:	a11d      	add	r1, pc, #116	@ (adr r1, 800ab70 <scalbn+0xd8>)
 800aafa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aafe:	da02      	bge.n	800ab06 <scalbn+0x6e>
 800ab00:	a11d      	add	r1, pc, #116	@ (adr r1, 800ab78 <scalbn+0xe0>)
 800ab02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab06:	a31a      	add	r3, pc, #104	@ (adr r3, 800ab70 <scalbn+0xd8>)
 800ab08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0c:	f7f5 fd74 	bl	80005f8 <__aeabi_dmul>
 800ab10:	e7e6      	b.n	800aae0 <scalbn+0x48>
 800ab12:	1872      	adds	r2, r6, r1
 800ab14:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ab18:	428a      	cmp	r2, r1
 800ab1a:	dcec      	bgt.n	800aaf6 <scalbn+0x5e>
 800ab1c:	2a00      	cmp	r2, #0
 800ab1e:	dd08      	ble.n	800ab32 <scalbn+0x9a>
 800ab20:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ab24:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ab28:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ab2c:	ec45 4b10 	vmov	d0, r4, r5
 800ab30:	bd70      	pop	{r4, r5, r6, pc}
 800ab32:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ab36:	da08      	bge.n	800ab4a <scalbn+0xb2>
 800ab38:	2d00      	cmp	r5, #0
 800ab3a:	a10b      	add	r1, pc, #44	@ (adr r1, 800ab68 <scalbn+0xd0>)
 800ab3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab40:	dac1      	bge.n	800aac6 <scalbn+0x2e>
 800ab42:	a10f      	add	r1, pc, #60	@ (adr r1, 800ab80 <scalbn+0xe8>)
 800ab44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab48:	e7bd      	b.n	800aac6 <scalbn+0x2e>
 800ab4a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ab4e:	3236      	adds	r2, #54	@ 0x36
 800ab50:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ab54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ab58:	4620      	mov	r0, r4
 800ab5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab90 <scalbn+0xf8>)
 800ab5c:	4629      	mov	r1, r5
 800ab5e:	2200      	movs	r2, #0
 800ab60:	e7d4      	b.n	800ab0c <scalbn+0x74>
 800ab62:	bf00      	nop
 800ab64:	f3af 8000 	nop.w
 800ab68:	c2f8f359 	.word	0xc2f8f359
 800ab6c:	01a56e1f 	.word	0x01a56e1f
 800ab70:	8800759c 	.word	0x8800759c
 800ab74:	7e37e43c 	.word	0x7e37e43c
 800ab78:	8800759c 	.word	0x8800759c
 800ab7c:	fe37e43c 	.word	0xfe37e43c
 800ab80:	c2f8f359 	.word	0xc2f8f359
 800ab84:	81a56e1f 	.word	0x81a56e1f
 800ab88:	43500000 	.word	0x43500000
 800ab8c:	ffff3cb0 	.word	0xffff3cb0
 800ab90:	3c900000 	.word	0x3c900000
 800ab94:	00000000 	.word	0x00000000

0800ab98 <floor>:
 800ab98:	ec51 0b10 	vmov	r0, r1, d0
 800ab9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800aba8:	2e13      	cmp	r6, #19
 800abaa:	460c      	mov	r4, r1
 800abac:	4605      	mov	r5, r0
 800abae:	4680      	mov	r8, r0
 800abb0:	dc34      	bgt.n	800ac1c <floor+0x84>
 800abb2:	2e00      	cmp	r6, #0
 800abb4:	da17      	bge.n	800abe6 <floor+0x4e>
 800abb6:	a332      	add	r3, pc, #200	@ (adr r3, 800ac80 <floor+0xe8>)
 800abb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbc:	f7f5 fb66 	bl	800028c <__adddf3>
 800abc0:	2200      	movs	r2, #0
 800abc2:	2300      	movs	r3, #0
 800abc4:	f7f5 ffa8 	bl	8000b18 <__aeabi_dcmpgt>
 800abc8:	b150      	cbz	r0, 800abe0 <floor+0x48>
 800abca:	2c00      	cmp	r4, #0
 800abcc:	da55      	bge.n	800ac7a <floor+0xe2>
 800abce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800abd2:	432c      	orrs	r4, r5
 800abd4:	2500      	movs	r5, #0
 800abd6:	42ac      	cmp	r4, r5
 800abd8:	4c2b      	ldr	r4, [pc, #172]	@ (800ac88 <floor+0xf0>)
 800abda:	bf08      	it	eq
 800abdc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800abe0:	4621      	mov	r1, r4
 800abe2:	4628      	mov	r0, r5
 800abe4:	e023      	b.n	800ac2e <floor+0x96>
 800abe6:	4f29      	ldr	r7, [pc, #164]	@ (800ac8c <floor+0xf4>)
 800abe8:	4137      	asrs	r7, r6
 800abea:	ea01 0307 	and.w	r3, r1, r7
 800abee:	4303      	orrs	r3, r0
 800abf0:	d01d      	beq.n	800ac2e <floor+0x96>
 800abf2:	a323      	add	r3, pc, #140	@ (adr r3, 800ac80 <floor+0xe8>)
 800abf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf8:	f7f5 fb48 	bl	800028c <__adddf3>
 800abfc:	2200      	movs	r2, #0
 800abfe:	2300      	movs	r3, #0
 800ac00:	f7f5 ff8a 	bl	8000b18 <__aeabi_dcmpgt>
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d0eb      	beq.n	800abe0 <floor+0x48>
 800ac08:	2c00      	cmp	r4, #0
 800ac0a:	bfbe      	ittt	lt
 800ac0c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800ac10:	4133      	asrlt	r3, r6
 800ac12:	18e4      	addlt	r4, r4, r3
 800ac14:	ea24 0407 	bic.w	r4, r4, r7
 800ac18:	2500      	movs	r5, #0
 800ac1a:	e7e1      	b.n	800abe0 <floor+0x48>
 800ac1c:	2e33      	cmp	r6, #51	@ 0x33
 800ac1e:	dd0a      	ble.n	800ac36 <floor+0x9e>
 800ac20:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800ac24:	d103      	bne.n	800ac2e <floor+0x96>
 800ac26:	4602      	mov	r2, r0
 800ac28:	460b      	mov	r3, r1
 800ac2a:	f7f5 fb2f 	bl	800028c <__adddf3>
 800ac2e:	ec41 0b10 	vmov	d0, r0, r1
 800ac32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac36:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800ac3a:	f04f 37ff 	mov.w	r7, #4294967295
 800ac3e:	40df      	lsrs	r7, r3
 800ac40:	4207      	tst	r7, r0
 800ac42:	d0f4      	beq.n	800ac2e <floor+0x96>
 800ac44:	a30e      	add	r3, pc, #56	@ (adr r3, 800ac80 <floor+0xe8>)
 800ac46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4a:	f7f5 fb1f 	bl	800028c <__adddf3>
 800ac4e:	2200      	movs	r2, #0
 800ac50:	2300      	movs	r3, #0
 800ac52:	f7f5 ff61 	bl	8000b18 <__aeabi_dcmpgt>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d0c2      	beq.n	800abe0 <floor+0x48>
 800ac5a:	2c00      	cmp	r4, #0
 800ac5c:	da0a      	bge.n	800ac74 <floor+0xdc>
 800ac5e:	2e14      	cmp	r6, #20
 800ac60:	d101      	bne.n	800ac66 <floor+0xce>
 800ac62:	3401      	adds	r4, #1
 800ac64:	e006      	b.n	800ac74 <floor+0xdc>
 800ac66:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	40b3      	lsls	r3, r6
 800ac6e:	441d      	add	r5, r3
 800ac70:	4545      	cmp	r5, r8
 800ac72:	d3f6      	bcc.n	800ac62 <floor+0xca>
 800ac74:	ea25 0507 	bic.w	r5, r5, r7
 800ac78:	e7b2      	b.n	800abe0 <floor+0x48>
 800ac7a:	2500      	movs	r5, #0
 800ac7c:	462c      	mov	r4, r5
 800ac7e:	e7af      	b.n	800abe0 <floor+0x48>
 800ac80:	8800759c 	.word	0x8800759c
 800ac84:	7e37e43c 	.word	0x7e37e43c
 800ac88:	bff00000 	.word	0xbff00000
 800ac8c:	000fffff 	.word	0x000fffff

0800ac90 <_init>:
 800ac90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac92:	bf00      	nop
 800ac94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac96:	bc08      	pop	{r3}
 800ac98:	469e      	mov	lr, r3
 800ac9a:	4770      	bx	lr

0800ac9c <_fini>:
 800ac9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9e:	bf00      	nop
 800aca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aca2:	bc08      	pop	{r3}
 800aca4:	469e      	mov	lr, r3
 800aca6:	4770      	bx	lr
