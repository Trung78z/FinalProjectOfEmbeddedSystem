
ES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aac8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024d8  0800ac58  0800ac58  0000bc58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d130  0800d130  0000f074  2**0
                  CONTENTS
  4 .ARM          00000008  0800d130  0800d130  0000e130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d138  0800d138  0000f074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d138  0800d138  0000e138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d13c  0800d13c  0000e13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800d140  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f074  2**0
                  CONTENTS
 10 .bss          00005690  20000074  20000074  0000f074  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  20005704  20005704  0000f074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f18e  00000000  00000000  0000f0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a64  00000000  00000000  0002e232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019a8  00000000  00000000  00032c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002486c  00000000  00000000  00034640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021c4f  00000000  00000000  00058eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfec5  00000000  00000000  0007aafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a9c0  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 000013c7  00000000  00000000  0014aa03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000072f4  00000000  00000000  0014bdcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  001530c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ac40 	.word	0x0800ac40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800ac40 	.word	0x0800ac40

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b96a 	b.w	8000ea8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	460c      	mov	r4, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14e      	bne.n	8000c96 <__udivmoddi4+0xaa>
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	458c      	cmp	ip, r1
 8000bfc:	4686      	mov	lr, r0
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	d962      	bls.n	8000cca <__udivmoddi4+0xde>
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	4091      	lsls	r1, r2
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c14:	4319      	orrs	r1, r3
 8000c16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1e:	fa1f f68c 	uxth.w	r6, ip
 8000c22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c32:	fb04 f106 	mul.w	r1, r4, r6
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x64>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c42:	f080 8112 	bcs.w	8000e6a <__udivmoddi4+0x27e>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 810f 	bls.w	8000e6a <__udivmoddi4+0x27e>
 8000c4c:	3c02      	subs	r4, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	fa1f f38e 	uxth.w	r3, lr
 8000c56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c62:	fb00 f606 	mul.w	r6, r0, r6
 8000c66:	429e      	cmp	r6, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x94>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c72:	f080 80fc 	bcs.w	8000e6e <__udivmoddi4+0x282>
 8000c76:	429e      	cmp	r6, r3
 8000c78:	f240 80f9 	bls.w	8000e6e <__udivmoddi4+0x282>
 8000c7c:	4463      	add	r3, ip
 8000c7e:	3802      	subs	r0, #2
 8000c80:	1b9b      	subs	r3, r3, r6
 8000c82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c86:	2100      	movs	r1, #0
 8000c88:	b11d      	cbz	r5, 8000c92 <__udivmoddi4+0xa6>
 8000c8a:	40d3      	lsrs	r3, r2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d905      	bls.n	8000ca6 <__udivmoddi4+0xba>
 8000c9a:	b10d      	cbz	r5, 8000ca0 <__udivmoddi4+0xb4>
 8000c9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e7f5      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000ca6:	fab3 f183 	clz	r1, r3
 8000caa:	2900      	cmp	r1, #0
 8000cac:	d146      	bne.n	8000d3c <__udivmoddi4+0x150>
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xcc>
 8000cb2:	4290      	cmp	r0, r2
 8000cb4:	f0c0 80f0 	bcc.w	8000e98 <__udivmoddi4+0x2ac>
 8000cb8:	1a86      	subs	r6, r0, r2
 8000cba:	eb64 0303 	sbc.w	r3, r4, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	2d00      	cmp	r5, #0
 8000cc2:	d0e6      	beq.n	8000c92 <__udivmoddi4+0xa6>
 8000cc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc8:	e7e3      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	f040 8090 	bne.w	8000df0 <__udivmoddi4+0x204>
 8000cd0:	eba1 040c 	sub.w	r4, r1, ip
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa1f f78c 	uxth.w	r7, ip
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb07 f006 	mul.w	r0, r7, r6
 8000cf2:	4298      	cmp	r0, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x11c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x11a>
 8000d00:	4298      	cmp	r0, r3
 8000d02:	f200 80cd 	bhi.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d06:	4626      	mov	r6, r4
 8000d08:	1a1c      	subs	r4, r3, r0
 8000d0a:	fa1f f38e 	uxth.w	r3, lr
 8000d0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d12:	fb08 4410 	mls	r4, r8, r0, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb00 f707 	mul.w	r7, r0, r7
 8000d1e:	429f      	cmp	r7, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x148>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x146>
 8000d2c:	429f      	cmp	r7, r3
 8000d2e:	f200 80b0 	bhi.w	8000e92 <__udivmoddi4+0x2a6>
 8000d32:	4620      	mov	r0, r4
 8000d34:	1bdb      	subs	r3, r3, r7
 8000d36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0x9c>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa22 f706 	lsr.w	r7, r2, r6
 8000d46:	431f      	orrs	r7, r3
 8000d48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d50:	ea43 030c 	orr.w	r3, r3, ip
 8000d54:	40f4      	lsrs	r4, r6
 8000d56:	fa00 f801 	lsl.w	r8, r0, r1
 8000d5a:	0c38      	lsrs	r0, r7, #16
 8000d5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d60:	fbb4 fef0 	udiv	lr, r4, r0
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	fb00 441e 	mls	r4, r0, lr, r4
 8000d6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d70:	fb0e f90c 	mul.w	r9, lr, ip
 8000d74:	45a1      	cmp	r9, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	d90a      	bls.n	8000d92 <__udivmoddi4+0x1a6>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d82:	f080 8084 	bcs.w	8000e8e <__udivmoddi4+0x2a2>
 8000d86:	45a1      	cmp	r9, r4
 8000d88:	f240 8081 	bls.w	8000e8e <__udivmoddi4+0x2a2>
 8000d8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	eba4 0409 	sub.w	r4, r4, r9
 8000d96:	fa1f f983 	uxth.w	r9, r3
 8000d9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000da2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000daa:	45a4      	cmp	ip, r4
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x1d2>
 8000dae:	193c      	adds	r4, r7, r4
 8000db0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db4:	d267      	bcs.n	8000e86 <__udivmoddi4+0x29a>
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d965      	bls.n	8000e86 <__udivmoddi4+0x29a>
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc6:	eba4 040c 	sub.w	r4, r4, ip
 8000dca:	429c      	cmp	r4, r3
 8000dcc:	46ce      	mov	lr, r9
 8000dce:	469c      	mov	ip, r3
 8000dd0:	d351      	bcc.n	8000e76 <__udivmoddi4+0x28a>
 8000dd2:	d04e      	beq.n	8000e72 <__udivmoddi4+0x286>
 8000dd4:	b155      	cbz	r5, 8000dec <__udivmoddi4+0x200>
 8000dd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dda:	eb64 040c 	sbc.w	r4, r4, ip
 8000dde:	fa04 f606 	lsl.w	r6, r4, r6
 8000de2:	40cb      	lsrs	r3, r1
 8000de4:	431e      	orrs	r6, r3
 8000de6:	40cc      	lsrs	r4, r1
 8000de8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	e750      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f103 	lsr.w	r1, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000e00:	4094      	lsls	r4, r2
 8000e02:	430c      	orrs	r4, r1
 8000e04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e0c:	fa1f f78c 	uxth.w	r7, ip
 8000e10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e14:	fb08 3110 	mls	r1, r8, r0, r3
 8000e18:	0c23      	lsrs	r3, r4, #16
 8000e1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1e:	fb00 f107 	mul.w	r1, r0, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x24c>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2e:	d22c      	bcs.n	8000e8a <__udivmoddi4+0x29e>
 8000e30:	4299      	cmp	r1, r3
 8000e32:	d92a      	bls.n	8000e8a <__udivmoddi4+0x29e>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e40:	fb08 3311 	mls	r3, r8, r1, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb01 f307 	mul.w	r3, r1, r7
 8000e4c:	42a3      	cmp	r3, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x276>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e58:	d213      	bcs.n	8000e82 <__udivmoddi4+0x296>
 8000e5a:	42a3      	cmp	r3, r4
 8000e5c:	d911      	bls.n	8000e82 <__udivmoddi4+0x296>
 8000e5e:	3902      	subs	r1, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	1ae4      	subs	r4, r4, r3
 8000e64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e68:	e739      	b.n	8000cde <__udivmoddi4+0xf2>
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	e6f0      	b.n	8000c50 <__udivmoddi4+0x64>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e706      	b.n	8000c80 <__udivmoddi4+0x94>
 8000e72:	45c8      	cmp	r8, r9
 8000e74:	d2ae      	bcs.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7e:	3801      	subs	r0, #1
 8000e80:	e7a8      	b.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e82:	4631      	mov	r1, r6
 8000e84:	e7ed      	b.n	8000e62 <__udivmoddi4+0x276>
 8000e86:	4603      	mov	r3, r0
 8000e88:	e799      	b.n	8000dbe <__udivmoddi4+0x1d2>
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	e7d4      	b.n	8000e38 <__udivmoddi4+0x24c>
 8000e8e:	46d6      	mov	lr, sl
 8000e90:	e77f      	b.n	8000d92 <__udivmoddi4+0x1a6>
 8000e92:	4463      	add	r3, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e74d      	b.n	8000d34 <__udivmoddi4+0x148>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	4623      	mov	r3, r4
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e70f      	b.n	8000cc0 <__udivmoddi4+0xd4>
 8000ea0:	3e02      	subs	r6, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	e730      	b.n	8000d08 <__udivmoddi4+0x11c>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2180      	movs	r1, #128	@ 0x80
 8000eba:	480c      	ldr	r0, [pc, #48]	@ (8000eec <ST7789_WriteCommand+0x40>)
 8000ebc:	f002 fcf6 	bl	80038ac <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ec6:	4809      	ldr	r0, [pc, #36]	@ (8000eec <ST7789_WriteCommand+0x40>)
 8000ec8:	f002 fcf0 	bl	80038ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000ecc:	1df9      	adds	r1, r7, #7
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4806      	ldr	r0, [pc, #24]	@ (8000ef0 <ST7789_WriteCommand+0x44>)
 8000ed6:	f003 fa6e 	bl	80043b6 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000eda:	2201      	movs	r2, #1
 8000edc:	2180      	movs	r1, #128	@ 0x80
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <ST7789_WriteCommand+0x40>)
 8000ee0:	f002 fce4 	bl	80038ac <HAL_GPIO_WritePin>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	20000a24 	.word	0x20000a24

08000ef4 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8000efe:	2200      	movs	r2, #0
 8000f00:	2180      	movs	r1, #128	@ 0x80
 8000f02:	4820      	ldr	r0, [pc, #128]	@ (8000f84 <ST7789_WriteData+0x90>)
 8000f04:	f002 fcd2 	bl	80038ac <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f0e:	481d      	ldr	r0, [pc, #116]	@ (8000f84 <ST7789_WriteData+0x90>)
 8000f10:	f002 fccc 	bl	80038ac <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8000f14:	e02a      	b.n	8000f6c <ST7789_WriteData+0x78>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	bf28      	it	cs
 8000f20:	4613      	movcs	r3, r2
 8000f22:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 8000f24:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <ST7789_WriteData+0x94>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d30e      	bcc.n	8000f4e <ST7789_WriteData+0x5a>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 8000f30:	89fb      	ldrh	r3, [r7, #14]
 8000f32:	461a      	mov	r2, r3
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	4815      	ldr	r0, [pc, #84]	@ (8000f8c <ST7789_WriteData+0x98>)
 8000f38:	f003 fd2a 	bl	8004990 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8000f3c:	bf00      	nop
 8000f3e:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <ST7789_WriteData+0x98>)
 8000f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d1f8      	bne.n	8000f3e <ST7789_WriteData+0x4a>
 8000f4c:	e006      	b.n	8000f5c <ST7789_WriteData+0x68>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000f4e:	89fa      	ldrh	r2, [r7, #14]
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	480d      	ldr	r0, [pc, #52]	@ (8000f8c <ST7789_WriteData+0x98>)
 8000f58:	f003 fa2d 	bl	80043b6 <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 8000f5c:	89fb      	ldrh	r3, [r7, #14]
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8000f64:	89fb      	ldrh	r3, [r7, #14]
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1d1      	bne.n	8000f16 <ST7789_WriteData+0x22>
	}

	ST7789_UnSelect();
 8000f72:	2201      	movs	r2, #1
 8000f74:	2180      	movs	r1, #128	@ 0x80
 8000f76:	4803      	ldr	r0, [pc, #12]	@ (8000f84 <ST7789_WriteData+0x90>)
 8000f78:	f002 fc98 	bl	80038ac <HAL_GPIO_WritePin>
}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40020400 	.word	0x40020400
 8000f88:	20000010 	.word	0x20000010
 8000f8c:	20000a24 	.word	0x20000a24

08000f90 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2180      	movs	r1, #128	@ 0x80
 8000f9e:	480c      	ldr	r0, [pc, #48]	@ (8000fd0 <ST7789_WriteSmallData+0x40>)
 8000fa0:	f002 fc84 	bl	80038ac <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000faa:	4809      	ldr	r0, [pc, #36]	@ (8000fd0 <ST7789_WriteSmallData+0x40>)
 8000fac:	f002 fc7e 	bl	80038ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000fb0:	1df9      	adds	r1, r7, #7
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <ST7789_WriteSmallData+0x44>)
 8000fba:	f003 f9fc 	bl	80043b6 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2180      	movs	r1, #128	@ 0x80
 8000fc2:	4803      	ldr	r0, [pc, #12]	@ (8000fd0 <ST7789_WriteSmallData+0x40>)
 8000fc4:	f002 fc72 	bl	80038ac <HAL_GPIO_WritePin>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	20000a24 	.word	0x20000a24

08000fd8 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8000fe2:	2036      	movs	r0, #54	@ 0x36
 8000fe4:	f7ff ff62 	bl	8000eac <ST7789_WriteCommand>
	switch (m) {
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d81a      	bhi.n	8001024 <ST7789_SetRotation+0x4c>
 8000fee:	a201      	add	r2, pc, #4	@ (adr r2, 8000ff4 <ST7789_SetRotation+0x1c>)
 8000ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff4:	08001005 	.word	0x08001005
 8000ff8:	0800100d 	.word	0x0800100d
 8000ffc:	08001015 	.word	0x08001015
 8001000:	0800101d 	.word	0x0800101d
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001004:	20c0      	movs	r0, #192	@ 0xc0
 8001006:	f7ff ffc3 	bl	8000f90 <ST7789_WriteSmallData>
		break;
 800100a:	e00c      	b.n	8001026 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800100c:	20a0      	movs	r0, #160	@ 0xa0
 800100e:	f7ff ffbf 	bl	8000f90 <ST7789_WriteSmallData>
		break;
 8001012:	e008      	b.n	8001026 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff ffbb 	bl	8000f90 <ST7789_WriteSmallData>
		break;
 800101a:	e004      	b.n	8001026 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800101c:	2060      	movs	r0, #96	@ 0x60
 800101e:	f7ff ffb7 	bl	8000f90 <ST7789_WriteSmallData>
		break;
 8001022:	e000      	b.n	8001026 <ST7789_SetRotation+0x4e>
	default:
		break;
 8001024:	bf00      	nop
	}
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop

08001030 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	4604      	mov	r4, r0
 8001038:	4608      	mov	r0, r1
 800103a:	4611      	mov	r1, r2
 800103c:	461a      	mov	r2, r3
 800103e:	4623      	mov	r3, r4
 8001040:	80fb      	strh	r3, [r7, #6]
 8001042:	4603      	mov	r3, r0
 8001044:	80bb      	strh	r3, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	807b      	strh	r3, [r7, #2]
 800104a:	4613      	mov	r3, r2
 800104c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800104e:	2200      	movs	r2, #0
 8001050:	2180      	movs	r1, #128	@ 0x80
 8001052:	4824      	ldr	r0, [pc, #144]	@ (80010e4 <ST7789_SetAddressWindow+0xb4>)
 8001054:	f002 fc2a 	bl	80038ac <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	82fb      	strh	r3, [r7, #22]
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8001060:	88bb      	ldrh	r3, [r7, #4]
 8001062:	827b      	strh	r3, [r7, #18]
 8001064:	883b      	ldrh	r3, [r7, #0]
 8001066:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8001068:	202a      	movs	r0, #42	@ 0x2a
 800106a:	f7ff ff1f 	bl	8000eac <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 800106e:	8afb      	ldrh	r3, [r7, #22]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	b29b      	uxth	r3, r3
 8001074:	b2db      	uxtb	r3, r3
 8001076:	733b      	strb	r3, [r7, #12]
 8001078:	8afb      	ldrh	r3, [r7, #22]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	737b      	strb	r3, [r7, #13]
 800107e:	8abb      	ldrh	r3, [r7, #20]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	b29b      	uxth	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	73bb      	strb	r3, [r7, #14]
 8001088:	8abb      	ldrh	r3, [r7, #20]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	2104      	movs	r1, #4
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff2d 	bl	8000ef4 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 800109a:	202b      	movs	r0, #43	@ 0x2b
 800109c:	f7ff ff06 	bl	8000eac <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 80010a0:	8a7b      	ldrh	r3, [r7, #18]
 80010a2:	0a1b      	lsrs	r3, r3, #8
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	723b      	strb	r3, [r7, #8]
 80010aa:	8a7b      	ldrh	r3, [r7, #18]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	727b      	strb	r3, [r7, #9]
 80010b0:	8a3b      	ldrh	r3, [r7, #16]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	72bb      	strb	r3, [r7, #10]
 80010ba:	8a3b      	ldrh	r3, [r7, #16]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	2104      	movs	r1, #4
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff14 	bl	8000ef4 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 80010cc:	202c      	movs	r0, #44	@ 0x2c
 80010ce:	f7ff feed 	bl	8000eac <ST7789_WriteCommand>
	ST7789_UnSelect();
 80010d2:	2201      	movs	r2, #1
 80010d4:	2180      	movs	r1, #128	@ 0x80
 80010d6:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <ST7789_SetAddressWindow+0xb4>)
 80010d8:	f002 fbe8 	bl	80038ac <HAL_GPIO_WritePin>
}
 80010dc:	bf00      	nop
 80010de:	371c      	adds	r7, #28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd90      	pop	{r4, r7, pc}
 80010e4:	40020400 	.word	0x40020400

080010e8 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b08b      	sub	sp, #44	@ 0x2c
 80010ec:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 80010ee:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80010f2:	2100      	movs	r1, #0
 80010f4:	484a      	ldr	r0, [pc, #296]	@ (8001220 <ST7789_Init+0x138>)
 80010f6:	f008 f89b 	bl	8009230 <memset>
	#endif
	HAL_Delay(10);
 80010fa:	200a      	movs	r0, #10
 80010fc:	f001 fc46 	bl	800298c <HAL_Delay>
    ST7789_RST_Clr();
 8001100:	2200      	movs	r2, #0
 8001102:	2104      	movs	r1, #4
 8001104:	4847      	ldr	r0, [pc, #284]	@ (8001224 <ST7789_Init+0x13c>)
 8001106:	f002 fbd1 	bl	80038ac <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800110a:	200a      	movs	r0, #10
 800110c:	f001 fc3e 	bl	800298c <HAL_Delay>
    ST7789_RST_Set();
 8001110:	2201      	movs	r2, #1
 8001112:	2104      	movs	r1, #4
 8001114:	4843      	ldr	r0, [pc, #268]	@ (8001224 <ST7789_Init+0x13c>)
 8001116:	f002 fbc9 	bl	80038ac <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800111a:	2014      	movs	r0, #20
 800111c:	f001 fc36 	bl	800298c <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8001120:	203a      	movs	r0, #58	@ 0x3a
 8001122:	f7ff fec3 	bl	8000eac <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8001126:	2055      	movs	r0, #85	@ 0x55
 8001128:	f7ff ff32 	bl	8000f90 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800112c:	20b2      	movs	r0, #178	@ 0xb2
 800112e:	f7ff febd 	bl	8000eac <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001132:	4a3d      	ldr	r2, [pc, #244]	@ (8001228 <ST7789_Init+0x140>)
 8001134:	f107 0320 	add.w	r3, r7, #32
 8001138:	e892 0003 	ldmia.w	r2, {r0, r1}
 800113c:	6018      	str	r0, [r3, #0]
 800113e:	3304      	adds	r3, #4
 8001140:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	2105      	movs	r1, #5
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fed3 	bl	8000ef4 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 800114e:	2002      	movs	r0, #2
 8001150:	f7ff ff42 	bl	8000fd8 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8001154:	20b7      	movs	r0, #183	@ 0xb7
 8001156:	f7ff fea9 	bl	8000eac <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 800115a:	2035      	movs	r0, #53	@ 0x35
 800115c:	f7ff ff18 	bl	8000f90 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8001160:	20bb      	movs	r0, #187	@ 0xbb
 8001162:	f7ff fea3 	bl	8000eac <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8001166:	2019      	movs	r0, #25
 8001168:	f7ff ff12 	bl	8000f90 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 800116c:	20c0      	movs	r0, #192	@ 0xc0
 800116e:	f7ff fe9d 	bl	8000eac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8001172:	202c      	movs	r0, #44	@ 0x2c
 8001174:	f7ff ff0c 	bl	8000f90 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8001178:	20c2      	movs	r0, #194	@ 0xc2
 800117a:	f7ff fe97 	bl	8000eac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 800117e:	2001      	movs	r0, #1
 8001180:	f7ff ff06 	bl	8000f90 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8001184:	20c3      	movs	r0, #195	@ 0xc3
 8001186:	f7ff fe91 	bl	8000eac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 800118a:	2012      	movs	r0, #18
 800118c:	f7ff ff00 	bl	8000f90 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8001190:	20c4      	movs	r0, #196	@ 0xc4
 8001192:	f7ff fe8b 	bl	8000eac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8001196:	2020      	movs	r0, #32
 8001198:	f7ff fefa 	bl	8000f90 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 800119c:	20c6      	movs	r0, #198	@ 0xc6
 800119e:	f7ff fe85 	bl	8000eac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 80011a2:	200f      	movs	r0, #15
 80011a4:	f7ff fef4 	bl	8000f90 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 80011a8:	20d0      	movs	r0, #208	@ 0xd0
 80011aa:	f7ff fe7f 	bl	8000eac <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 80011ae:	20a4      	movs	r0, #164	@ 0xa4
 80011b0:	f7ff feee 	bl	8000f90 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 80011b4:	20a1      	movs	r0, #161	@ 0xa1
 80011b6:	f7ff feeb 	bl	8000f90 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 80011ba:	20e0      	movs	r0, #224	@ 0xe0
 80011bc:	f7ff fe76 	bl	8000eac <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 80011c0:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <ST7789_Init+0x144>)
 80011c2:	f107 0410 	add.w	r4, r7, #16
 80011c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c8:	c407      	stmia	r4!, {r0, r1, r2}
 80011ca:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	210e      	movs	r1, #14
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fe8e 	bl	8000ef4 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 80011d8:	20e1      	movs	r0, #225	@ 0xe1
 80011da:	f7ff fe67 	bl	8000eac <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <ST7789_Init+0x148>)
 80011e0:	463c      	mov	r4, r7
 80011e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e4:	c407      	stmia	r4!, {r0, r1, r2}
 80011e6:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80011e8:	463b      	mov	r3, r7
 80011ea:	210e      	movs	r1, #14
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fe81 	bl	8000ef4 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 80011f2:	2021      	movs	r0, #33	@ 0x21
 80011f4:	f7ff fe5a 	bl	8000eac <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 80011f8:	2011      	movs	r0, #17
 80011fa:	f7ff fe57 	bl	8000eac <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 80011fe:	2013      	movs	r0, #19
 8001200:	f7ff fe54 	bl	8000eac <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8001204:	2029      	movs	r0, #41	@ 0x29
 8001206:	f7ff fe51 	bl	8000eac <ST7789_WriteCommand>

	HAL_Delay(50);
 800120a:	2032      	movs	r0, #50	@ 0x32
 800120c:	f001 fbbe 	bl	800298c <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8001210:	2000      	movs	r0, #0
 8001212:	f000 f80f 	bl	8001234 <ST7789_Fill_Color>
}
 8001216:	bf00      	nop
 8001218:	372c      	adds	r7, #44	@ 0x2c
 800121a:	46bd      	mov	sp, r7
 800121c:	bd90      	pop	{r4, r7, pc}
 800121e:	bf00      	nop
 8001220:	20000090 	.word	0x20000090
 8001224:	40020400 	.word	0x40020400
 8001228:	0800ac58 	.word	0x0800ac58
 800122c:	0800ac60 	.word	0x0800ac60
 8001230:	0800ac70 	.word	0x0800ac70

08001234 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 800123e:	f240 133f 	movw	r3, #319	@ 0x13f
 8001242:	22ef      	movs	r2, #239	@ 0xef
 8001244:	2100      	movs	r1, #0
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff fef2 	bl	8001030 <ST7789_SetAddressWindow>
	ST7789_Select();
 800124c:	2200      	movs	r2, #0
 800124e:	2180      	movs	r1, #128	@ 0x80
 8001250:	4810      	ldr	r0, [pc, #64]	@ (8001294 <ST7789_Fill_Color+0x60>)
 8001252:	f002 fb2b 	bl	80038ac <HAL_GPIO_WritePin>

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001256:	2300      	movs	r3, #0
 8001258:	81fb      	strh	r3, [r7, #14]
 800125a:	e00e      	b.n	800127a <ST7789_Fill_Color+0x46>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001262:	4619      	mov	r1, r3
 8001264:	480c      	ldr	r0, [pc, #48]	@ (8001298 <ST7789_Fill_Color+0x64>)
 8001266:	f007 ffe3 	bl	8009230 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 800126a:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 800126e:	480a      	ldr	r0, [pc, #40]	@ (8001298 <ST7789_Fill_Color+0x64>)
 8001270:	f7ff fe40 	bl	8000ef4 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001274:	89fb      	ldrh	r3, [r7, #14]
 8001276:	3301      	adds	r3, #1
 8001278:	81fb      	strh	r3, [r7, #14]
 800127a:	89fb      	ldrh	r3, [r7, #14]
 800127c:	2b3f      	cmp	r3, #63	@ 0x3f
 800127e:	d9ed      	bls.n	800125c <ST7789_Fill_Color+0x28>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8001280:	2201      	movs	r2, #1
 8001282:	2180      	movs	r1, #128	@ 0x80
 8001284:	4803      	ldr	r0, [pc, #12]	@ (8001294 <ST7789_Fill_Color+0x60>)
 8001286:	f002 fb11 	bl	80038ac <HAL_GPIO_WritePin>
}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40020400 	.word	0x40020400
 8001298:	20000090 	.word	0x20000090

0800129c <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
 80012a6:	460b      	mov	r3, r1
 80012a8:	80bb      	strh	r3, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	2bef      	cmp	r3, #239	@ 0xef
 80012b2:	d822      	bhi.n	80012fa <ST7789_DrawPixel+0x5e>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80012b4:	88bb      	ldrh	r3, [r7, #4]
 80012b6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80012ba:	d21e      	bcs.n	80012fa <ST7789_DrawPixel+0x5e>
	
	ST7789_SetAddressWindow(x, y, x, y);
 80012bc:	88bb      	ldrh	r3, [r7, #4]
 80012be:	88fa      	ldrh	r2, [r7, #6]
 80012c0:	88b9      	ldrh	r1, [r7, #4]
 80012c2:	88f8      	ldrh	r0, [r7, #6]
 80012c4:	f7ff feb4 	bl	8001030 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 80012c8:	887b      	ldrh	r3, [r7, #2]
 80012ca:	0a1b      	lsrs	r3, r3, #8
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	733b      	strb	r3, [r7, #12]
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 80012d8:	2200      	movs	r2, #0
 80012da:	2180      	movs	r1, #128	@ 0x80
 80012dc:	4809      	ldr	r0, [pc, #36]	@ (8001304 <ST7789_DrawPixel+0x68>)
 80012de:	f002 fae5 	bl	80038ac <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	2102      	movs	r1, #2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fe03 	bl	8000ef4 <ST7789_WriteData>
	ST7789_UnSelect();
 80012ee:	2201      	movs	r2, #1
 80012f0:	2180      	movs	r1, #128	@ 0x80
 80012f2:	4804      	ldr	r0, [pc, #16]	@ (8001304 <ST7789_DrawPixel+0x68>)
 80012f4:	f002 fada 	bl	80038ac <HAL_GPIO_WritePin>
 80012f8:	e000      	b.n	80012fc <ST7789_DrawPixel+0x60>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80012fa:	bf00      	nop
}
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40020400 	.word	0x40020400

08001308 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
 800130e:	4604      	mov	r4, r0
 8001310:	4608      	mov	r0, r1
 8001312:	4611      	mov	r1, r2
 8001314:	461a      	mov	r2, r3
 8001316:	4623      	mov	r3, r4
 8001318:	80fb      	strh	r3, [r7, #6]
 800131a:	4603      	mov	r3, r0
 800131c:	80bb      	strh	r3, [r7, #4]
 800131e:	460b      	mov	r3, r1
 8001320:	807b      	strh	r3, [r7, #2]
 8001322:	4613      	mov	r3, r2
 8001324:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8001326:	883a      	ldrh	r2, [r7, #0]
 8001328:	88bb      	ldrh	r3, [r7, #4]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001330:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001334:	8879      	ldrh	r1, [r7, #2]
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	1acb      	subs	r3, r1, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	bfb8      	it	lt
 800133e:	425b      	neglt	r3, r3
 8001340:	429a      	cmp	r2, r3
 8001342:	bfcc      	ite	gt
 8001344:	2301      	movgt	r3, #1
 8001346:	2300      	movle	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	827b      	strh	r3, [r7, #18]
    if (steep) {
 800134c:	8a7b      	ldrh	r3, [r7, #18]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00b      	beq.n	800136a <ST7789_DrawLine+0x62>
		swap = x0;
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 8001356:	88bb      	ldrh	r3, [r7, #4]
 8001358:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 800135a:	8a3b      	ldrh	r3, [r7, #16]
 800135c:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 8001362:	883b      	ldrh	r3, [r7, #0]
 8001364:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 8001366:	8a3b      	ldrh	r3, [r7, #16]
 8001368:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 800136a:	88fa      	ldrh	r2, [r7, #6]
 800136c:	887b      	ldrh	r3, [r7, #2]
 800136e:	429a      	cmp	r2, r3
 8001370:	d90b      	bls.n	800138a <ST7789_DrawLine+0x82>
		swap = x0;
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 800137a:	8a3b      	ldrh	r3, [r7, #16]
 800137c:	807b      	strh	r3, [r7, #2]

		swap = y0;
 800137e:	88bb      	ldrh	r3, [r7, #4]
 8001380:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 8001382:	883b      	ldrh	r3, [r7, #0]
 8001384:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 8001386:	8a3b      	ldrh	r3, [r7, #16]
 8001388:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	b29b      	uxth	r3, r3
 8001392:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 8001394:	883a      	ldrh	r2, [r7, #0]
 8001396:	88bb      	ldrh	r3, [r7, #4]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	bfb8      	it	lt
 800139e:	425b      	neglt	r3, r3
 80013a0:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 80013a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013a6:	0fda      	lsrs	r2, r3, #31
 80013a8:	4413      	add	r3, r2
 80013aa:	105b      	asrs	r3, r3, #1
 80013ac:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 80013ae:	88ba      	ldrh	r2, [r7, #4]
 80013b0:	883b      	ldrh	r3, [r7, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d202      	bcs.n	80013bc <ST7789_DrawLine+0xb4>
        ystep = 1;
 80013b6:	2301      	movs	r3, #1
 80013b8:	82bb      	strh	r3, [r7, #20]
 80013ba:	e028      	b.n	800140e <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 80013bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013c0:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 80013c2:	e024      	b.n	800140e <ST7789_DrawLine+0x106>
        if (steep) {
 80013c4:	8a7b      	ldrh	r3, [r7, #18]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d006      	beq.n	80013d8 <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 80013ca:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80013cc:	88f9      	ldrh	r1, [r7, #6]
 80013ce:	88bb      	ldrh	r3, [r7, #4]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff63 	bl	800129c <ST7789_DrawPixel>
 80013d6:	e005      	b.n	80013e4 <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 80013d8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80013da:	88b9      	ldrh	r1, [r7, #4]
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff5c 	bl	800129c <ST7789_DrawPixel>
        }
        err -= dy;
 80013e4:	8afa      	ldrh	r2, [r7, #22]
 80013e6:	89bb      	ldrh	r3, [r7, #12]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 80013ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	da08      	bge.n	8001408 <ST7789_DrawLine+0x100>
            y0 += ystep;
 80013f6:	8aba      	ldrh	r2, [r7, #20]
 80013f8:	88bb      	ldrh	r3, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80013fe:	8afa      	ldrh	r2, [r7, #22]
 8001400:	89fb      	ldrh	r3, [r7, #14]
 8001402:	4413      	add	r3, r2
 8001404:	b29b      	uxth	r3, r3
 8001406:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	3301      	adds	r3, #1
 800140c:	80fb      	strh	r3, [r7, #6]
 800140e:	88fa      	ldrh	r2, [r7, #6]
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	429a      	cmp	r2, r3
 8001414:	d9d6      	bls.n	80013c4 <ST7789_DrawLine+0xbc>
        }
    }
}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd90      	pop	{r4, r7, pc}

08001420 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001420:	b082      	sub	sp, #8
 8001422:	b580      	push	{r7, lr}
 8001424:	b088      	sub	sp, #32
 8001426:	af00      	add	r7, sp, #0
 8001428:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800142a:	4603      	mov	r3, r0
 800142c:	80fb      	strh	r3, [r7, #6]
 800142e:	460b      	mov	r3, r1
 8001430:	80bb      	strh	r3, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8001436:	2200      	movs	r2, #0
 8001438:	2180      	movs	r1, #128	@ 0x80
 800143a:	4837      	ldr	r0, [pc, #220]	@ (8001518 <ST7789_WriteChar+0xf8>)
 800143c:	f002 fa36 	bl	80038ac <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8001440:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001444:	461a      	mov	r2, r3
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	4413      	add	r3, r2
 800144a:	b29b      	uxth	r3, r3
 800144c:	3b01      	subs	r3, #1
 800144e:	b29a      	uxth	r2, r3
 8001450:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001454:	4619      	mov	r1, r3
 8001456:	88bb      	ldrh	r3, [r7, #4]
 8001458:	440b      	add	r3, r1
 800145a:	b29b      	uxth	r3, r3
 800145c:	3b01      	subs	r3, #1
 800145e:	b29b      	uxth	r3, r3
 8001460:	88b9      	ldrh	r1, [r7, #4]
 8001462:	88f8      	ldrh	r0, [r7, #6]
 8001464:	f7ff fde4 	bl	8001030 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
 800146c:	e041      	b.n	80014f2 <ST7789_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 800146e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	3b20      	subs	r3, #32
 8001474:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001478:	fb01 f303 	mul.w	r3, r1, r3
 800147c:	4619      	mov	r1, r3
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	440b      	add	r3, r1
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
 800148e:	e027      	b.n	80014e0 <ST7789_WriteChar+0xc0>
			if ((b << j) & 0x8000) {
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00e      	beq.n	80014be <ST7789_WriteChar+0x9e>
				uint8_t data[] = {color >> 8, color & 0xFF};
 80014a0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	743b      	strb	r3, [r7, #16]
 80014aa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	2102      	movs	r1, #2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fd1c 	bl	8000ef4 <ST7789_WriteData>
 80014bc:	e00d      	b.n	80014da <ST7789_WriteChar+0xba>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 80014be:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	733b      	strb	r3, [r7, #12]
 80014c8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	2102      	movs	r1, #2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fd0d 	bl	8000ef4 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	3301      	adds	r3, #1
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014e4:	461a      	mov	r2, r3
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d3d1      	bcc.n	8001490 <ST7789_WriteChar+0x70>
	for (i = 0; i < font.height; i++) {
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	3301      	adds	r3, #1
 80014f0:	61fb      	str	r3, [r7, #28]
 80014f2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80014f6:	461a      	mov	r2, r3
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d3b7      	bcc.n	800146e <ST7789_WriteChar+0x4e>
			}
		}
	}
	ST7789_UnSelect();
 80014fe:	2201      	movs	r2, #1
 8001500:	2180      	movs	r1, #128	@ 0x80
 8001502:	4805      	ldr	r0, [pc, #20]	@ (8001518 <ST7789_WriteChar+0xf8>)
 8001504:	f002 f9d2 	bl	80038ac <HAL_GPIO_WritePin>
}
 8001508:	bf00      	nop
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001512:	b002      	add	sp, #8
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40020400 	.word	0x40020400

0800151c <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800151c:	b082      	sub	sp, #8
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af04      	add	r7, sp, #16
 8001524:	603a      	str	r2, [r7, #0]
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	4603      	mov	r3, r0
 800152a:	80fb      	strh	r3, [r7, #6]
 800152c:	460b      	mov	r3, r1
 800152e:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8001530:	2200      	movs	r2, #0
 8001532:	2180      	movs	r1, #128	@ 0x80
 8001534:	4822      	ldr	r0, [pc, #136]	@ (80015c0 <ST7789_WriteString+0xa4>)
 8001536:	f002 f9b9 	bl	80038ac <HAL_GPIO_WritePin>
	while (*str) {
 800153a:	e02e      	b.n	800159a <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	7d3a      	ldrb	r2, [r7, #20]
 8001540:	4413      	add	r3, r2
 8001542:	2bef      	cmp	r3, #239	@ 0xef
 8001544:	dd14      	ble.n	8001570 <ST7789_WriteString+0x54>
			x = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800154a:	7d7b      	ldrb	r3, [r7, #21]
 800154c:	461a      	mov	r2, r3
 800154e:	88bb      	ldrh	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8001554:	88bb      	ldrh	r3, [r7, #4]
 8001556:	7d7a      	ldrb	r2, [r7, #21]
 8001558:	4413      	add	r3, r2
 800155a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800155e:	da21      	bge.n	80015a4 <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b20      	cmp	r3, #32
 8001566:	d103      	bne.n	8001570 <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	3301      	adds	r3, #1
 800156c:	603b      	str	r3, [r7, #0]
				continue;
 800156e:	e014      	b.n	800159a <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	781a      	ldrb	r2, [r3, #0]
 8001574:	88b9      	ldrh	r1, [r7, #4]
 8001576:	88f8      	ldrh	r0, [r7, #6]
 8001578:	8c3b      	ldrh	r3, [r7, #32]
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	8bbb      	ldrh	r3, [r7, #28]
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f7ff ff4b 	bl	8001420 <ST7789_WriteChar>
		x += font.width;
 800158a:	7d3b      	ldrb	r3, [r7, #20]
 800158c:	461a      	mov	r2, r3
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	4413      	add	r3, r2
 8001592:	80fb      	strh	r3, [r7, #6]
		str++;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	3301      	adds	r3, #1
 8001598:	603b      	str	r3, [r7, #0]
	while (*str) {
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1cc      	bne.n	800153c <ST7789_WriteString+0x20>
 80015a2:	e000      	b.n	80015a6 <ST7789_WriteString+0x8a>
				break;
 80015a4:	bf00      	nop
	}
	ST7789_UnSelect();
 80015a6:	2201      	movs	r2, #1
 80015a8:	2180      	movs	r1, #128	@ 0x80
 80015aa:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <ST7789_WriteString+0xa4>)
 80015ac:	f002 f97e 	bl	80038ac <HAL_GPIO_WritePin>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015ba:	b002      	add	sp, #8
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40020400 	.word	0x40020400

080015c4 <ST7789_DrawFilledCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle
 * @return  none
 */
void ST7789_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b089      	sub	sp, #36	@ 0x24
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	4604      	mov	r4, r0
 80015cc:	4608      	mov	r0, r1
 80015ce:	4611      	mov	r1, r2
 80015d0:	461a      	mov	r2, r3
 80015d2:	4623      	mov	r3, r4
 80015d4:	80fb      	strh	r3, [r7, #6]
 80015d6:	4603      	mov	r3, r0
 80015d8:	80bb      	strh	r3, [r7, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	807b      	strh	r3, [r7, #2]
 80015de:	4613      	mov	r3, r2
 80015e0:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80015e2:	2200      	movs	r2, #0
 80015e4:	2180      	movs	r1, #128	@ 0x80
 80015e6:	4869      	ldr	r0, [pc, #420]	@ (800178c <ST7789_DrawFilledCircle+0x1c8>)
 80015e8:	f002 f960 	bl	80038ac <HAL_GPIO_WritePin>
	int16_t f = 1 - r;
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	f1c3 0301 	rsb	r3, r3, #1
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80015f6:	2301      	movs	r3, #1
 80015f8:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80015fa:	887b      	ldrh	r3, [r7, #2]
 80015fc:	461a      	mov	r2, r3
 80015fe:	03d2      	lsls	r2, r2, #15
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	b29b      	uxth	r3, r3
 8001606:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800160c:	887b      	ldrh	r3, [r7, #2]
 800160e:	81fb      	strh	r3, [r7, #14]

	ST7789_DrawPixel(x0, y0 + r, color);
 8001610:	88f8      	ldrh	r0, [r7, #6]
 8001612:	88ba      	ldrh	r2, [r7, #4]
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	4413      	add	r3, r2
 8001618:	b29b      	uxth	r3, r3
 800161a:	883a      	ldrh	r2, [r7, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff fe3d 	bl	800129c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 8001622:	88f8      	ldrh	r0, [r7, #6]
 8001624:	88ba      	ldrh	r2, [r7, #4]
 8001626:	887b      	ldrh	r3, [r7, #2]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	b29b      	uxth	r3, r3
 800162c:	883a      	ldrh	r2, [r7, #0]
 800162e:	4619      	mov	r1, r3
 8001630:	f7ff fe34 	bl	800129c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 8001634:	88fa      	ldrh	r2, [r7, #6]
 8001636:	887b      	ldrh	r3, [r7, #2]
 8001638:	4413      	add	r3, r2
 800163a:	b29b      	uxth	r3, r3
 800163c:	88b9      	ldrh	r1, [r7, #4]
 800163e:	883a      	ldrh	r2, [r7, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fe2b 	bl	800129c <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8001646:	88fa      	ldrh	r2, [r7, #6]
 8001648:	887b      	ldrh	r3, [r7, #2]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	b29b      	uxth	r3, r3
 800164e:	88b9      	ldrh	r1, [r7, #4]
 8001650:	883a      	ldrh	r2, [r7, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fe22 	bl	800129c <ST7789_DrawPixel>
	ST7789_DrawLine(x0 - r, y0, x0 + r, y0, color);
 8001658:	88fa      	ldrh	r2, [r7, #6]
 800165a:	887b      	ldrh	r3, [r7, #2]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	b298      	uxth	r0, r3
 8001660:	88b9      	ldrh	r1, [r7, #4]
 8001662:	88fa      	ldrh	r2, [r7, #6]
 8001664:	887b      	ldrh	r3, [r7, #2]
 8001666:	4413      	add	r3, r2
 8001668:	b29a      	uxth	r2, r3
 800166a:	88bc      	ldrh	r4, [r7, #4]
 800166c:	883b      	ldrh	r3, [r7, #0]
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	4623      	mov	r3, r4
 8001672:	f7ff fe49 	bl	8001308 <ST7789_DrawLine>

	while (x < y) {
 8001676:	e079      	b.n	800176c <ST7789_DrawFilledCircle+0x1a8>
		if (f >= 0) {
 8001678:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0e      	blt.n	800169e <ST7789_DrawFilledCircle+0xda>
			y--;
 8001680:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001684:	b29b      	uxth	r3, r3
 8001686:	3b01      	subs	r3, #1
 8001688:	b29b      	uxth	r3, r3
 800168a:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 800168c:	8a7b      	ldrh	r3, [r7, #18]
 800168e:	3302      	adds	r3, #2
 8001690:	b29b      	uxth	r3, r3
 8001692:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8001694:	8afa      	ldrh	r2, [r7, #22]
 8001696:	8a7b      	ldrh	r3, [r7, #18]
 8001698:	4413      	add	r3, r2
 800169a:	b29b      	uxth	r3, r3
 800169c:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 800169e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	3301      	adds	r3, #1
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80016aa:	8abb      	ldrh	r3, [r7, #20]
 80016ac:	3302      	adds	r3, #2
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80016b2:	8afa      	ldrh	r2, [r7, #22]
 80016b4:	8abb      	ldrh	r3, [r7, #20]
 80016b6:	4413      	add	r3, r2
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 80016bc:	88fa      	ldrh	r2, [r7, #6]
 80016be:	8a3b      	ldrh	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	b298      	uxth	r0, r3
 80016c4:	88ba      	ldrh	r2, [r7, #4]
 80016c6:	89fb      	ldrh	r3, [r7, #14]
 80016c8:	4413      	add	r3, r2
 80016ca:	b299      	uxth	r1, r3
 80016cc:	88fa      	ldrh	r2, [r7, #6]
 80016ce:	8a3b      	ldrh	r3, [r7, #16]
 80016d0:	4413      	add	r3, r2
 80016d2:	b29c      	uxth	r4, r3
 80016d4:	88ba      	ldrh	r2, [r7, #4]
 80016d6:	89fb      	ldrh	r3, [r7, #14]
 80016d8:	4413      	add	r3, r2
 80016da:	b29a      	uxth	r2, r3
 80016dc:	883b      	ldrh	r3, [r7, #0]
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	4613      	mov	r3, r2
 80016e2:	4622      	mov	r2, r4
 80016e4:	f7ff fe10 	bl	8001308 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 80016e8:	88fa      	ldrh	r2, [r7, #6]
 80016ea:	8a3b      	ldrh	r3, [r7, #16]
 80016ec:	4413      	add	r3, r2
 80016ee:	b298      	uxth	r0, r3
 80016f0:	88ba      	ldrh	r2, [r7, #4]
 80016f2:	89fb      	ldrh	r3, [r7, #14]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	b299      	uxth	r1, r3
 80016f8:	88fa      	ldrh	r2, [r7, #6]
 80016fa:	8a3b      	ldrh	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	b29c      	uxth	r4, r3
 8001700:	88ba      	ldrh	r2, [r7, #4]
 8001702:	89fb      	ldrh	r3, [r7, #14]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	b29a      	uxth	r2, r3
 8001708:	883b      	ldrh	r3, [r7, #0]
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	4613      	mov	r3, r2
 800170e:	4622      	mov	r2, r4
 8001710:	f7ff fdfa 	bl	8001308 <ST7789_DrawLine>

		ST7789_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 8001714:	88fa      	ldrh	r2, [r7, #6]
 8001716:	89fb      	ldrh	r3, [r7, #14]
 8001718:	4413      	add	r3, r2
 800171a:	b298      	uxth	r0, r3
 800171c:	88ba      	ldrh	r2, [r7, #4]
 800171e:	8a3b      	ldrh	r3, [r7, #16]
 8001720:	4413      	add	r3, r2
 8001722:	b299      	uxth	r1, r3
 8001724:	88fa      	ldrh	r2, [r7, #6]
 8001726:	89fb      	ldrh	r3, [r7, #14]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	b29c      	uxth	r4, r3
 800172c:	88ba      	ldrh	r2, [r7, #4]
 800172e:	8a3b      	ldrh	r3, [r7, #16]
 8001730:	4413      	add	r3, r2
 8001732:	b29a      	uxth	r2, r3
 8001734:	883b      	ldrh	r3, [r7, #0]
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	4613      	mov	r3, r2
 800173a:	4622      	mov	r2, r4
 800173c:	f7ff fde4 	bl	8001308 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 8001740:	88fa      	ldrh	r2, [r7, #6]
 8001742:	89fb      	ldrh	r3, [r7, #14]
 8001744:	4413      	add	r3, r2
 8001746:	b298      	uxth	r0, r3
 8001748:	88ba      	ldrh	r2, [r7, #4]
 800174a:	8a3b      	ldrh	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	b299      	uxth	r1, r3
 8001750:	88fa      	ldrh	r2, [r7, #6]
 8001752:	89fb      	ldrh	r3, [r7, #14]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	b29c      	uxth	r4, r3
 8001758:	88ba      	ldrh	r2, [r7, #4]
 800175a:	8a3b      	ldrh	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	b29a      	uxth	r2, r3
 8001760:	883b      	ldrh	r3, [r7, #0]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	4613      	mov	r3, r2
 8001766:	4622      	mov	r2, r4
 8001768:	f7ff fdce 	bl	8001308 <ST7789_DrawLine>
	while (x < y) {
 800176c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001770:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001774:	429a      	cmp	r2, r3
 8001776:	f6ff af7f 	blt.w	8001678 <ST7789_DrawFilledCircle+0xb4>
	}
	ST7789_UnSelect();
 800177a:	2201      	movs	r2, #1
 800177c:	2180      	movs	r1, #128	@ 0x80
 800177e:	4803      	ldr	r0, [pc, #12]	@ (800178c <ST7789_DrawFilledCircle+0x1c8>)
 8001780:	f002 f894 	bl	80038ac <HAL_GPIO_WritePin>
}
 8001784:	bf00      	nop
 8001786:	371c      	adds	r7, #28
 8001788:	46bd      	mov	sp, r7
 800178a:	bd90      	pop	{r4, r7, pc}
 800178c:	40020400 	.word	0x40020400

08001790 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001796:	463b      	mov	r3, r7
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800179e:	4b14      	ldr	r3, [pc, #80]	@ (80017f0 <MX_DAC_Init+0x60>)
 80017a0:	4a14      	ldr	r2, [pc, #80]	@ (80017f4 <MX_DAC_Init+0x64>)
 80017a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80017a4:	4812      	ldr	r0, [pc, #72]	@ (80017f0 <MX_DAC_Init+0x60>)
 80017a6:	f001 f9f7 	bl	8002b98 <HAL_DAC_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80017b0:	f000 fce6 	bl	8002180 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80017bc:	463b      	mov	r3, r7
 80017be:	2200      	movs	r2, #0
 80017c0:	4619      	mov	r1, r3
 80017c2:	480b      	ldr	r0, [pc, #44]	@ (80017f0 <MX_DAC_Init+0x60>)
 80017c4:	f001 faeb 	bl	8002d9e <HAL_DAC_ConfigChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80017ce:	f000 fcd7 	bl	8002180 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80017d2:	463b      	mov	r3, r7
 80017d4:	2210      	movs	r2, #16
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	@ (80017f0 <MX_DAC_Init+0x60>)
 80017da:	f001 fae0 	bl	8002d9e <HAL_DAC_ConfigChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80017e4:	f000 fccc 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200009f0 	.word	0x200009f0
 80017f4:	40007400 	.word	0x40007400

080017f8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	@ 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a1b      	ldr	r2, [pc, #108]	@ (8001884 <HAL_DAC_MspInit+0x8c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d12f      	bne.n	800187a <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	4b1a      	ldr	r3, [pc, #104]	@ (8001888 <HAL_DAC_MspInit+0x90>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	4a19      	ldr	r2, [pc, #100]	@ (8001888 <HAL_DAC_MspInit+0x90>)
 8001824:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001828:	6413      	str	r3, [r2, #64]	@ 0x40
 800182a:	4b17      	ldr	r3, [pc, #92]	@ (8001888 <HAL_DAC_MspInit+0x90>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <HAL_DAC_MspInit+0x90>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	4a12      	ldr	r2, [pc, #72]	@ (8001888 <HAL_DAC_MspInit+0x90>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6313      	str	r3, [r2, #48]	@ 0x30
 8001846:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <HAL_DAC_MspInit+0x90>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001852:	2330      	movs	r3, #48	@ 0x30
 8001854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001856:	2303      	movs	r3, #3
 8001858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	4809      	ldr	r0, [pc, #36]	@ (800188c <HAL_DAC_MspInit+0x94>)
 8001866:	f001 fe6d 	bl	8003544 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	210f      	movs	r1, #15
 800186e:	2036      	movs	r0, #54	@ 0x36
 8001870:	f001 f968 	bl	8002b44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001874:	2036      	movs	r0, #54	@ 0x36
 8001876:	f001 f981 	bl	8002b7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	@ 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40007400 	.word	0x40007400
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000

08001890 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <MX_DMA_Init+0x4c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	4a0f      	ldr	r2, [pc, #60]	@ (80018dc <MX_DMA_Init+0x4c>)
 80018a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a6:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <MX_DMA_Init+0x4c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2105      	movs	r1, #5
 80018b6:	2038      	movs	r0, #56	@ 0x38
 80018b8:	f001 f944 	bl	8002b44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018bc:	2038      	movs	r0, #56	@ 0x38
 80018be:	f001 f95d 	bl	8002b7c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2105      	movs	r1, #5
 80018c6:	203b      	movs	r0, #59	@ 0x3b
 80018c8:	f001 f93c 	bl	8002b44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80018cc:	203b      	movs	r0, #59	@ 0x3b
 80018ce:	f001 f955 	bl	8002b7c <HAL_NVIC_EnableIRQ>

}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800

080018e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of buttonSemaphore */
  buttonSemaphoreHandle = osSemaphoreNew(1, 1, &buttonSemaphore_attributes);
 80018e4:	4a14      	ldr	r2, [pc, #80]	@ (8001938 <MX_FREERTOS_Init+0x58>)
 80018e6:	2101      	movs	r1, #1
 80018e8:	2001      	movs	r0, #1
 80018ea:	f004 fa68 	bl	8005dbe <osSemaphoreNew>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4a12      	ldr	r2, [pc, #72]	@ (800193c <MX_FREERTOS_Init+0x5c>)
 80018f2:	6013      	str	r3, [r2, #0]

  /* creation of dac */
  dacHandle = osSemaphoreNew(1, 1, &dac_attributes);
 80018f4:	4a12      	ldr	r2, [pc, #72]	@ (8001940 <MX_FREERTOS_Init+0x60>)
 80018f6:	2101      	movs	r1, #1
 80018f8:	2001      	movs	r0, #1
 80018fa:	f004 fa60 	bl	8005dbe <osSemaphoreNew>
 80018fe:	4603      	mov	r3, r0
 8001900:	4a10      	ldr	r2, [pc, #64]	@ (8001944 <MX_FREERTOS_Init+0x64>)
 8001902:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TouchPin */
  TouchPinHandle = osThreadNew(StartDefaultTask, NULL, &TouchPin_attributes);
 8001904:	4a10      	ldr	r2, [pc, #64]	@ (8001948 <MX_FREERTOS_Init+0x68>)
 8001906:	2100      	movs	r1, #0
 8001908:	4810      	ldr	r0, [pc, #64]	@ (800194c <MX_FREERTOS_Init+0x6c>)
 800190a:	f004 f9ab 	bl	8005c64 <osThreadNew>
 800190e:	4603      	mov	r3, r0
 8001910:	4a0f      	ldr	r2, [pc, #60]	@ (8001950 <MX_FREERTOS_Init+0x70>)
 8001912:	6013      	str	r3, [r2, #0]

  /* creation of dac_play */
  dac_playHandle = osThreadNew(DacPlayTask, NULL, &dac_play_attributes);
 8001914:	4a0f      	ldr	r2, [pc, #60]	@ (8001954 <MX_FREERTOS_Init+0x74>)
 8001916:	2100      	movs	r1, #0
 8001918:	480f      	ldr	r0, [pc, #60]	@ (8001958 <MX_FREERTOS_Init+0x78>)
 800191a:	f004 f9a3 	bl	8005c64 <osThreadNew>
 800191e:	4603      	mov	r3, r0
 8001920:	4a0e      	ldr	r2, [pc, #56]	@ (800195c <MX_FREERTOS_Init+0x7c>)
 8001922:	6013      	str	r3, [r2, #0]

  /* creation of dac_buttun */
  dac_buttunHandle = osThreadNew(DacButtonPlay, NULL, &dac_buttun_attributes);
 8001924:	4a0e      	ldr	r2, [pc, #56]	@ (8001960 <MX_FREERTOS_Init+0x80>)
 8001926:	2100      	movs	r1, #0
 8001928:	480e      	ldr	r0, [pc, #56]	@ (8001964 <MX_FREERTOS_Init+0x84>)
 800192a:	f004 f99b 	bl	8005c64 <osThreadNew>
 800192e:	4603      	mov	r3, r0
 8001930:	4a0d      	ldr	r2, [pc, #52]	@ (8001968 <MX_FREERTOS_Init+0x88>)
 8001932:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	0800ced4 	.word	0x0800ced4
 800193c:	20000a1c 	.word	0x20000a1c
 8001940:	0800cee4 	.word	0x0800cee4
 8001944:	20000a20 	.word	0x20000a20
 8001948:	0800ce68 	.word	0x0800ce68
 800194c:	080019b1 	.word	0x080019b1
 8001950:	20000a10 	.word	0x20000a10
 8001954:	0800ce8c 	.word	0x0800ce8c
 8001958:	08001b19 	.word	0x08001b19
 800195c:	20000a14 	.word	0x20000a14
 8001960:	0800ceb0 	.word	0x0800ceb0
 8001964:	08001b71 	.word	0x08001b71
 8001968:	20000a18 	.word	0x20000a18

0800196c <HAL_GPIO_EXTI_Callback>:
 * @param  argument: Not used
 * @retval None
 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
	osDelay(500);
 8001976:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800197a:	f004 fa05 	bl	8005d88 <osDelay>
	if (GPIO_Pin == TP_IRQ_Pin)
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	2b10      	cmp	r3, #16
 8001982:	d10a      	bne.n	800199a <HAL_GPIO_EXTI_Callback+0x2e>
	{
		osSemaphoreRelease(buttonSemaphoreHandle);
 8001984:	4b07      	ldr	r3, [pc, #28]	@ (80019a4 <HAL_GPIO_EXTI_Callback+0x38>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f004 faf3 	bl	8005f74 <osSemaphoreRelease>
		HAL_UART_Transmit(&huart2, (uint8_t *)"2\n\r", strlen("2\n\r"), 100);
 800198e:	2364      	movs	r3, #100	@ 0x64
 8001990:	2203      	movs	r2, #3
 8001992:	4905      	ldr	r1, [pc, #20]	@ (80019a8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <HAL_GPIO_EXTI_Callback+0x40>)
 8001996:	f003 fd1b 	bl	80053d0 <HAL_UART_Transmit>
	}

}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000a1c 	.word	0x20000a1c
 80019a8:	0800ad28 	.word	0x0800ad28
 80019ac:	20000b88 	.word	0x20000b88

080019b0 <StartDefaultTask>:

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b092      	sub	sp, #72	@ 0x48
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

	initScreen();
 80019b8:	f000 f910 	bl	8001bdc <initScreen>
	/* Infinite loop */
	for (;;)
	{
		osSemaphoreAcquire(buttonSemaphoreHandle, portMAX_DELAY);
 80019bc:	4b52      	ldr	r3, [pc, #328]	@ (8001b08 <StartDefaultTask+0x158>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295
 80019c4:	4618      	mov	r0, r3
 80019c6:	f004 fa83 	bl	8005ed0 <osSemaphoreAcquire>
		uint16_t x, y;

		if (XPT2046_TouchPressed())
 80019ca:	f000 fed7 	bl	800277c <XPT2046_TouchPressed>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d075      	beq.n	8001ac0 <StartDefaultTask+0x110>
		{

			if (XPT2046_TouchGetCoordinates(&x, &y))
 80019d4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80019d8:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 80019dc:	4611      	mov	r1, r2
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 fedc 	bl	800279c <XPT2046_TouchGetCoordinates>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 8089 	beq.w	8001afe <StartDefaultTask+0x14e>
			{
				char buffer[50];
				snprintf(buffer, sizeof(buffer), "X: %d, Y: %d\r\n", x, y);
 80019ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80019ee:	461a      	mov	r2, r3
 80019f0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80019f2:	f107 0008 	add.w	r0, r7, #8
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	4613      	mov	r3, r2
 80019fa:	4a44      	ldr	r2, [pc, #272]	@ (8001b0c <StartDefaultTask+0x15c>)
 80019fc:	2132      	movs	r1, #50	@ 0x32
 80019fe:	f007 fbe3 	bl	80091c8 <sniprintf>
				HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer),
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fbe2 	bl	80001d0 <strlen>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	f107 0108 	add.w	r1, r7, #8
 8001a14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a18:	483d      	ldr	r0, [pc, #244]	@ (8001b10 <StartDefaultTask+0x160>)
 8001a1a:	f003 fcd9 	bl	80053d0 <HAL_UART_Transmit>
								  1000);

				if (x > 170 && x < 220 && y > 60 && y < 100)
 8001a1e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001a20:	2baa      	cmp	r3, #170	@ 0xaa
 8001a22:	d915      	bls.n	8001a50 <StartDefaultTask+0xa0>
 8001a24:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001a26:	2bdb      	cmp	r3, #219	@ 0xdb
 8001a28:	d812      	bhi.n	8001a50 <StartDefaultTask+0xa0>
 8001a2a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001a2c:	2b3c      	cmp	r3, #60	@ 0x3c
 8001a2e:	d90f      	bls.n	8001a50 <StartDefaultTask+0xa0>
 8001a30:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001a32:	2b63      	cmp	r3, #99	@ 0x63
 8001a34:	d80c      	bhi.n	8001a50 <StartDefaultTask+0xa0>
				{
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001a36:	2201      	movs	r2, #1
 8001a38:	2101      	movs	r1, #1
 8001a3a:	4836      	ldr	r0, [pc, #216]	@ (8001b14 <StartDefaultTask+0x164>)
 8001a3c:	f001 ff36 	bl	80038ac <HAL_GPIO_WritePin>
					ST7789_DrawFilledCircle(180, 90, 20, YELLOW);
 8001a40:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a44:	2214      	movs	r2, #20
 8001a46:	215a      	movs	r1, #90	@ 0x5a
 8001a48:	20b4      	movs	r0, #180	@ 0xb4
 8001a4a:	f7ff fdbb 	bl	80015c4 <ST7789_DrawFilledCircle>
 8001a4e:	e056      	b.n	8001afe <StartDefaultTask+0x14e>
				}
				else if (x > 170 && x < 220 && y > 140 && y < 180)
 8001a50:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001a52:	2baa      	cmp	r3, #170	@ 0xaa
 8001a54:	d915      	bls.n	8001a82 <StartDefaultTask+0xd2>
 8001a56:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001a58:	2bdb      	cmp	r3, #219	@ 0xdb
 8001a5a:	d812      	bhi.n	8001a82 <StartDefaultTask+0xd2>
 8001a5c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001a5e:	2b8c      	cmp	r3, #140	@ 0x8c
 8001a60:	d90f      	bls.n	8001a82 <StartDefaultTask+0xd2>
 8001a62:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001a64:	2bb3      	cmp	r3, #179	@ 0xb3
 8001a66:	d80c      	bhi.n	8001a82 <StartDefaultTask+0xd2>
				{
					HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	4829      	ldr	r0, [pc, #164]	@ (8001b14 <StartDefaultTask+0x164>)
 8001a6e:	f001 ff1d 	bl	80038ac <HAL_GPIO_WritePin>
					ST7789_DrawFilledCircle(180, 160, 20, YELLOW);
 8001a72:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a76:	2214      	movs	r2, #20
 8001a78:	21a0      	movs	r1, #160	@ 0xa0
 8001a7a:	20b4      	movs	r0, #180	@ 0xb4
 8001a7c:	f7ff fda2 	bl	80015c4 <ST7789_DrawFilledCircle>
 8001a80:	e03d      	b.n	8001afe <StartDefaultTask+0x14e>
				}

				else if (x > 170 && x < 220 && y > 210 && y < 270)
 8001a82:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001a84:	2baa      	cmp	r3, #170	@ 0xaa
 8001a86:	d93a      	bls.n	8001afe <StartDefaultTask+0x14e>
 8001a88:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001a8a:	2bdb      	cmp	r3, #219	@ 0xdb
 8001a8c:	d837      	bhi.n	8001afe <StartDefaultTask+0x14e>
 8001a8e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001a90:	2bd2      	cmp	r3, #210	@ 0xd2
 8001a92:	d934      	bls.n	8001afe <StartDefaultTask+0x14e>
 8001a94:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001a96:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8001a9a:	d230      	bcs.n	8001afe <StartDefaultTask+0x14e>
				{
					HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	481c      	ldr	r0, [pc, #112]	@ (8001b14 <StartDefaultTask+0x164>)
 8001aa2:	f001 ff03 	bl	80038ac <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	481a      	ldr	r0, [pc, #104]	@ (8001b14 <StartDefaultTask+0x164>)
 8001aac:	f001 fefe 	bl	80038ac <HAL_GPIO_WritePin>
					ST7789_DrawFilledCircle(180, 230, 20, YELLOW);
 8001ab0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001ab4:	2214      	movs	r2, #20
 8001ab6:	21e6      	movs	r1, #230	@ 0xe6
 8001ab8:	20b4      	movs	r0, #180	@ 0xb4
 8001aba:	f7ff fd83 	bl	80015c4 <ST7789_DrawFilledCircle>
 8001abe:	e01e      	b.n	8001afe <StartDefaultTask+0x14e>
				}
			}
		}
		else
		{
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	4813      	ldr	r0, [pc, #76]	@ (8001b14 <StartDefaultTask+0x164>)
 8001ac6:	f001 fef1 	bl	80038ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2101      	movs	r1, #1
 8001ace:	4811      	ldr	r0, [pc, #68]	@ (8001b14 <StartDefaultTask+0x164>)
 8001ad0:	f001 feec 	bl	80038ac <HAL_GPIO_WritePin>
			ST7789_DrawFilledCircle(180, 230, 20, RED);
 8001ad4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001ad8:	2214      	movs	r2, #20
 8001ada:	21e6      	movs	r1, #230	@ 0xe6
 8001adc:	20b4      	movs	r0, #180	@ 0xb4
 8001ade:	f7ff fd71 	bl	80015c4 <ST7789_DrawFilledCircle>
			ST7789_DrawFilledCircle(180, 160, 20, RED);
 8001ae2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001ae6:	2214      	movs	r2, #20
 8001ae8:	21a0      	movs	r1, #160	@ 0xa0
 8001aea:	20b4      	movs	r0, #180	@ 0xb4
 8001aec:	f7ff fd6a 	bl	80015c4 <ST7789_DrawFilledCircle>
			ST7789_DrawFilledCircle(180, 90, 20, RED);
 8001af0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001af4:	2214      	movs	r2, #20
 8001af6:	215a      	movs	r1, #90	@ 0x5a
 8001af8:	20b4      	movs	r0, #180	@ 0xb4
 8001afa:	f7ff fd63 	bl	80015c4 <ST7789_DrawFilledCircle>
		}
		osDelay(100);
 8001afe:	2064      	movs	r0, #100	@ 0x64
 8001b00:	f004 f942 	bl	8005d88 <osDelay>
	{
 8001b04:	e75a      	b.n	80019bc <StartDefaultTask+0xc>
 8001b06:	bf00      	nop
 8001b08:	20000a1c 	.word	0x20000a1c
 8001b0c:	0800ad2c 	.word	0x0800ad2c
 8001b10:	20000b88 	.word	0x20000b88
 8001b14:	40020400 	.word	0x40020400

08001b18 <DacPlayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DacPlayTask */
void DacPlayTask(void *argument)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DacPlayTask */
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001b20:	2110      	movs	r1, #16
 8001b22:	4810      	ldr	r0, [pc, #64]	@ (8001b64 <DacPlayTask+0x4c>)
 8001b24:	f001 f85a 	bl	8002bdc <HAL_DAC_Start>
	GenerateSineWave();
 8001b28:	f000 f926 	bl	8001d78 <GenerateSineWave>
	for (;;)
	{

		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, sine_wave_play[sampleIndex]);
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <DacPlayTask+0x50>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <DacPlayTask+0x54>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2110      	movs	r1, #16
 8001b3e:	4809      	ldr	r0, [pc, #36]	@ (8001b64 <DacPlayTask+0x4c>)
 8001b40:	f001 f8f9 	bl	8002d36 <HAL_DAC_SetValue>
		if (sampleIndex >= SAMPLES)
 8001b44:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <DacPlayTask+0x54>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b09      	cmp	r3, #9
 8001b4a:	d902      	bls.n	8001b52 <DacPlayTask+0x3a>
			sampleIndex = 0;
 8001b4c:	4b07      	ldr	r3, [pc, #28]	@ (8001b6c <DacPlayTask+0x54>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]

		sampleIndex++;
 8001b52:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <DacPlayTask+0x54>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	3301      	adds	r3, #1
 8001b58:	4a04      	ldr	r2, [pc, #16]	@ (8001b6c <DacPlayTask+0x54>)
 8001b5a:	6013      	str	r3, [r2, #0]
		osDelay(1);
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	f004 f913 	bl	8005d88 <osDelay>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, sine_wave_play[sampleIndex]);
 8001b62:	e7e3      	b.n	8001b2c <DacPlayTask+0x14>
 8001b64:	200009f0 	.word	0x200009f0
 8001b68:	20000a04 	.word	0x20000a04
 8001b6c:	20000a0c 	.word	0x20000a0c

08001b70 <DacButtonPlay>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DacButtonPlay */
void DacButtonPlay(void *argument)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DacButtonPlay */
	/* Infinite loop */
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001b78:	2110      	movs	r1, #16
 8001b7a:	4814      	ldr	r0, [pc, #80]	@ (8001bcc <DacButtonPlay+0x5c>)
 8001b7c:	f001 f82e 	bl	8002bdc <HAL_DAC_Start>
	GenerateSineWave2();
 8001b80:	f000 f95e 	bl	8001e40 <GenerateSineWave2>
	for (;;)
	{
		if (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) ==GPIO_PIN_RESET)
 8001b84:	2101      	movs	r1, #1
 8001b86:	4812      	ldr	r0, [pc, #72]	@ (8001bd0 <DacButtonPlay+0x60>)
 8001b88:	f001 fe78 	bl	800387c <HAL_GPIO_ReadPin>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f8      	bne.n	8001b84 <DacButtonPlay+0x14>
		{
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, sine_wave[sampleIndex]);
 8001b92:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <DacButtonPlay+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <DacButtonPlay+0x68>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2110      	movs	r1, #16
 8001ba4:	4809      	ldr	r0, [pc, #36]	@ (8001bcc <DacButtonPlay+0x5c>)
 8001ba6:	f001 f8c6 	bl	8002d36 <HAL_DAC_SetValue>
			if (sampleIndex >= SAMPLES)
 8001baa:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <DacButtonPlay+0x68>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b09      	cmp	r3, #9
 8001bb0:	d902      	bls.n	8001bb8 <DacButtonPlay+0x48>
				sampleIndex = 0;
 8001bb2:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <DacButtonPlay+0x68>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]

			sampleIndex++;
 8001bb8:	4b07      	ldr	r3, [pc, #28]	@ (8001bd8 <DacButtonPlay+0x68>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	4a06      	ldr	r2, [pc, #24]	@ (8001bd8 <DacButtonPlay+0x68>)
 8001bc0:	6013      	str	r3, [r2, #0]
			osDelay(1);
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	f004 f8e0 	bl	8005d88 <osDelay>
		if (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) ==GPIO_PIN_RESET)
 8001bc8:	e7dc      	b.n	8001b84 <DacButtonPlay+0x14>
 8001bca:	bf00      	nop
 8001bcc:	200009f0 	.word	0x200009f0
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	20000a08 	.word	0x20000a08
 8001bd8:	20000a0c 	.word	0x20000a0c

08001bdc <initScreen>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void initScreen()
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af04      	add	r7, sp, #16
	ST7789_Fill_Color(WHITE);
 8001be2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001be6:	f7ff fb25 	bl	8001234 <ST7789_Fill_Color>
	ST7789_WriteString(10, 10, "Embedded HCMUS", Font_16x26, GREEN, WHITE);
 8001bea:	4b58      	ldr	r3, [pc, #352]	@ (8001d4c <initScreen+0x170>)
 8001bec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bf0:	9202      	str	r2, [sp, #8]
 8001bf2:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001bf6:	9201      	str	r2, [sp, #4]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	9200      	str	r2, [sp, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a54      	ldr	r2, [pc, #336]	@ (8001d50 <initScreen+0x174>)
 8001c00:	210a      	movs	r1, #10
 8001c02:	200a      	movs	r0, #10
 8001c04:	f7ff fc8a 	bl	800151c <ST7789_WriteString>

	ST7789_WriteString(40, 50, "BTN1", Font_11x18, RED, WHITE);
 8001c08:	4b52      	ldr	r3, [pc, #328]	@ (8001d54 <initScreen+0x178>)
 8001c0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c0e:	9202      	str	r2, [sp, #8]
 8001c10:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001c14:	9201      	str	r2, [sp, #4]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	9200      	str	r2, [sp, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a4e      	ldr	r2, [pc, #312]	@ (8001d58 <initScreen+0x17c>)
 8001c1e:	2132      	movs	r1, #50	@ 0x32
 8001c20:	2028      	movs	r0, #40	@ 0x28
 8001c22:	f7ff fc7b 	bl	800151c <ST7789_WriteString>
	ST7789_DrawFilledCircle(60, 90, 20, BLUE);
 8001c26:	231f      	movs	r3, #31
 8001c28:	2214      	movs	r2, #20
 8001c2a:	215a      	movs	r1, #90	@ 0x5a
 8001c2c:	203c      	movs	r0, #60	@ 0x3c
 8001c2e:	f7ff fcc9 	bl	80015c4 <ST7789_DrawFilledCircle>

	ST7789_WriteString(160, 50, "LED1", Font_11x18, RED, WHITE);
 8001c32:	4b48      	ldr	r3, [pc, #288]	@ (8001d54 <initScreen+0x178>)
 8001c34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c38:	9202      	str	r2, [sp, #8]
 8001c3a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001c3e:	9201      	str	r2, [sp, #4]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	9200      	str	r2, [sp, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a45      	ldr	r2, [pc, #276]	@ (8001d5c <initScreen+0x180>)
 8001c48:	2132      	movs	r1, #50	@ 0x32
 8001c4a:	20a0      	movs	r0, #160	@ 0xa0
 8001c4c:	f7ff fc66 	bl	800151c <ST7789_WriteString>
	ST7789_DrawFilledCircle(180, 90, 20, RED);
 8001c50:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001c54:	2214      	movs	r2, #20
 8001c56:	215a      	movs	r1, #90	@ 0x5a
 8001c58:	20b4      	movs	r0, #180	@ 0xb4
 8001c5a:	f7ff fcb3 	bl	80015c4 <ST7789_DrawFilledCircle>

	ST7789_WriteString(40, 120, "BTN2", Font_11x18, RED, WHITE);
 8001c5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d54 <initScreen+0x178>)
 8001c60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c64:	9202      	str	r2, [sp, #8]
 8001c66:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001c6a:	9201      	str	r2, [sp, #4]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	9200      	str	r2, [sp, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a3b      	ldr	r2, [pc, #236]	@ (8001d60 <initScreen+0x184>)
 8001c74:	2178      	movs	r1, #120	@ 0x78
 8001c76:	2028      	movs	r0, #40	@ 0x28
 8001c78:	f7ff fc50 	bl	800151c <ST7789_WriteString>
	ST7789_DrawFilledCircle(60, 160, 20, BLUE);
 8001c7c:	231f      	movs	r3, #31
 8001c7e:	2214      	movs	r2, #20
 8001c80:	21a0      	movs	r1, #160	@ 0xa0
 8001c82:	203c      	movs	r0, #60	@ 0x3c
 8001c84:	f7ff fc9e 	bl	80015c4 <ST7789_DrawFilledCircle>

	ST7789_WriteString(160, 120, "LED2", Font_11x18, RED, WHITE);
 8001c88:	4b32      	ldr	r3, [pc, #200]	@ (8001d54 <initScreen+0x178>)
 8001c8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c8e:	9202      	str	r2, [sp, #8]
 8001c90:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001c94:	9201      	str	r2, [sp, #4]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	9200      	str	r2, [sp, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a31      	ldr	r2, [pc, #196]	@ (8001d64 <initScreen+0x188>)
 8001c9e:	2178      	movs	r1, #120	@ 0x78
 8001ca0:	20a0      	movs	r0, #160	@ 0xa0
 8001ca2:	f7ff fc3b 	bl	800151c <ST7789_WriteString>
	ST7789_DrawFilledCircle(180, 160, 20, RED);
 8001ca6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001caa:	2214      	movs	r2, #20
 8001cac:	21a0      	movs	r1, #160	@ 0xa0
 8001cae:	20b4      	movs	r0, #180	@ 0xb4
 8001cb0:	f7ff fc88 	bl	80015c4 <ST7789_DrawFilledCircle>

	ST7789_WriteString(20, 190, "BTN_DUAL", Font_11x18, RED, WHITE);
 8001cb4:	4b27      	ldr	r3, [pc, #156]	@ (8001d54 <initScreen+0x178>)
 8001cb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cba:	9202      	str	r2, [sp, #8]
 8001cbc:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001cc0:	9201      	str	r2, [sp, #4]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	9200      	str	r2, [sp, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a27      	ldr	r2, [pc, #156]	@ (8001d68 <initScreen+0x18c>)
 8001cca:	21be      	movs	r1, #190	@ 0xbe
 8001ccc:	2014      	movs	r0, #20
 8001cce:	f7ff fc25 	bl	800151c <ST7789_WriteString>
	ST7789_DrawFilledCircle(60, 230, 20, BLUE);
 8001cd2:	231f      	movs	r3, #31
 8001cd4:	2214      	movs	r2, #20
 8001cd6:	21e6      	movs	r1, #230	@ 0xe6
 8001cd8:	203c      	movs	r0, #60	@ 0x3c
 8001cda:	f7ff fc73 	bl	80015c4 <ST7789_DrawFilledCircle>

	ST7789_WriteString(140, 190, "DUAL_LED", Font_11x18, RED, WHITE);
 8001cde:	4b1d      	ldr	r3, [pc, #116]	@ (8001d54 <initScreen+0x178>)
 8001ce0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ce4:	9202      	str	r2, [sp, #8]
 8001ce6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001cea:	9201      	str	r2, [sp, #4]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	9200      	str	r2, [sp, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d6c <initScreen+0x190>)
 8001cf4:	21be      	movs	r1, #190	@ 0xbe
 8001cf6:	208c      	movs	r0, #140	@ 0x8c
 8001cf8:	f7ff fc10 	bl	800151c <ST7789_WriteString>
	ST7789_DrawFilledCircle(180, 230, 20, RED);
 8001cfc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001d00:	2214      	movs	r2, #20
 8001d02:	21e6      	movs	r1, #230	@ 0xe6
 8001d04:	20b4      	movs	r0, #180	@ 0xb4
 8001d06:	f7ff fc5d 	bl	80015c4 <ST7789_DrawFilledCircle>
	ST7789_WriteString(30, 270, "20200381-21200370", Font_11x18, BLUE, WHITE);
 8001d0a:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <initScreen+0x178>)
 8001d0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d10:	9202      	str	r2, [sp, #8]
 8001d12:	221f      	movs	r2, #31
 8001d14:	9201      	str	r2, [sp, #4]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	9200      	str	r2, [sp, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a14      	ldr	r2, [pc, #80]	@ (8001d70 <initScreen+0x194>)
 8001d1e:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8001d22:	201e      	movs	r0, #30
 8001d24:	f7ff fbfa 	bl	800151c <ST7789_WriteString>
	ST7789_WriteString(30, 290, "  Trung -  Viet", Font_11x18, BLUE, WHITE);
 8001d28:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <initScreen+0x178>)
 8001d2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d2e:	9202      	str	r2, [sp, #8]
 8001d30:	221f      	movs	r2, #31
 8001d32:	9201      	str	r2, [sp, #4]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	9200      	str	r2, [sp, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d74 <initScreen+0x198>)
 8001d3c:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8001d40:	201e      	movs	r0, #30
 8001d42:	f7ff fbeb 	bl	800151c <ST7789_WriteString>
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000008 	.word	0x20000008
 8001d50:	0800ad3c 	.word	0x0800ad3c
 8001d54:	20000000 	.word	0x20000000
 8001d58:	0800ad4c 	.word	0x0800ad4c
 8001d5c:	0800ad54 	.word	0x0800ad54
 8001d60:	0800ad5c 	.word	0x0800ad5c
 8001d64:	0800ad64 	.word	0x0800ad64
 8001d68:	0800ad6c 	.word	0x0800ad6c
 8001d6c:	0800ad78 	.word	0x0800ad78
 8001d70:	0800ad84 	.word	0x0800ad84
 8001d74:	0800ad98 	.word	0x0800ad98

08001d78 <GenerateSineWave>:
void GenerateSineWave()
{
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
	for (int i = 0; i < SAMPLES; i++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	e047      	b.n	8001e14 <GenerateSineWave+0x9c>
	{
		sine_wave_play[i] = ((sin(i * 2 * pi / SAMPLES) + 1) * res_12b / 2);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fbcb 	bl	8000524 <__aeabi_i2d>
 8001d8e:	a32a      	add	r3, pc, #168	@ (adr r3, 8001e38 <GenerateSineWave+0xc0>)
 8001d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d94:	f7fe fc30 	bl	80005f8 <__aeabi_dmul>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	4b20      	ldr	r3, [pc, #128]	@ (8001e28 <GenerateSineWave+0xb0>)
 8001da6:	f7fe fd51 	bl	800084c <__aeabi_ddiv>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	ec43 2b17 	vmov	d7, r2, r3
 8001db2:	eeb0 0a47 	vmov.f32	s0, s14
 8001db6:	eef0 0a67 	vmov.f32	s1, s15
 8001dba:	f007 ff11 	bl	8009be0 <sin>
 8001dbe:	ec51 0b10 	vmov	r0, r1, d0
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <GenerateSineWave+0xb4>)
 8001dc8:	f7fe fa60 	bl	800028c <__adddf3>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	4b15      	ldr	r3, [pc, #84]	@ (8001e30 <GenerateSineWave+0xb8>)
 8001dda:	f7fe fc0d 	bl	80005f8 <__aeabi_dmul>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dee:	f7fe fd2d 	bl	800084c <__aeabi_ddiv>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <GenerateSineWave+0xbc>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	18d4      	adds	r4, r2, r3
 8001e04:	f7fe feba 	bl	8000b7c <__aeabi_d2uiz>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	8023      	strh	r3, [r4, #0]
	for (int i = 0; i < SAMPLES; i++)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3301      	adds	r3, #1
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b09      	cmp	r3, #9
 8001e18:	ddb4      	ble.n	8001d84 <GenerateSineWave+0xc>
	}
}
 8001e1a:	bf00      	nop
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd90      	pop	{r4, r7, pc}
 8001e24:	f3af 8000 	nop.w
 8001e28:	40240000 	.word	0x40240000
 8001e2c:	3ff00000 	.word	0x3ff00000
 8001e30:	40b00000 	.word	0x40b00000
 8001e34:	20000a04 	.word	0x20000a04
 8001e38:	d2412aee 	.word	0xd2412aee
 8001e3c:	400921e9 	.word	0x400921e9

08001e40 <GenerateSineWave2>:
void GenerateSineWave2()
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
	for (int i = 0; i < SAMPLES; i++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	e047      	b.n	8001edc <GenerateSineWave2+0x9c>
	{
		sine_wave[i] = ((sin(i * 2 * pi / SAMPLES) + 1) * res_8b / 2);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb67 	bl	8000524 <__aeabi_i2d>
 8001e56:	a32b      	add	r3, pc, #172	@ (adr r3, 8001f04 <GenerateSineWave2+0xc4>)
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	f7fe fbcc 	bl	80005f8 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	4b22      	ldr	r3, [pc, #136]	@ (8001ef8 <GenerateSineWave2+0xb8>)
 8001e6e:	f7fe fced 	bl	800084c <__aeabi_ddiv>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	ec43 2b17 	vmov	d7, r2, r3
 8001e7a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e7e:	eef0 0a67 	vmov.f32	s1, s15
 8001e82:	f007 fead 	bl	8009be0 <sin>
 8001e86:	ec51 0b10 	vmov	r0, r1, d0
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <GenerateSineWave2+0xbc>)
 8001e90:	f7fe f9fc 	bl	800028c <__adddf3>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	a314      	add	r3, pc, #80	@ (adr r3, 8001ef0 <GenerateSineWave2+0xb0>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe fba9 	bl	80005f8 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001eb6:	f7fe fcc9 	bl	800084c <__aeabi_ddiv>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f00 <GenerateSineWave2+0xc0>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	18d4      	adds	r4, r2, r3
 8001ecc:	f7fe fe56 	bl	8000b7c <__aeabi_d2uiz>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	8023      	strh	r3, [r4, #0]
	for (int i = 0; i < SAMPLES; i++)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b09      	cmp	r3, #9
 8001ee0:	ddb4      	ble.n	8001e4c <GenerateSineWave2+0xc>
	}
}
 8001ee2:	bf00      	nop
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd90      	pop	{r4, r7, pc}
 8001eec:	f3af 8000 	nop.w
 8001ef0:	00000000 	.word	0x00000000
 8001ef4:	406ea000 	.word	0x406ea000
 8001ef8:	40240000 	.word	0x40240000
 8001efc:	3ff00000 	.word	0x3ff00000
 8001f00:	20000a08 	.word	0x20000a08
 8001f04:	d2412aee 	.word	0xd2412aee
 8001f08:	400921e9 	.word	0x400921e9

08001f0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f12:	f107 030c 	add.w	r3, r7, #12
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	4b3f      	ldr	r3, [pc, #252]	@ (8002024 <MX_GPIO_Init+0x118>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	4a3e      	ldr	r2, [pc, #248]	@ (8002024 <MX_GPIO_Init+0x118>)
 8001f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f32:	4b3c      	ldr	r3, [pc, #240]	@ (8002024 <MX_GPIO_Init+0x118>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	4b38      	ldr	r3, [pc, #224]	@ (8002024 <MX_GPIO_Init+0x118>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	4a37      	ldr	r2, [pc, #220]	@ (8002024 <MX_GPIO_Init+0x118>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4e:	4b35      	ldr	r3, [pc, #212]	@ (8002024 <MX_GPIO_Init+0x118>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	4b31      	ldr	r3, [pc, #196]	@ (8002024 <MX_GPIO_Init+0x118>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	4a30      	ldr	r2, [pc, #192]	@ (8002024 <MX_GPIO_Init+0x118>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8002024 <MX_GPIO_Init+0x118>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LCD_CS_Pin|LCD_DC_Pin
 8001f76:	2200      	movs	r2, #0
 8001f78:	f240 3183 	movw	r1, #899	@ 0x383
 8001f7c:	482a      	ldr	r0, [pc, #168]	@ (8002028 <MX_GPIO_Init+0x11c>)
 8001f7e:	f001 fc95 	bl	80038ac <HAL_GPIO_WritePin>
                          |TP_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_BL_Pin, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	2144      	movs	r1, #68	@ 0x44
 8001f86:	4828      	ldr	r0, [pc, #160]	@ (8002028 <MX_GPIO_Init+0x11c>)
 8001f88:	f001 fc90 	bl	80038ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f90:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f96:	2301      	movs	r3, #1
 8001f98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4822      	ldr	r0, [pc, #136]	@ (800202c <MX_GPIO_Init+0x120>)
 8001fa2:	f001 facf 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001faa:	2301      	movs	r3, #1
 8001fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb6:	f107 030c 	add.w	r3, r7, #12
 8001fba:	4619      	mov	r1, r3
 8001fbc:	481a      	ldr	r0, [pc, #104]	@ (8002028 <MX_GPIO_Init+0x11c>)
 8001fbe:	f001 fac1 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_BL_Pin|LCD_CS_Pin|LCD_DC_Pin
 8001fc2:	f44f 7371 	mov.w	r3, #964	@ 0x3c4
 8001fc6:	60fb      	str	r3, [r7, #12]
                          |TP_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4813      	ldr	r0, [pc, #76]	@ (8002028 <MX_GPIO_Init+0x11c>)
 8001fdc:	f001 fab2 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001fe0:	2310      	movs	r3, #16
 8001fe2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fe4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fea:	2301      	movs	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001fee:	f107 030c 	add.w	r3, r7, #12
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480c      	ldr	r0, [pc, #48]	@ (8002028 <MX_GPIO_Init+0x11c>)
 8001ff6:	f001 faa5 	bl	8003544 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2105      	movs	r1, #5
 8001ffe:	2006      	movs	r0, #6
 8002000:	f000 fda0 	bl	8002b44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002004:	2006      	movs	r0, #6
 8002006:	f000 fdb9 	bl	8002b7c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	210f      	movs	r1, #15
 800200e:	200a      	movs	r0, #10
 8002010:	f000 fd98 	bl	8002b44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002014:	200a      	movs	r0, #10
 8002016:	f000 fdb1 	bl	8002b7c <HAL_NVIC_EnableIRQ>

}
 800201a:	bf00      	nop
 800201c:	3720      	adds	r7, #32
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800
 8002028:	40020400 	.word	0x40020400
 800202c:	40020000 	.word	0x40020000

08002030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002034:	f000 fc68 	bl	8002908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002038:	f000 f828 	bl	800208c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800203c:	f7ff ff66 	bl	8001f0c <MX_GPIO_Init>
  MX_DMA_Init();
 8002040:	f7ff fc26 	bl	8001890 <MX_DMA_Init>
  MX_SPI1_Init();
 8002044:	f000 f8a2 	bl	800218c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002048:	f000 fae4 	bl	8002614 <MX_USART2_UART_Init>
  MX_DAC_Init();
 800204c:	f7ff fba0 	bl	8001790 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8002050:	2201      	movs	r2, #1
 8002052:	2101      	movs	r1, #1
 8002054:	480b      	ldr	r0, [pc, #44]	@ (8002084 <main+0x54>)
 8002056:	f001 fc29 	bl	80038ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800205a:	2201      	movs	r2, #1
 800205c:	2102      	movs	r1, #2
 800205e:	4809      	ldr	r0, [pc, #36]	@ (8002084 <main+0x54>)
 8002060:	f001 fc24 	bl	80038ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET);
 8002064:	2201      	movs	r2, #1
 8002066:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800206a:	4807      	ldr	r0, [pc, #28]	@ (8002088 <main+0x58>)
 800206c:	f001 fc1e 	bl	80038ac <HAL_GPIO_WritePin>
	ST7789_Init();
 8002070:	f7ff f83a 	bl	80010e8 <ST7789_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002074:	f003 fdac 	bl	8005bd0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002078:	f7ff fc32 	bl	80018e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800207c:	f003 fdcc 	bl	8005c18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <main+0x50>
 8002084:	40020000 	.word	0x40020000
 8002088:	40020400 	.word	0x40020400

0800208c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b094      	sub	sp, #80	@ 0x50
 8002090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002092:	f107 0320 	add.w	r3, r7, #32
 8002096:	2230      	movs	r2, #48	@ 0x30
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f007 f8c8 	bl	8009230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	4b27      	ldr	r3, [pc, #156]	@ (8002154 <SystemClock_Config+0xc8>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	4a26      	ldr	r2, [pc, #152]	@ (8002154 <SystemClock_Config+0xc8>)
 80020ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020be:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c0:	4b24      	ldr	r3, [pc, #144]	@ (8002154 <SystemClock_Config+0xc8>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020cc:	2300      	movs	r3, #0
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	4b21      	ldr	r3, [pc, #132]	@ (8002158 <SystemClock_Config+0xcc>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a20      	ldr	r2, [pc, #128]	@ (8002158 <SystemClock_Config+0xcc>)
 80020d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002158 <SystemClock_Config+0xcc>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020e8:	2301      	movs	r3, #1
 80020ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020f2:	2302      	movs	r3, #2
 80020f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020fc:	2304      	movs	r3, #4
 80020fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002100:	2354      	movs	r3, #84	@ 0x54
 8002102:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002104:	2302      	movs	r3, #2
 8002106:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002108:	2304      	movs	r3, #4
 800210a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800210c:	f107 0320 	add.w	r3, r7, #32
 8002110:	4618      	mov	r0, r3
 8002112:	f001 fbfd 	bl	8003910 <HAL_RCC_OscConfig>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800211c:	f000 f830 	bl	8002180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002120:	230f      	movs	r3, #15
 8002122:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002124:	2302      	movs	r3, #2
 8002126:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800212c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002130:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002136:	f107 030c 	add.w	r3, r7, #12
 800213a:	2102      	movs	r1, #2
 800213c:	4618      	mov	r0, r3
 800213e:	f001 fe5f 	bl	8003e00 <HAL_RCC_ClockConfig>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002148:	f000 f81a 	bl	8002180 <Error_Handler>
  }
}
 800214c:	bf00      	nop
 800214e:	3750      	adds	r7, #80	@ 0x50
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40023800 	.word	0x40023800
 8002158:	40007000 	.word	0x40007000

0800215c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a04      	ldr	r2, [pc, #16]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d101      	bne.n	8002172 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800216e:	f000 fbed 	bl	800294c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40001000 	.word	0x40001000

08002180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002184:	b672      	cpsid	i
}
 8002186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <Error_Handler+0x8>

0800218c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002190:	4b17      	ldr	r3, [pc, #92]	@ (80021f0 <MX_SPI1_Init+0x64>)
 8002192:	4a18      	ldr	r2, [pc, #96]	@ (80021f4 <MX_SPI1_Init+0x68>)
 8002194:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002196:	4b16      	ldr	r3, [pc, #88]	@ (80021f0 <MX_SPI1_Init+0x64>)
 8002198:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800219c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800219e:	4b14      	ldr	r3, [pc, #80]	@ (80021f0 <MX_SPI1_Init+0x64>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021a4:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <MX_SPI1_Init+0x64>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021aa:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <MX_SPI1_Init+0x64>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021b0:	4b0f      	ldr	r3, [pc, #60]	@ (80021f0 <MX_SPI1_Init+0x64>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021b6:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <MX_SPI1_Init+0x64>)
 80021b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80021be:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <MX_SPI1_Init+0x64>)
 80021c0:	2228      	movs	r2, #40	@ 0x28
 80021c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021c4:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <MX_SPI1_Init+0x64>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021ca:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <MX_SPI1_Init+0x64>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021d0:	4b07      	ldr	r3, [pc, #28]	@ (80021f0 <MX_SPI1_Init+0x64>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021d6:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <MX_SPI1_Init+0x64>)
 80021d8:	220a      	movs	r2, #10
 80021da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021dc:	4804      	ldr	r0, [pc, #16]	@ (80021f0 <MX_SPI1_Init+0x64>)
 80021de:	f002 f861 	bl	80042a4 <HAL_SPI_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80021e8:	f7ff ffca 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021ec:	bf00      	nop
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000a24 	.word	0x20000a24
 80021f4:	40013000 	.word	0x40013000

080021f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	@ 0x28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a56      	ldr	r2, [pc, #344]	@ (8002370 <HAL_SPI_MspInit+0x178>)
 8002216:	4293      	cmp	r3, r2
 8002218:	f040 80a6 	bne.w	8002368 <HAL_SPI_MspInit+0x170>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800221c:	2300      	movs	r3, #0
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	4b54      	ldr	r3, [pc, #336]	@ (8002374 <HAL_SPI_MspInit+0x17c>)
 8002222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002224:	4a53      	ldr	r2, [pc, #332]	@ (8002374 <HAL_SPI_MspInit+0x17c>)
 8002226:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800222a:	6453      	str	r3, [r2, #68]	@ 0x44
 800222c:	4b51      	ldr	r3, [pc, #324]	@ (8002374 <HAL_SPI_MspInit+0x17c>)
 800222e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002230:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	4b4d      	ldr	r3, [pc, #308]	@ (8002374 <HAL_SPI_MspInit+0x17c>)
 800223e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002240:	4a4c      	ldr	r2, [pc, #304]	@ (8002374 <HAL_SPI_MspInit+0x17c>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6313      	str	r3, [r2, #48]	@ 0x30
 8002248:	4b4a      	ldr	r3, [pc, #296]	@ (8002374 <HAL_SPI_MspInit+0x17c>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	4b46      	ldr	r3, [pc, #280]	@ (8002374 <HAL_SPI_MspInit+0x17c>)
 800225a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225c:	4a45      	ldr	r2, [pc, #276]	@ (8002374 <HAL_SPI_MspInit+0x17c>)
 800225e:	f043 0302 	orr.w	r3, r3, #2
 8002262:	6313      	str	r3, [r2, #48]	@ 0x30
 8002264:	4b43      	ldr	r3, [pc, #268]	@ (8002374 <HAL_SPI_MspInit+0x17c>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = MISO_Pin|MOSI_Pin;
 8002270:	23c0      	movs	r3, #192	@ 0xc0
 8002272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	2302      	movs	r3, #2
 8002276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002278:	2301      	movs	r3, #1
 800227a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227c:	2303      	movs	r3, #3
 800227e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002280:	2305      	movs	r3, #5
 8002282:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	4619      	mov	r1, r3
 800228a:	483b      	ldr	r0, [pc, #236]	@ (8002378 <HAL_SPI_MspInit+0x180>)
 800228c:	f001 f95a 	bl	8003544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCLK_Pin;
 8002290:	2308      	movs	r3, #8
 8002292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002298:	2301      	movs	r3, #1
 800229a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229c:	2303      	movs	r3, #3
 800229e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022a0:	2305      	movs	r3, #5
 80022a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCLK_GPIO_Port, &GPIO_InitStruct);
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	4619      	mov	r1, r3
 80022aa:	4834      	ldr	r0, [pc, #208]	@ (800237c <HAL_SPI_MspInit+0x184>)
 80022ac:	f001 f94a 	bl	8003544 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80022b0:	4b33      	ldr	r3, [pc, #204]	@ (8002380 <HAL_SPI_MspInit+0x188>)
 80022b2:	4a34      	ldr	r2, [pc, #208]	@ (8002384 <HAL_SPI_MspInit+0x18c>)
 80022b4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80022b6:	4b32      	ldr	r3, [pc, #200]	@ (8002380 <HAL_SPI_MspInit+0x188>)
 80022b8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80022bc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022be:	4b30      	ldr	r3, [pc, #192]	@ (8002380 <HAL_SPI_MspInit+0x188>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002380 <HAL_SPI_MspInit+0x188>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002380 <HAL_SPI_MspInit+0x188>)
 80022cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022d0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002380 <HAL_SPI_MspInit+0x188>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022d8:	4b29      	ldr	r3, [pc, #164]	@ (8002380 <HAL_SPI_MspInit+0x188>)
 80022da:	2200      	movs	r2, #0
 80022dc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80022de:	4b28      	ldr	r3, [pc, #160]	@ (8002380 <HAL_SPI_MspInit+0x188>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022e4:	4b26      	ldr	r3, [pc, #152]	@ (8002380 <HAL_SPI_MspInit+0x188>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022ea:	4b25      	ldr	r3, [pc, #148]	@ (8002380 <HAL_SPI_MspInit+0x188>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80022f0:	4823      	ldr	r0, [pc, #140]	@ (8002380 <HAL_SPI_MspInit+0x188>)
 80022f2:	f000 fdb7 	bl	8002e64 <HAL_DMA_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 80022fc:	f7ff ff40 	bl	8002180 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a1f      	ldr	r2, [pc, #124]	@ (8002380 <HAL_SPI_MspInit+0x188>)
 8002304:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002306:	4a1e      	ldr	r2, [pc, #120]	@ (8002380 <HAL_SPI_MspInit+0x188>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800230c:	4b1e      	ldr	r3, [pc, #120]	@ (8002388 <HAL_SPI_MspInit+0x190>)
 800230e:	4a1f      	ldr	r2, [pc, #124]	@ (800238c <HAL_SPI_MspInit+0x194>)
 8002310:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002312:	4b1d      	ldr	r3, [pc, #116]	@ (8002388 <HAL_SPI_MspInit+0x190>)
 8002314:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002318:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800231a:	4b1b      	ldr	r3, [pc, #108]	@ (8002388 <HAL_SPI_MspInit+0x190>)
 800231c:	2240      	movs	r2, #64	@ 0x40
 800231e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002320:	4b19      	ldr	r3, [pc, #100]	@ (8002388 <HAL_SPI_MspInit+0x190>)
 8002322:	2200      	movs	r2, #0
 8002324:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002326:	4b18      	ldr	r3, [pc, #96]	@ (8002388 <HAL_SPI_MspInit+0x190>)
 8002328:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800232c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800232e:	4b16      	ldr	r3, [pc, #88]	@ (8002388 <HAL_SPI_MspInit+0x190>)
 8002330:	2200      	movs	r2, #0
 8002332:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002334:	4b14      	ldr	r3, [pc, #80]	@ (8002388 <HAL_SPI_MspInit+0x190>)
 8002336:	2200      	movs	r2, #0
 8002338:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800233a:	4b13      	ldr	r3, [pc, #76]	@ (8002388 <HAL_SPI_MspInit+0x190>)
 800233c:	2200      	movs	r2, #0
 800233e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002340:	4b11      	ldr	r3, [pc, #68]	@ (8002388 <HAL_SPI_MspInit+0x190>)
 8002342:	2200      	movs	r2, #0
 8002344:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002346:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <HAL_SPI_MspInit+0x190>)
 8002348:	2200      	movs	r2, #0
 800234a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800234c:	480e      	ldr	r0, [pc, #56]	@ (8002388 <HAL_SPI_MspInit+0x190>)
 800234e:	f000 fd89 	bl	8002e64 <HAL_DMA_Init>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8002358:	f7ff ff12 	bl	8002180 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <HAL_SPI_MspInit+0x190>)
 8002360:	649a      	str	r2, [r3, #72]	@ 0x48
 8002362:	4a09      	ldr	r2, [pc, #36]	@ (8002388 <HAL_SPI_MspInit+0x190>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002368:	bf00      	nop
 800236a:	3728      	adds	r7, #40	@ 0x28
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40013000 	.word	0x40013000
 8002374:	40023800 	.word	0x40023800
 8002378:	40020000 	.word	0x40020000
 800237c:	40020400 	.word	0x40020400
 8002380:	20000a7c 	.word	0x20000a7c
 8002384:	40026410 	.word	0x40026410
 8002388:	20000adc 	.word	0x20000adc
 800238c:	40026458 	.word	0x40026458

08002390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	4b12      	ldr	r3, [pc, #72]	@ (80023e4 <HAL_MspInit+0x54>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239e:	4a11      	ldr	r2, [pc, #68]	@ (80023e4 <HAL_MspInit+0x54>)
 80023a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023a6:	4b0f      	ldr	r3, [pc, #60]	@ (80023e4 <HAL_MspInit+0x54>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	4b0b      	ldr	r3, [pc, #44]	@ (80023e4 <HAL_MspInit+0x54>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	4a0a      	ldr	r2, [pc, #40]	@ (80023e4 <HAL_MspInit+0x54>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c2:	4b08      	ldr	r3, [pc, #32]	@ (80023e4 <HAL_MspInit+0x54>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023ce:	2200      	movs	r2, #0
 80023d0:	210f      	movs	r1, #15
 80023d2:	f06f 0001 	mvn.w	r0, #1
 80023d6:	f000 fbb5 	bl	8002b44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800

080023e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08e      	sub	sp, #56	@ 0x38
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	4b33      	ldr	r3, [pc, #204]	@ (80024cc <HAL_InitTick+0xe4>)
 80023fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002400:	4a32      	ldr	r2, [pc, #200]	@ (80024cc <HAL_InitTick+0xe4>)
 8002402:	f043 0310 	orr.w	r3, r3, #16
 8002406:	6413      	str	r3, [r2, #64]	@ 0x40
 8002408:	4b30      	ldr	r3, [pc, #192]	@ (80024cc <HAL_InitTick+0xe4>)
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002414:	f107 0210 	add.w	r2, r7, #16
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	4611      	mov	r1, r2
 800241e:	4618      	mov	r0, r3
 8002420:	f001 ff0e 	bl	8004240 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800242a:	2b00      	cmp	r3, #0
 800242c:	d103      	bne.n	8002436 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800242e:	f001 fedf 	bl	80041f0 <HAL_RCC_GetPCLK1Freq>
 8002432:	6378      	str	r0, [r7, #52]	@ 0x34
 8002434:	e004      	b.n	8002440 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002436:	f001 fedb 	bl	80041f0 <HAL_RCC_GetPCLK1Freq>
 800243a:	4603      	mov	r3, r0
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002442:	4a23      	ldr	r2, [pc, #140]	@ (80024d0 <HAL_InitTick+0xe8>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	0c9b      	lsrs	r3, r3, #18
 800244a:	3b01      	subs	r3, #1
 800244c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800244e:	4b21      	ldr	r3, [pc, #132]	@ (80024d4 <HAL_InitTick+0xec>)
 8002450:	4a21      	ldr	r2, [pc, #132]	@ (80024d8 <HAL_InitTick+0xf0>)
 8002452:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002454:	4b1f      	ldr	r3, [pc, #124]	@ (80024d4 <HAL_InitTick+0xec>)
 8002456:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800245a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800245c:	4a1d      	ldr	r2, [pc, #116]	@ (80024d4 <HAL_InitTick+0xec>)
 800245e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002460:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002462:	4b1c      	ldr	r3, [pc, #112]	@ (80024d4 <HAL_InitTick+0xec>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002468:	4b1a      	ldr	r3, [pc, #104]	@ (80024d4 <HAL_InitTick+0xec>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800246e:	4b19      	ldr	r3, [pc, #100]	@ (80024d4 <HAL_InitTick+0xec>)
 8002470:	2200      	movs	r2, #0
 8002472:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002474:	4817      	ldr	r0, [pc, #92]	@ (80024d4 <HAL_InitTick+0xec>)
 8002476:	f002 fcb9 	bl	8004dec <HAL_TIM_Base_Init>
 800247a:	4603      	mov	r3, r0
 800247c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002480:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002484:	2b00      	cmp	r3, #0
 8002486:	d11b      	bne.n	80024c0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002488:	4812      	ldr	r0, [pc, #72]	@ (80024d4 <HAL_InitTick+0xec>)
 800248a:	f002 fd09 	bl	8004ea0 <HAL_TIM_Base_Start_IT>
 800248e:	4603      	mov	r3, r0
 8002490:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002494:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002498:	2b00      	cmp	r3, #0
 800249a:	d111      	bne.n	80024c0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800249c:	2036      	movs	r0, #54	@ 0x36
 800249e:	f000 fb6d 	bl	8002b7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b0f      	cmp	r3, #15
 80024a6:	d808      	bhi.n	80024ba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80024a8:	2200      	movs	r2, #0
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	2036      	movs	r0, #54	@ 0x36
 80024ae:	f000 fb49 	bl	8002b44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024b2:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <HAL_InitTick+0xf4>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	e002      	b.n	80024c0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80024c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3738      	adds	r7, #56	@ 0x38
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40023800 	.word	0x40023800
 80024d0:	431bde83 	.word	0x431bde83
 80024d4:	20000b3c 	.word	0x20000b3c
 80024d8:	40001000 	.word	0x40001000
 80024dc:	20000018 	.word	0x20000018

080024e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024e4:	bf00      	nop
 80024e6:	e7fd      	b.n	80024e4 <NMI_Handler+0x4>

080024e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ec:	bf00      	nop
 80024ee:	e7fd      	b.n	80024ec <HardFault_Handler+0x4>

080024f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f4:	bf00      	nop
 80024f6:	e7fd      	b.n	80024f4 <MemManage_Handler+0x4>

080024f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024fc:	bf00      	nop
 80024fe:	e7fd      	b.n	80024fc <BusFault_Handler+0x4>

08002500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002504:	bf00      	nop
 8002506:	e7fd      	b.n	8002504 <UsageFault_Handler+0x4>

08002508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 800251a:	2001      	movs	r0, #1
 800251c:	f001 f9e0 	bl	80038e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}

08002524 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 8002528:	2010      	movs	r0, #16
 800252a:	f001 f9d9 	bl	80038e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8002538:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <TIM6_DAC_IRQHandler+0x20>)
 800253a:	791b      	ldrb	r3, [r3, #4]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8002542:	4804      	ldr	r0, [pc, #16]	@ (8002554 <TIM6_DAC_IRQHandler+0x20>)
 8002544:	f000 fba1 	bl	8002c8a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002548:	4803      	ldr	r0, [pc, #12]	@ (8002558 <TIM6_DAC_IRQHandler+0x24>)
 800254a:	f002 fd19 	bl	8004f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200009f0 	.word	0x200009f0
 8002558:	20000b3c 	.word	0x20000b3c

0800255c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002560:	4802      	ldr	r0, [pc, #8]	@ (800256c <DMA2_Stream0_IRQHandler+0x10>)
 8002562:	f000 fd85 	bl	8003070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000a7c 	.word	0x20000a7c

08002570 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002574:	4802      	ldr	r0, [pc, #8]	@ (8002580 <DMA2_Stream3_IRQHandler+0x10>)
 8002576:	f000 fd7b 	bl	8003070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000adc 	.word	0x20000adc

08002584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800258c:	4a14      	ldr	r2, [pc, #80]	@ (80025e0 <_sbrk+0x5c>)
 800258e:	4b15      	ldr	r3, [pc, #84]	@ (80025e4 <_sbrk+0x60>)
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002598:	4b13      	ldr	r3, [pc, #76]	@ (80025e8 <_sbrk+0x64>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025a0:	4b11      	ldr	r3, [pc, #68]	@ (80025e8 <_sbrk+0x64>)
 80025a2:	4a12      	ldr	r2, [pc, #72]	@ (80025ec <_sbrk+0x68>)
 80025a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025a6:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <_sbrk+0x64>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d207      	bcs.n	80025c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025b4:	f006 fe9a 	bl	80092ec <__errno>
 80025b8:	4603      	mov	r3, r0
 80025ba:	220c      	movs	r2, #12
 80025bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025be:	f04f 33ff 	mov.w	r3, #4294967295
 80025c2:	e009      	b.n	80025d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025c4:	4b08      	ldr	r3, [pc, #32]	@ (80025e8 <_sbrk+0x64>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ca:	4b07      	ldr	r3, [pc, #28]	@ (80025e8 <_sbrk+0x64>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4413      	add	r3, r2
 80025d2:	4a05      	ldr	r2, [pc, #20]	@ (80025e8 <_sbrk+0x64>)
 80025d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025d6:	68fb      	ldr	r3, [r7, #12]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20020000 	.word	0x20020000
 80025e4:	00004000 	.word	0x00004000
 80025e8:	20000b84 	.word	0x20000b84
 80025ec:	20005708 	.word	0x20005708

080025f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025f4:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <SystemInit+0x20>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fa:	4a05      	ldr	r2, [pc, #20]	@ (8002610 <SystemInit+0x20>)
 80025fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002600:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002618:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <MX_USART2_UART_Init+0x4c>)
 800261a:	4a12      	ldr	r2, [pc, #72]	@ (8002664 <MX_USART2_UART_Init+0x50>)
 800261c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800261e:	4b10      	ldr	r3, [pc, #64]	@ (8002660 <MX_USART2_UART_Init+0x4c>)
 8002620:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002626:	4b0e      	ldr	r3, [pc, #56]	@ (8002660 <MX_USART2_UART_Init+0x4c>)
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800262c:	4b0c      	ldr	r3, [pc, #48]	@ (8002660 <MX_USART2_UART_Init+0x4c>)
 800262e:	2200      	movs	r2, #0
 8002630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002632:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <MX_USART2_UART_Init+0x4c>)
 8002634:	2200      	movs	r2, #0
 8002636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002638:	4b09      	ldr	r3, [pc, #36]	@ (8002660 <MX_USART2_UART_Init+0x4c>)
 800263a:	220c      	movs	r2, #12
 800263c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800263e:	4b08      	ldr	r3, [pc, #32]	@ (8002660 <MX_USART2_UART_Init+0x4c>)
 8002640:	2200      	movs	r2, #0
 8002642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002644:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <MX_USART2_UART_Init+0x4c>)
 8002646:	2200      	movs	r2, #0
 8002648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800264a:	4805      	ldr	r0, [pc, #20]	@ (8002660 <MX_USART2_UART_Init+0x4c>)
 800264c:	f002 fe70 	bl	8005330 <HAL_UART_Init>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002656:	f7ff fd93 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000b88 	.word	0x20000b88
 8002664:	40004400 	.word	0x40004400

08002668 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	@ 0x28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a19      	ldr	r2, [pc, #100]	@ (80026ec <HAL_UART_MspInit+0x84>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d12b      	bne.n	80026e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	4b18      	ldr	r3, [pc, #96]	@ (80026f0 <HAL_UART_MspInit+0x88>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	4a17      	ldr	r2, [pc, #92]	@ (80026f0 <HAL_UART_MspInit+0x88>)
 8002694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002698:	6413      	str	r3, [r2, #64]	@ 0x40
 800269a:	4b15      	ldr	r3, [pc, #84]	@ (80026f0 <HAL_UART_MspInit+0x88>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <HAL_UART_MspInit+0x88>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	4a10      	ldr	r2, [pc, #64]	@ (80026f0 <HAL_UART_MspInit+0x88>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b6:	4b0e      	ldr	r3, [pc, #56]	@ (80026f0 <HAL_UART_MspInit+0x88>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026c2:	230c      	movs	r3, #12
 80026c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ce:	2303      	movs	r3, #3
 80026d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026d2:	2307      	movs	r3, #7
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	4619      	mov	r1, r3
 80026dc:	4805      	ldr	r0, [pc, #20]	@ (80026f4 <HAL_UART_MspInit+0x8c>)
 80026de:	f000 ff31 	bl	8003544 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026e2:	bf00      	nop
 80026e4:	3728      	adds	r7, #40	@ 0x28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40004400 	.word	0x40004400
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40020000 	.word	0x40020000

080026f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002730 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80026fc:	f7ff ff78 	bl	80025f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002700:	480c      	ldr	r0, [pc, #48]	@ (8002734 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002702:	490d      	ldr	r1, [pc, #52]	@ (8002738 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002704:	4a0d      	ldr	r2, [pc, #52]	@ (800273c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002708:	e002      	b.n	8002710 <LoopCopyDataInit>

0800270a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800270a:	58d4      	ldr	r4, [r2, r3]

  str r4, [r0, r3]
 800270c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800270e:	3304      	adds	r3, #4

08002710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002714:	d3f9      	bcc.n	800270a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002716:	4a0a      	ldr	r2, [pc, #40]	@ (8002740 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002718:	4c0a      	ldr	r4, [pc, #40]	@ (8002744 <LoopFillZerobss+0x22>)
  movs r3, #0
 800271a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800271c:	e001      	b.n	8002722 <LoopFillZerobss>

0800271e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800271e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002720:	3204      	adds	r2, #4

08002722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002724:	d3fb      	bcc.n	800271e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002726:	f006 fde7 	bl	80092f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800272a:	f7ff fc81 	bl	8002030 <main>
  bx  lr    
 800272e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002730:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002738:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800273c:	0800d140 	.word	0x0800d140
  ldr r2, =_sbss
 8002740:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002744:	20005704 	.word	0x20005704

08002748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002748:	e7fe      	b.n	8002748 <ADC_IRQHandler>
	...

0800274c <XPT2046_TouchSelect>:
}

#endif /* SOFTWARE_SPI */

static void XPT2046_TouchSelect()
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 8002750:	2200      	movs	r2, #0
 8002752:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002756:	4802      	ldr	r0, [pc, #8]	@ (8002760 <XPT2046_TouchSelect+0x14>)
 8002758:	f001 f8a8 	bl	80038ac <HAL_GPIO_WritePin>
}
 800275c:	bf00      	nop
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40020400 	.word	0x40020400

08002764 <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 8002768:	2201      	movs	r2, #1
 800276a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800276e:	4802      	ldr	r0, [pc, #8]	@ (8002778 <XPT2046_TouchUnselect+0x14>)
 8002770:	f001 f89c 	bl	80038ac <HAL_GPIO_WritePin>
}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40020400 	.word	0x40020400

0800277c <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(XPT2046_IRQ_GPIO_Port, XPT2046_IRQ_Pin) == GPIO_PIN_RESET;
 8002780:	2110      	movs	r1, #16
 8002782:	4805      	ldr	r0, [pc, #20]	@ (8002798 <XPT2046_TouchPressed+0x1c>)
 8002784:	f001 f87a 	bl	800387c <HAL_GPIO_ReadPin>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	bf0c      	ite	eq
 800278e:	2301      	moveq	r3, #1
 8002790:	2300      	movne	r3, #0
 8002792:	b2db      	uxtb	r3, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40020400 	.word	0x40020400

0800279c <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08c      	sub	sp, #48	@ 0x30
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

#endif /* SOFTWARE_SPI */

    XPT2046_TouchSelect();
 80027a6:	f7ff ffd1 	bl	800274c <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t avg_y = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < 16; i++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	77bb      	strb	r3, [r7, #30]
 80027ba:	e03f      	b.n	800283c <XPT2046_TouchGetCoordinates+0xa0>
    {
        if(!XPT2046_TouchPressed())
 80027bc:	f7ff ffde 	bl	800277c <XPT2046_TouchPressed>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f083 0301 	eor.w	r3, r3, #1
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d13b      	bne.n	8002844 <XPT2046_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 80027cc:	7ffb      	ldrb	r3, [r7, #31]
 80027ce:	3301      	adds	r3, #1
 80027d0:	77fb      	strb	r3, [r7, #31]
	   x_raw[0] = spi_read_byte();
	   x_raw[1] = spi_read_byte();

#else

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 80027d2:	f04f 33ff 	mov.w	r3, #4294967295
 80027d6:	2201      	movs	r2, #1
 80027d8:	4945      	ldr	r1, [pc, #276]	@ (80028f0 <XPT2046_TouchGetCoordinates+0x154>)
 80027da:	4846      	ldr	r0, [pc, #280]	@ (80028f4 <XPT2046_TouchGetCoordinates+0x158>)
 80027dc:	f001 fdeb 	bl	80043b6 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 80027e0:	f107 0210 	add.w	r2, r7, #16
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	2302      	movs	r3, #2
 80027ec:	4942      	ldr	r1, [pc, #264]	@ (80028f8 <XPT2046_TouchGetCoordinates+0x15c>)
 80027ee:	4841      	ldr	r0, [pc, #260]	@ (80028f4 <XPT2046_TouchGetCoordinates+0x158>)
 80027f0:	f001 ff25 	bl	800463e <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295
 80027f8:	2201      	movs	r2, #1
 80027fa:	4940      	ldr	r1, [pc, #256]	@ (80028fc <XPT2046_TouchGetCoordinates+0x160>)
 80027fc:	483d      	ldr	r0, [pc, #244]	@ (80028f4 <XPT2046_TouchGetCoordinates+0x158>)
 80027fe:	f001 fdda 	bl	80043b6 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8002802:	f107 020c 	add.w	r2, r7, #12
 8002806:	f04f 33ff 	mov.w	r3, #4294967295
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2302      	movs	r3, #2
 800280e:	493a      	ldr	r1, [pc, #232]	@ (80028f8 <XPT2046_TouchGetCoordinates+0x15c>)
 8002810:	4838      	ldr	r0, [pc, #224]	@ (80028f4 <XPT2046_TouchGetCoordinates+0x158>)
 8002812:	f001 ff14 	bl	800463e <HAL_SPI_TransmitReceive>

#endif /* SOFTWARE_SPI */

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 8002816:	7b3b      	ldrb	r3, [r7, #12]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	7b7a      	ldrb	r2, [r7, #13]
 800281c:	4313      	orrs	r3, r2
 800281e:	461a      	mov	r2, r3
 8002820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002822:	4413      	add	r3, r2
 8002824:	627b      	str	r3, [r7, #36]	@ 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 8002826:	7c3b      	ldrb	r3, [r7, #16]
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	7c7a      	ldrb	r2, [r7, #17]
 800282c:	4313      	orrs	r3, r2
 800282e:	461a      	mov	r2, r3
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	4413      	add	r3, r2
 8002834:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 16; i++)
 8002836:	7fbb      	ldrb	r3, [r7, #30]
 8002838:	3301      	adds	r3, #1
 800283a:	77bb      	strb	r3, [r7, #30]
 800283c:	7fbb      	ldrb	r3, [r7, #30]
 800283e:	2b0f      	cmp	r3, #15
 8002840:	d9bc      	bls.n	80027bc <XPT2046_TouchGetCoordinates+0x20>
 8002842:	e000      	b.n	8002846 <XPT2046_TouchGetCoordinates+0xaa>
            break;
 8002844:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 8002846:	f7ff ff8d 	bl	8002764 <XPT2046_TouchUnselect>

    if(nsamples < 16)
 800284a:	7ffb      	ldrb	r3, [r7, #31]
 800284c:	2b0f      	cmp	r3, #15
 800284e:	d801      	bhi.n	8002854 <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 8002850:	2300      	movs	r3, #0
 8002852:	e049      	b.n	80028e8 <XPT2046_TouchGetCoordinates+0x14c>

    uint32_t raw_x = (avg_x / 16);
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	f640 5247 	movw	r2, #3399	@ 0xd47
 8002860:	4293      	cmp	r3, r2
 8002862:	d802      	bhi.n	800286a <XPT2046_TouchGetCoordinates+0xce>
 8002864:	f640 5348 	movw	r3, #3400	@ 0xd48
 8002868:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	f247 1248 	movw	r2, #29000	@ 0x7148
 8002870:	4293      	cmp	r3, r2
 8002872:	d902      	bls.n	800287a <XPT2046_TouchGetCoordinates+0xde>
 8002874:	f247 1348 	movw	r3, #29000	@ 0x7148
 8002878:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 16);
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	091b      	lsrs	r3, r3, #4
 800287e:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f640 42e3 	movw	r2, #3299	@ 0xce3
 8002886:	4293      	cmp	r3, r2
 8002888:	d802      	bhi.n	8002890 <XPT2046_TouchGetCoordinates+0xf4>
 800288a:	f640 43e4 	movw	r3, #3300	@ 0xce4
 800288e:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f247 5230 	movw	r2, #30000	@ 0x7530
 8002896:	4293      	cmp	r3, r2
 8002898:	d902      	bls.n	80028a0 <XPT2046_TouchGetCoordinates+0x104>
 800289a:	f247 5330 	movw	r3, #30000	@ 0x7530
 800289e:	617b      	str	r3, [r7, #20]
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#elif (ORIENTATION == 1)
	*x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#elif (ORIENTATION == 2)
    *x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4613      	mov	r3, r2
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	1a9b      	subs	r3, r3, r2
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	f5a3 2347 	sub.w	r3, r3, #815104	@ 0xc7000
 80028ae:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 80028b2:	4a13      	ldr	r2, [pc, #76]	@ (8002900 <XPT2046_TouchGetCoordinates+0x164>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	0b5b      	lsrs	r3, r3, #13
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	801a      	strh	r2, [r3, #0]
    *y = XPT2046_SCALE_Y - (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	019b      	lsls	r3, r3, #6
 80028ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80028ce:	f5a3 53e8 	sub.w	r3, r3, #7424	@ 0x1d00
 80028d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002904 <XPT2046_TouchGetCoordinates+0x168>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	0b5b      	lsrs	r3, r3, #13
 80028da:	b29b      	uxth	r3, r3
 80028dc:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	801a      	strh	r2, [r3, #0]
#elif (ORIENTATION == 3)
    *x = XPT2046_SCALE_X - (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#endif

    return true;
 80028e6:	2301      	movs	r3, #1
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3728      	adds	r7, #40	@ 0x28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	0800cf0c 	.word	0x0800cf0c
 80028f4:	20000a24 	.word	0x20000a24
 80028f8:	0800cf10 	.word	0x0800cf10
 80028fc:	0800cf14 	.word	0x0800cf14
 8002900:	51eb851f 	.word	0x51eb851f
 8002904:	4e8b8659 	.word	0x4e8b8659

08002908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800290c:	4b0e      	ldr	r3, [pc, #56]	@ (8002948 <HAL_Init+0x40>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0d      	ldr	r2, [pc, #52]	@ (8002948 <HAL_Init+0x40>)
 8002912:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002916:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002918:	4b0b      	ldr	r3, [pc, #44]	@ (8002948 <HAL_Init+0x40>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0a      	ldr	r2, [pc, #40]	@ (8002948 <HAL_Init+0x40>)
 800291e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002922:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002924:	4b08      	ldr	r3, [pc, #32]	@ (8002948 <HAL_Init+0x40>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a07      	ldr	r2, [pc, #28]	@ (8002948 <HAL_Init+0x40>)
 800292a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800292e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002930:	2003      	movs	r0, #3
 8002932:	f000 f8fc 	bl	8002b2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002936:	200f      	movs	r0, #15
 8002938:	f7ff fd56 	bl	80023e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800293c:	f7ff fd28 	bl	8002390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40023c00 	.word	0x40023c00

0800294c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002950:	4b06      	ldr	r3, [pc, #24]	@ (800296c <HAL_IncTick+0x20>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <HAL_IncTick+0x24>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4413      	add	r3, r2
 800295c:	4a04      	ldr	r2, [pc, #16]	@ (8002970 <HAL_IncTick+0x24>)
 800295e:	6013      	str	r3, [r2, #0]
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	2000001c 	.word	0x2000001c
 8002970:	20000bd0 	.word	0x20000bd0

08002974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return uwTick;
 8002978:	4b03      	ldr	r3, [pc, #12]	@ (8002988 <HAL_GetTick+0x14>)
 800297a:	681b      	ldr	r3, [r3, #0]
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	20000bd0 	.word	0x20000bd0

0800298c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002994:	f7ff ffee 	bl	8002974 <HAL_GetTick>
 8002998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d005      	beq.n	80029b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029a6:	4b0a      	ldr	r3, [pc, #40]	@ (80029d0 <HAL_Delay+0x44>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4413      	add	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029b2:	bf00      	nop
 80029b4:	f7ff ffde 	bl	8002974 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d8f7      	bhi.n	80029b4 <HAL_Delay+0x28>
  {
  }
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	2000001c 	.word	0x2000001c

080029d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a18 <__NVIC_SetPriorityGrouping+0x44>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029f0:	4013      	ands	r3, r2
 80029f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a06:	4a04      	ldr	r2, [pc, #16]	@ (8002a18 <__NVIC_SetPriorityGrouping+0x44>)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	60d3      	str	r3, [r2, #12]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a20:	4b04      	ldr	r3, [pc, #16]	@ (8002a34 <__NVIC_GetPriorityGrouping+0x18>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	0a1b      	lsrs	r3, r3, #8
 8002a26:	f003 0307 	and.w	r3, r3, #7
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	db0b      	blt.n	8002a62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	f003 021f 	and.w	r2, r3, #31
 8002a50:	4907      	ldr	r1, [pc, #28]	@ (8002a70 <__NVIC_EnableIRQ+0x38>)
 8002a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	2001      	movs	r0, #1
 8002a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000e100 	.word	0xe000e100

08002a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	6039      	str	r1, [r7, #0]
 8002a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	db0a      	blt.n	8002a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	490c      	ldr	r1, [pc, #48]	@ (8002ac0 <__NVIC_SetPriority+0x4c>)
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	0112      	lsls	r2, r2, #4
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	440b      	add	r3, r1
 8002a98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a9c:	e00a      	b.n	8002ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	4908      	ldr	r1, [pc, #32]	@ (8002ac4 <__NVIC_SetPriority+0x50>)
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	3b04      	subs	r3, #4
 8002aac:	0112      	lsls	r2, r2, #4
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	761a      	strb	r2, [r3, #24]
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	e000e100 	.word	0xe000e100
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b089      	sub	sp, #36	@ 0x24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f1c3 0307 	rsb	r3, r3, #7
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	bf28      	it	cs
 8002ae6:	2304      	movcs	r3, #4
 8002ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3304      	adds	r3, #4
 8002aee:	2b06      	cmp	r3, #6
 8002af0:	d902      	bls.n	8002af8 <NVIC_EncodePriority+0x30>
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3b03      	subs	r3, #3
 8002af6:	e000      	b.n	8002afa <NVIC_EncodePriority+0x32>
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002afc:	f04f 32ff 	mov.w	r2, #4294967295
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43da      	mvns	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b10:	f04f 31ff 	mov.w	r1, #4294967295
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1a:	43d9      	mvns	r1, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b20:	4313      	orrs	r3, r2
         );
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3724      	adds	r7, #36	@ 0x24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff ff4c 	bl	80029d4 <__NVIC_SetPriorityGrouping>
}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b56:	f7ff ff61 	bl	8002a1c <__NVIC_GetPriorityGrouping>
 8002b5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	6978      	ldr	r0, [r7, #20]
 8002b62:	f7ff ffb1 	bl	8002ac8 <NVIC_EncodePriority>
 8002b66:	4602      	mov	r2, r0
 8002b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff ff80 	bl	8002a74 <__NVIC_SetPriority>
}
 8002b74:	bf00      	nop
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff ff54 	bl	8002a38 <__NVIC_EnableIRQ>
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e014      	b.n	8002bd4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	791b      	ldrb	r3, [r3, #4]
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d105      	bne.n	8002bc0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe fe1c 	bl	80017f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e046      	b.n	8002c7e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	795b      	ldrb	r3, [r3, #5]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_DAC_Start+0x20>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e040      	b.n	8002c7e <HAL_DAC_Start+0xa2>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6819      	ldr	r1, [r3, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2201      	movs	r2, #1
 8002c16:	409a      	lsls	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10f      	bne.n	8002c46 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002c30:	2b3c      	cmp	r3, #60	@ 0x3c
 8002c32:	d11d      	bne.n	8002c70 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	605a      	str	r2, [r3, #4]
 8002c44:	e014      	b.n	8002c70 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	213c      	movs	r1, #60	@ 0x3c
 8002c58:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d107      	bne.n	8002c70 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0202 	orr.w	r2, r2, #2
 8002c6e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca0:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01d      	beq.n	8002ce8 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d018      	beq.n	8002ce8 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2204      	movs	r2, #4
 8002cba:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f043 0201 	orr.w	r2, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cd0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ce0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f851 	bl	8002d8a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01d      	beq.n	8002d2e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d018      	beq.n	8002d2e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2204      	movs	r2, #4
 8002d00:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f043 0202 	orr.w	r2, r3, #2
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002d16:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002d26:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f891 	bl	8002e50 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b087      	sub	sp, #28
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e015      	b.n	8002d7e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d105      	bne.n	8002d6a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4413      	add	r3, r2
 8002d64:	3308      	adds	r3, #8
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	e004      	b.n	8002d74 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4413      	add	r3, r2
 8002d70:	3314      	adds	r3, #20
 8002d72:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	461a      	mov	r2, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	371c      	adds	r7, #28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b089      	sub	sp, #36	@ 0x24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <HAL_DAC_ConfigChannel+0x1c>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e042      	b.n	8002e44 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	795b      	ldrb	r3, [r3, #5]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_DAC_ConfigChannel+0x2c>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e03c      	b.n	8002e44 <HAL_DAC_ConfigChannel+0xa6>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6819      	ldr	r1, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	22c0      	movs	r2, #192	@ 0xc0
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43da      	mvns	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	400a      	ands	r2, r1
 8002e34:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002e42:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3724      	adds	r7, #36	@ 0x24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e70:	f7ff fd80 	bl	8002974 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e099      	b.n	8002fb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea0:	e00f      	b.n	8002ec2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ea2:	f7ff fd67 	bl	8002974 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b05      	cmp	r3, #5
 8002eae:	d908      	bls.n	8002ec2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2203      	movs	r2, #3
 8002eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e078      	b.n	8002fb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e8      	bne.n	8002ea2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	4b38      	ldr	r3, [pc, #224]	@ (8002fbc <HAL_DMA_Init+0x158>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d107      	bne.n	8002f2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f24:	4313      	orrs	r3, r2
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f023 0307 	bic.w	r3, r3, #7
 8002f42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d117      	bne.n	8002f86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00e      	beq.n	8002f86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 fa6f 	bl	800344c <DMA_CheckFifoParam>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2240      	movs	r2, #64	@ 0x40
 8002f78:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f82:	2301      	movs	r3, #1
 8002f84:	e016      	b.n	8002fb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fa26 	bl	80033e0 <DMA_CalcBaseAndBitshift>
 8002f94:	4603      	mov	r3, r0
 8002f96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9c:	223f      	movs	r2, #63	@ 0x3f
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	f010803f 	.word	0xf010803f

08002fc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_DMA_Start_IT+0x26>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e040      	b.n	8003068 <HAL_DMA_Start_IT+0xa8>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d12f      	bne.n	800305a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f9b8 	bl	8003384 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003018:	223f      	movs	r2, #63	@ 0x3f
 800301a:	409a      	lsls	r2, r3
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0216 	orr.w	r2, r2, #22
 800302e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0208 	orr.w	r2, r2, #8
 8003046:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	e005      	b.n	8003066 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003062:	2302      	movs	r3, #2
 8003064:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003066:	7dfb      	ldrb	r3, [r7, #23]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800307c:	4b8e      	ldr	r3, [pc, #568]	@ (80032b8 <HAL_DMA_IRQHandler+0x248>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a8e      	ldr	r2, [pc, #568]	@ (80032bc <HAL_DMA_IRQHandler+0x24c>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	0a9b      	lsrs	r3, r3, #10
 8003088:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309a:	2208      	movs	r2, #8
 800309c:	409a      	lsls	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01a      	beq.n	80030dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d013      	beq.n	80030dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0204 	bic.w	r2, r2, #4
 80030c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c8:	2208      	movs	r2, #8
 80030ca:	409a      	lsls	r2, r3
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d4:	f043 0201 	orr.w	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e0:	2201      	movs	r2, #1
 80030e2:	409a      	lsls	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d012      	beq.n	8003112 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00b      	beq.n	8003112 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fe:	2201      	movs	r2, #1
 8003100:	409a      	lsls	r2, r3
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310a:	f043 0202 	orr.w	r2, r3, #2
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003116:	2204      	movs	r2, #4
 8003118:	409a      	lsls	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d012      	beq.n	8003148 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00b      	beq.n	8003148 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003134:	2204      	movs	r2, #4
 8003136:	409a      	lsls	r2, r3
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003140:	f043 0204 	orr.w	r2, r3, #4
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314c:	2210      	movs	r2, #16
 800314e:	409a      	lsls	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d043      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d03c      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316a:	2210      	movs	r2, #16
 800316c:	409a      	lsls	r2, r3
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d018      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d108      	bne.n	80031a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d024      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	4798      	blx	r3
 800319e:	e01f      	b.n	80031e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01b      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
 80031b0:	e016      	b.n	80031e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d107      	bne.n	80031d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0208 	bic.w	r2, r2, #8
 80031ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e4:	2220      	movs	r2, #32
 80031e6:	409a      	lsls	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 808f 	beq.w	8003310 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 8087 	beq.w	8003310 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003206:	2220      	movs	r2, #32
 8003208:	409a      	lsls	r2, r3
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b05      	cmp	r3, #5
 8003218:	d136      	bne.n	8003288 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0216 	bic.w	r2, r2, #22
 8003228:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695a      	ldr	r2, [r3, #20]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003238:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	d103      	bne.n	800324a <HAL_DMA_IRQHandler+0x1da>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003246:	2b00      	cmp	r3, #0
 8003248:	d007      	beq.n	800325a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0208 	bic.w	r2, r2, #8
 8003258:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325e:	223f      	movs	r2, #63	@ 0x3f
 8003260:	409a      	lsls	r2, r3
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800327a:	2b00      	cmp	r3, #0
 800327c:	d07e      	beq.n	800337c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	4798      	blx	r3
        }
        return;
 8003286:	e079      	b.n	800337c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d01d      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10d      	bne.n	80032c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d031      	beq.n	8003310 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	4798      	blx	r3
 80032b4:	e02c      	b.n	8003310 <HAL_DMA_IRQHandler+0x2a0>
 80032b6:	bf00      	nop
 80032b8:	20000014 	.word	0x20000014
 80032bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d023      	beq.n	8003310 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
 80032d0:	e01e      	b.n	8003310 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10f      	bne.n	8003300 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0210 	bic.w	r2, r2, #16
 80032ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003314:	2b00      	cmp	r3, #0
 8003316:	d032      	beq.n	800337e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d022      	beq.n	800336a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2205      	movs	r2, #5
 8003328:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0201 	bic.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	3301      	adds	r3, #1
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	429a      	cmp	r2, r3
 8003346:	d307      	bcc.n	8003358 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f2      	bne.n	800333c <HAL_DMA_IRQHandler+0x2cc>
 8003356:	e000      	b.n	800335a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003358:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d005      	beq.n	800337e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	4798      	blx	r3
 800337a:	e000      	b.n	800337e <HAL_DMA_IRQHandler+0x30e>
        return;
 800337c:	bf00      	nop
    }
  }
}
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80033a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b40      	cmp	r3, #64	@ 0x40
 80033b0:	d108      	bne.n	80033c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033c2:	e007      	b.n	80033d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	60da      	str	r2, [r3, #12]
}
 80033d4:	bf00      	nop
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	3b10      	subs	r3, #16
 80033f0:	4a14      	ldr	r2, [pc, #80]	@ (8003444 <DMA_CalcBaseAndBitshift+0x64>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	091b      	lsrs	r3, r3, #4
 80033f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033fa:	4a13      	ldr	r2, [pc, #76]	@ (8003448 <DMA_CalcBaseAndBitshift+0x68>)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b03      	cmp	r3, #3
 800340c:	d909      	bls.n	8003422 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003416:	f023 0303 	bic.w	r3, r3, #3
 800341a:	1d1a      	adds	r2, r3, #4
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003420:	e007      	b.n	8003432 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800342a:	f023 0303 	bic.w	r3, r3, #3
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	aaaaaaab 	.word	0xaaaaaaab
 8003448:	0800cf18 	.word	0x0800cf18

0800344c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d11f      	bne.n	80034a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b03      	cmp	r3, #3
 800346a:	d856      	bhi.n	800351a <DMA_CheckFifoParam+0xce>
 800346c:	a201      	add	r2, pc, #4	@ (adr r2, 8003474 <DMA_CheckFifoParam+0x28>)
 800346e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003472:	bf00      	nop
 8003474:	08003485 	.word	0x08003485
 8003478:	08003497 	.word	0x08003497
 800347c:	08003485 	.word	0x08003485
 8003480:	0800351b 	.word	0x0800351b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003488:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d046      	beq.n	800351e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003494:	e043      	b.n	800351e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800349e:	d140      	bne.n	8003522 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034a4:	e03d      	b.n	8003522 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034ae:	d121      	bne.n	80034f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d837      	bhi.n	8003526 <DMA_CheckFifoParam+0xda>
 80034b6:	a201      	add	r2, pc, #4	@ (adr r2, 80034bc <DMA_CheckFifoParam+0x70>)
 80034b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034bc:	080034cd 	.word	0x080034cd
 80034c0:	080034d3 	.word	0x080034d3
 80034c4:	080034cd 	.word	0x080034cd
 80034c8:	080034e5 	.word	0x080034e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
      break;
 80034d0:	e030      	b.n	8003534 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d025      	beq.n	800352a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e2:	e022      	b.n	800352a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034ec:	d11f      	bne.n	800352e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034f2:	e01c      	b.n	800352e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d903      	bls.n	8003502 <DMA_CheckFifoParam+0xb6>
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d003      	beq.n	8003508 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003500:	e018      	b.n	8003534 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
      break;
 8003506:	e015      	b.n	8003534 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00e      	beq.n	8003532 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
      break;
 8003518:	e00b      	b.n	8003532 <DMA_CheckFifoParam+0xe6>
      break;
 800351a:	bf00      	nop
 800351c:	e00a      	b.n	8003534 <DMA_CheckFifoParam+0xe8>
      break;
 800351e:	bf00      	nop
 8003520:	e008      	b.n	8003534 <DMA_CheckFifoParam+0xe8>
      break;
 8003522:	bf00      	nop
 8003524:	e006      	b.n	8003534 <DMA_CheckFifoParam+0xe8>
      break;
 8003526:	bf00      	nop
 8003528:	e004      	b.n	8003534 <DMA_CheckFifoParam+0xe8>
      break;
 800352a:	bf00      	nop
 800352c:	e002      	b.n	8003534 <DMA_CheckFifoParam+0xe8>
      break;   
 800352e:	bf00      	nop
 8003530:	e000      	b.n	8003534 <DMA_CheckFifoParam+0xe8>
      break;
 8003532:	bf00      	nop
    }
  } 
  
  return status; 
 8003534:	7bfb      	ldrb	r3, [r7, #15]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop

08003544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003544:	b480      	push	{r7}
 8003546:	b089      	sub	sp, #36	@ 0x24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003552:	2300      	movs	r3, #0
 8003554:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003556:	2300      	movs	r3, #0
 8003558:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	e16b      	b.n	8003838 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003560:	2201      	movs	r2, #1
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	4013      	ands	r3, r2
 8003572:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	429a      	cmp	r2, r3
 800357a:	f040 815a 	bne.w	8003832 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d005      	beq.n	8003596 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003592:	2b02      	cmp	r3, #2
 8003594:	d130      	bne.n	80035f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	2203      	movs	r2, #3
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43db      	mvns	r3, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4013      	ands	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035cc:	2201      	movs	r2, #1
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	f003 0201 	and.w	r2, r3, #1
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	2b03      	cmp	r3, #3
 8003602:	d017      	beq.n	8003634 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	2203      	movs	r2, #3
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d123      	bne.n	8003688 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	08da      	lsrs	r2, r3, #3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3208      	adds	r2, #8
 8003648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800364c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	220f      	movs	r2, #15
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	08da      	lsrs	r2, r3, #3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3208      	adds	r2, #8
 8003682:	69b9      	ldr	r1, [r7, #24]
 8003684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	2203      	movs	r2, #3
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 0203 	and.w	r2, r3, #3
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80b4 	beq.w	8003832 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	4b60      	ldr	r3, [pc, #384]	@ (8003850 <HAL_GPIO_Init+0x30c>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d2:	4a5f      	ldr	r2, [pc, #380]	@ (8003850 <HAL_GPIO_Init+0x30c>)
 80036d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80036da:	4b5d      	ldr	r3, [pc, #372]	@ (8003850 <HAL_GPIO_Init+0x30c>)
 80036dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036e6:	4a5b      	ldr	r2, [pc, #364]	@ (8003854 <HAL_GPIO_Init+0x310>)
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	089b      	lsrs	r3, r3, #2
 80036ec:	3302      	adds	r3, #2
 80036ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	220f      	movs	r2, #15
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4013      	ands	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a52      	ldr	r2, [pc, #328]	@ (8003858 <HAL_GPIO_Init+0x314>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d02b      	beq.n	800376a <HAL_GPIO_Init+0x226>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a51      	ldr	r2, [pc, #324]	@ (800385c <HAL_GPIO_Init+0x318>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d025      	beq.n	8003766 <HAL_GPIO_Init+0x222>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a50      	ldr	r2, [pc, #320]	@ (8003860 <HAL_GPIO_Init+0x31c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d01f      	beq.n	8003762 <HAL_GPIO_Init+0x21e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a4f      	ldr	r2, [pc, #316]	@ (8003864 <HAL_GPIO_Init+0x320>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d019      	beq.n	800375e <HAL_GPIO_Init+0x21a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a4e      	ldr	r2, [pc, #312]	@ (8003868 <HAL_GPIO_Init+0x324>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d013      	beq.n	800375a <HAL_GPIO_Init+0x216>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a4d      	ldr	r2, [pc, #308]	@ (800386c <HAL_GPIO_Init+0x328>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00d      	beq.n	8003756 <HAL_GPIO_Init+0x212>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a4c      	ldr	r2, [pc, #304]	@ (8003870 <HAL_GPIO_Init+0x32c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d007      	beq.n	8003752 <HAL_GPIO_Init+0x20e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a4b      	ldr	r2, [pc, #300]	@ (8003874 <HAL_GPIO_Init+0x330>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d101      	bne.n	800374e <HAL_GPIO_Init+0x20a>
 800374a:	2307      	movs	r3, #7
 800374c:	e00e      	b.n	800376c <HAL_GPIO_Init+0x228>
 800374e:	2308      	movs	r3, #8
 8003750:	e00c      	b.n	800376c <HAL_GPIO_Init+0x228>
 8003752:	2306      	movs	r3, #6
 8003754:	e00a      	b.n	800376c <HAL_GPIO_Init+0x228>
 8003756:	2305      	movs	r3, #5
 8003758:	e008      	b.n	800376c <HAL_GPIO_Init+0x228>
 800375a:	2304      	movs	r3, #4
 800375c:	e006      	b.n	800376c <HAL_GPIO_Init+0x228>
 800375e:	2303      	movs	r3, #3
 8003760:	e004      	b.n	800376c <HAL_GPIO_Init+0x228>
 8003762:	2302      	movs	r3, #2
 8003764:	e002      	b.n	800376c <HAL_GPIO_Init+0x228>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <HAL_GPIO_Init+0x228>
 800376a:	2300      	movs	r3, #0
 800376c:	69fa      	ldr	r2, [r7, #28]
 800376e:	f002 0203 	and.w	r2, r2, #3
 8003772:	0092      	lsls	r2, r2, #2
 8003774:	4093      	lsls	r3, r2
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4313      	orrs	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800377c:	4935      	ldr	r1, [pc, #212]	@ (8003854 <HAL_GPIO_Init+0x310>)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	089b      	lsrs	r3, r3, #2
 8003782:	3302      	adds	r3, #2
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800378a:	4b3b      	ldr	r3, [pc, #236]	@ (8003878 <HAL_GPIO_Init+0x334>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	43db      	mvns	r3, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4013      	ands	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037ae:	4a32      	ldr	r2, [pc, #200]	@ (8003878 <HAL_GPIO_Init+0x334>)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037b4:	4b30      	ldr	r3, [pc, #192]	@ (8003878 <HAL_GPIO_Init+0x334>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	43db      	mvns	r3, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037d8:	4a27      	ldr	r2, [pc, #156]	@ (8003878 <HAL_GPIO_Init+0x334>)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037de:	4b26      	ldr	r3, [pc, #152]	@ (8003878 <HAL_GPIO_Init+0x334>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	43db      	mvns	r3, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4013      	ands	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003802:	4a1d      	ldr	r2, [pc, #116]	@ (8003878 <HAL_GPIO_Init+0x334>)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003808:	4b1b      	ldr	r3, [pc, #108]	@ (8003878 <HAL_GPIO_Init+0x334>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800382c:	4a12      	ldr	r2, [pc, #72]	@ (8003878 <HAL_GPIO_Init+0x334>)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	3301      	adds	r3, #1
 8003836:	61fb      	str	r3, [r7, #28]
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	2b0f      	cmp	r3, #15
 800383c:	f67f ae90 	bls.w	8003560 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003840:	bf00      	nop
 8003842:	bf00      	nop
 8003844:	3724      	adds	r7, #36	@ 0x24
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800
 8003854:	40013800 	.word	0x40013800
 8003858:	40020000 	.word	0x40020000
 800385c:	40020400 	.word	0x40020400
 8003860:	40020800 	.word	0x40020800
 8003864:	40020c00 	.word	0x40020c00
 8003868:	40021000 	.word	0x40021000
 800386c:	40021400 	.word	0x40021400
 8003870:	40021800 	.word	0x40021800
 8003874:	40021c00 	.word	0x40021c00
 8003878:	40013c00 	.word	0x40013c00

0800387c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	887b      	ldrh	r3, [r7, #2]
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
 8003898:	e001      	b.n	800389e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800389e:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	807b      	strh	r3, [r7, #2]
 80038b8:	4613      	mov	r3, r2
 80038ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038bc:	787b      	ldrb	r3, [r7, #1]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038c2:	887a      	ldrh	r2, [r7, #2]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038c8:	e003      	b.n	80038d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038ca:	887b      	ldrh	r3, [r7, #2]
 80038cc:	041a      	lsls	r2, r3, #16
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	619a      	str	r2, [r3, #24]
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038ea:	4b08      	ldr	r3, [pc, #32]	@ (800390c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d006      	beq.n	8003904 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038f6:	4a05      	ldr	r2, [pc, #20]	@ (800390c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038fc:	88fb      	ldrh	r3, [r7, #6]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe f834 	bl	800196c <HAL_GPIO_EXTI_Callback>
  }
}
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40013c00 	.word	0x40013c00

08003910 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e267      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d075      	beq.n	8003a1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800392e:	4b88      	ldr	r3, [pc, #544]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	2b04      	cmp	r3, #4
 8003938:	d00c      	beq.n	8003954 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800393a:	4b85      	ldr	r3, [pc, #532]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003942:	2b08      	cmp	r3, #8
 8003944:	d112      	bne.n	800396c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003946:	4b82      	ldr	r3, [pc, #520]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800394e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003952:	d10b      	bne.n	800396c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003954:	4b7e      	ldr	r3, [pc, #504]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d05b      	beq.n	8003a18 <HAL_RCC_OscConfig+0x108>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d157      	bne.n	8003a18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e242      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003974:	d106      	bne.n	8003984 <HAL_RCC_OscConfig+0x74>
 8003976:	4b76      	ldr	r3, [pc, #472]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a75      	ldr	r2, [pc, #468]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 800397c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e01d      	b.n	80039c0 <HAL_RCC_OscConfig+0xb0>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800398c:	d10c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x98>
 800398e:	4b70      	ldr	r3, [pc, #448]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a6f      	ldr	r2, [pc, #444]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	4b6d      	ldr	r3, [pc, #436]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a6c      	ldr	r2, [pc, #432]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	e00b      	b.n	80039c0 <HAL_RCC_OscConfig+0xb0>
 80039a8:	4b69      	ldr	r3, [pc, #420]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a68      	ldr	r2, [pc, #416]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	4b66      	ldr	r3, [pc, #408]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a65      	ldr	r2, [pc, #404]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d013      	beq.n	80039f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c8:	f7fe ffd4 	bl	8002974 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d0:	f7fe ffd0 	bl	8002974 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b64      	cmp	r3, #100	@ 0x64
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e207      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f0      	beq.n	80039d0 <HAL_RCC_OscConfig+0xc0>
 80039ee:	e014      	b.n	8003a1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7fe ffc0 	bl	8002974 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f8:	f7fe ffbc 	bl	8002974 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	@ 0x64
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e1f3      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0a:	4b51      	ldr	r3, [pc, #324]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0xe8>
 8003a16:	e000      	b.n	8003a1a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d063      	beq.n	8003aee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a26:	4b4a      	ldr	r3, [pc, #296]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a32:	4b47      	ldr	r3, [pc, #284]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d11c      	bne.n	8003a78 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3e:	4b44      	ldr	r3, [pc, #272]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d116      	bne.n	8003a78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a4a:	4b41      	ldr	r3, [pc, #260]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_RCC_OscConfig+0x152>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d001      	beq.n	8003a62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e1c7      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a62:	4b3b      	ldr	r3, [pc, #236]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4937      	ldr	r1, [pc, #220]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a76:	e03a      	b.n	8003aee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d020      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a80:	4b34      	ldr	r3, [pc, #208]	@ (8003b54 <HAL_RCC_OscConfig+0x244>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a86:	f7fe ff75 	bl	8002974 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8e:	f7fe ff71 	bl	8002974 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e1a8      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aac:	4b28      	ldr	r3, [pc, #160]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4925      	ldr	r1, [pc, #148]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	600b      	str	r3, [r1, #0]
 8003ac0:	e015      	b.n	8003aee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac2:	4b24      	ldr	r3, [pc, #144]	@ (8003b54 <HAL_RCC_OscConfig+0x244>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fe ff54 	bl	8002974 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad0:	f7fe ff50 	bl	8002974 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e187      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d036      	beq.n	8003b68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d016      	beq.n	8003b30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b02:	4b15      	ldr	r3, [pc, #84]	@ (8003b58 <HAL_RCC_OscConfig+0x248>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b08:	f7fe ff34 	bl	8002974 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b10:	f7fe ff30 	bl	8002974 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e167      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b22:	4b0b      	ldr	r3, [pc, #44]	@ (8003b50 <HAL_RCC_OscConfig+0x240>)
 8003b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x200>
 8003b2e:	e01b      	b.n	8003b68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b30:	4b09      	ldr	r3, [pc, #36]	@ (8003b58 <HAL_RCC_OscConfig+0x248>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b36:	f7fe ff1d 	bl	8002974 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b3c:	e00e      	b.n	8003b5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b3e:	f7fe ff19 	bl	8002974 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d907      	bls.n	8003b5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e150      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
 8003b50:	40023800 	.word	0x40023800
 8003b54:	42470000 	.word	0x42470000
 8003b58:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b5c:	4b88      	ldr	r3, [pc, #544]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003b5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1ea      	bne.n	8003b3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8097 	beq.w	8003ca4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b76:	2300      	movs	r3, #0
 8003b78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7a:	4b81      	ldr	r3, [pc, #516]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10f      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	4b7d      	ldr	r3, [pc, #500]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	4a7c      	ldr	r2, [pc, #496]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b96:	4b7a      	ldr	r3, [pc, #488]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba6:	4b77      	ldr	r3, [pc, #476]	@ (8003d84 <HAL_RCC_OscConfig+0x474>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d118      	bne.n	8003be4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bb2:	4b74      	ldr	r3, [pc, #464]	@ (8003d84 <HAL_RCC_OscConfig+0x474>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a73      	ldr	r2, [pc, #460]	@ (8003d84 <HAL_RCC_OscConfig+0x474>)
 8003bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bbe:	f7fe fed9 	bl	8002974 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc6:	f7fe fed5 	bl	8002974 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e10c      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd8:	4b6a      	ldr	r3, [pc, #424]	@ (8003d84 <HAL_RCC_OscConfig+0x474>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d106      	bne.n	8003bfa <HAL_RCC_OscConfig+0x2ea>
 8003bec:	4b64      	ldr	r3, [pc, #400]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf0:	4a63      	ldr	r2, [pc, #396]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf8:	e01c      	b.n	8003c34 <HAL_RCC_OscConfig+0x324>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b05      	cmp	r3, #5
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x30c>
 8003c02:	4b5f      	ldr	r3, [pc, #380]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c06:	4a5e      	ldr	r2, [pc, #376]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c08:	f043 0304 	orr.w	r3, r3, #4
 8003c0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c0e:	4b5c      	ldr	r3, [pc, #368]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c12:	4a5b      	ldr	r2, [pc, #364]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c1a:	e00b      	b.n	8003c34 <HAL_RCC_OscConfig+0x324>
 8003c1c:	4b58      	ldr	r3, [pc, #352]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c20:	4a57      	ldr	r2, [pc, #348]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c28:	4b55      	ldr	r3, [pc, #340]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2c:	4a54      	ldr	r2, [pc, #336]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c2e:	f023 0304 	bic.w	r3, r3, #4
 8003c32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d015      	beq.n	8003c68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3c:	f7fe fe9a 	bl	8002974 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c42:	e00a      	b.n	8003c5a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c44:	f7fe fe96 	bl	8002974 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e0cb      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5a:	4b49      	ldr	r3, [pc, #292]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0ee      	beq.n	8003c44 <HAL_RCC_OscConfig+0x334>
 8003c66:	e014      	b.n	8003c92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c68:	f7fe fe84 	bl	8002974 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6e:	e00a      	b.n	8003c86 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c70:	f7fe fe80 	bl	8002974 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e0b5      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c86:	4b3e      	ldr	r3, [pc, #248]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1ee      	bne.n	8003c70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d105      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c98:	4b39      	ldr	r3, [pc, #228]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9c:	4a38      	ldr	r2, [pc, #224]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ca2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 80a1 	beq.w	8003df0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cae:	4b34      	ldr	r3, [pc, #208]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d05c      	beq.n	8003d74 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d141      	bne.n	8003d46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc2:	4b31      	ldr	r3, [pc, #196]	@ (8003d88 <HAL_RCC_OscConfig+0x478>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fe fe54 	bl	8002974 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd0:	f7fe fe50 	bl	8002974 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e087      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce2:	4b27      	ldr	r3, [pc, #156]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69da      	ldr	r2, [r3, #28]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	019b      	lsls	r3, r3, #6
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d04:	085b      	lsrs	r3, r3, #1
 8003d06:	3b01      	subs	r3, #1
 8003d08:	041b      	lsls	r3, r3, #16
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	491b      	ldr	r1, [pc, #108]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d18:	4b1b      	ldr	r3, [pc, #108]	@ (8003d88 <HAL_RCC_OscConfig+0x478>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1e:	f7fe fe29 	bl	8002974 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d26:	f7fe fe25 	bl	8002974 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e05c      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d38:	4b11      	ldr	r3, [pc, #68]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x416>
 8003d44:	e054      	b.n	8003df0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d46:	4b10      	ldr	r3, [pc, #64]	@ (8003d88 <HAL_RCC_OscConfig+0x478>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7fe fe12 	bl	8002974 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fe fe0e 	bl	8002974 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e045      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <HAL_RCC_OscConfig+0x470>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x444>
 8003d72:	e03d      	b.n	8003df0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d107      	bne.n	8003d8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e038      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
 8003d80:	40023800 	.word	0x40023800
 8003d84:	40007000 	.word	0x40007000
 8003d88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dfc <HAL_RCC_OscConfig+0x4ec>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d028      	beq.n	8003dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d121      	bne.n	8003dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d11a      	bne.n	8003dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003dc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d111      	bne.n	8003dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd2:	085b      	lsrs	r3, r3, #1
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d107      	bne.n	8003dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40023800 	.word	0x40023800

08003e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0cc      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e14:	4b68      	ldr	r3, [pc, #416]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d90c      	bls.n	8003e3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e22:	4b65      	ldr	r3, [pc, #404]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2a:	4b63      	ldr	r3, [pc, #396]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0b8      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d020      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e54:	4b59      	ldr	r3, [pc, #356]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4a58      	ldr	r2, [pc, #352]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e6c:	4b53      	ldr	r3, [pc, #332]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4a52      	ldr	r2, [pc, #328]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e78:	4b50      	ldr	r3, [pc, #320]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	494d      	ldr	r1, [pc, #308]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d044      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d107      	bne.n	8003eae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9e:	4b47      	ldr	r3, [pc, #284]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d119      	bne.n	8003ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e07f      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d107      	bne.n	8003ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ebe:	4b3f      	ldr	r3, [pc, #252]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d109      	bne.n	8003ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e06f      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ece:	4b3b      	ldr	r3, [pc, #236]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e067      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ede:	4b37      	ldr	r3, [pc, #220]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f023 0203 	bic.w	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	4934      	ldr	r1, [pc, #208]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ef0:	f7fe fd40 	bl	8002974 <HAL_GetTick>
 8003ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef8:	f7fe fd3c 	bl	8002974 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e04f      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 020c 	and.w	r2, r3, #12
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d1eb      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f20:	4b25      	ldr	r3, [pc, #148]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d20c      	bcs.n	8003f48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2e:	4b22      	ldr	r3, [pc, #136]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f36:	4b20      	ldr	r3, [pc, #128]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e032      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f54:	4b19      	ldr	r3, [pc, #100]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4916      	ldr	r1, [pc, #88]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d009      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f72:	4b12      	ldr	r3, [pc, #72]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	490e      	ldr	r1, [pc, #56]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f86:	f000 f821 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fbc <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	490a      	ldr	r1, [pc, #40]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f98:	5ccb      	ldrb	r3, [r1, r3]
 8003f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9e:	4a09      	ldr	r2, [pc, #36]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003fa2:	4b09      	ldr	r3, [pc, #36]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fe fa1e 	bl	80023e8 <HAL_InitTick>

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40023c00 	.word	0x40023c00
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	0800cef4 	.word	0x0800cef4
 8003fc4:	20000014 	.word	0x20000014
 8003fc8:	20000018 	.word	0x20000018

08003fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd0:	b094      	sub	sp, #80	@ 0x50
 8003fd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fe4:	4b79      	ldr	r3, [pc, #484]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 030c 	and.w	r3, r3, #12
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d00d      	beq.n	800400c <HAL_RCC_GetSysClockFreq+0x40>
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	f200 80e1 	bhi.w	80041b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_RCC_GetSysClockFreq+0x34>
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d003      	beq.n	8004006 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ffe:	e0db      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004000:	4b73      	ldr	r3, [pc, #460]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004002:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004004:	e0db      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004006:	4b73      	ldr	r3, [pc, #460]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004008:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800400a:	e0d8      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800400c:	4b6f      	ldr	r3, [pc, #444]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004014:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004016:	4b6d      	ldr	r3, [pc, #436]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d063      	beq.n	80040ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004022:	4b6a      	ldr	r3, [pc, #424]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	099b      	lsrs	r3, r3, #6
 8004028:	2200      	movs	r2, #0
 800402a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800402c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800402e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004034:	633b      	str	r3, [r7, #48]	@ 0x30
 8004036:	2300      	movs	r3, #0
 8004038:	637b      	str	r3, [r7, #52]	@ 0x34
 800403a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800403e:	4622      	mov	r2, r4
 8004040:	462b      	mov	r3, r5
 8004042:	f04f 0000 	mov.w	r0, #0
 8004046:	f04f 0100 	mov.w	r1, #0
 800404a:	0159      	lsls	r1, r3, #5
 800404c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004050:	0150      	lsls	r0, r2, #5
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4621      	mov	r1, r4
 8004058:	1a51      	subs	r1, r2, r1
 800405a:	6139      	str	r1, [r7, #16]
 800405c:	4629      	mov	r1, r5
 800405e:	eb63 0301 	sbc.w	r3, r3, r1
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004070:	4659      	mov	r1, fp
 8004072:	018b      	lsls	r3, r1, #6
 8004074:	4651      	mov	r1, sl
 8004076:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800407a:	4651      	mov	r1, sl
 800407c:	018a      	lsls	r2, r1, #6
 800407e:	4651      	mov	r1, sl
 8004080:	ebb2 0801 	subs.w	r8, r2, r1
 8004084:	4659      	mov	r1, fp
 8004086:	eb63 0901 	sbc.w	r9, r3, r1
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800409a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800409e:	4690      	mov	r8, r2
 80040a0:	4699      	mov	r9, r3
 80040a2:	4623      	mov	r3, r4
 80040a4:	eb18 0303 	adds.w	r3, r8, r3
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	462b      	mov	r3, r5
 80040ac:	eb49 0303 	adc.w	r3, r9, r3
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040be:	4629      	mov	r1, r5
 80040c0:	024b      	lsls	r3, r1, #9
 80040c2:	4621      	mov	r1, r4
 80040c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040c8:	4621      	mov	r1, r4
 80040ca:	024a      	lsls	r2, r1, #9
 80040cc:	4610      	mov	r0, r2
 80040ce:	4619      	mov	r1, r3
 80040d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040d2:	2200      	movs	r2, #0
 80040d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040dc:	f7fc fd6e 	bl	8000bbc <__aeabi_uldivmod>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4613      	mov	r3, r2
 80040e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040e8:	e058      	b.n	800419c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ea:	4b38      	ldr	r3, [pc, #224]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	099b      	lsrs	r3, r3, #6
 80040f0:	2200      	movs	r2, #0
 80040f2:	4618      	mov	r0, r3
 80040f4:	4611      	mov	r1, r2
 80040f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040fa:	623b      	str	r3, [r7, #32]
 80040fc:	2300      	movs	r3, #0
 80040fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004100:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004104:	4642      	mov	r2, r8
 8004106:	464b      	mov	r3, r9
 8004108:	f04f 0000 	mov.w	r0, #0
 800410c:	f04f 0100 	mov.w	r1, #0
 8004110:	0159      	lsls	r1, r3, #5
 8004112:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004116:	0150      	lsls	r0, r2, #5
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4641      	mov	r1, r8
 800411e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004122:	4649      	mov	r1, r9
 8004124:	eb63 0b01 	sbc.w	fp, r3, r1
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004134:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004138:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800413c:	ebb2 040a 	subs.w	r4, r2, sl
 8004140:	eb63 050b 	sbc.w	r5, r3, fp
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	00eb      	lsls	r3, r5, #3
 800414e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004152:	00e2      	lsls	r2, r4, #3
 8004154:	4614      	mov	r4, r2
 8004156:	461d      	mov	r5, r3
 8004158:	4643      	mov	r3, r8
 800415a:	18e3      	adds	r3, r4, r3
 800415c:	603b      	str	r3, [r7, #0]
 800415e:	464b      	mov	r3, r9
 8004160:	eb45 0303 	adc.w	r3, r5, r3
 8004164:	607b      	str	r3, [r7, #4]
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004172:	4629      	mov	r1, r5
 8004174:	028b      	lsls	r3, r1, #10
 8004176:	4621      	mov	r1, r4
 8004178:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800417c:	4621      	mov	r1, r4
 800417e:	028a      	lsls	r2, r1, #10
 8004180:	4610      	mov	r0, r2
 8004182:	4619      	mov	r1, r3
 8004184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004186:	2200      	movs	r2, #0
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	61fa      	str	r2, [r7, #28]
 800418c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004190:	f7fc fd14 	bl	8000bbc <__aeabi_uldivmod>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4613      	mov	r3, r2
 800419a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800419c:	4b0b      	ldr	r3, [pc, #44]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	3301      	adds	r3, #1
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80041ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041b6:	e002      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041b8:	4b05      	ldr	r3, [pc, #20]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80041ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3750      	adds	r7, #80	@ 0x50
 80041c4:	46bd      	mov	sp, r7
 80041c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ca:	bf00      	nop
 80041cc:	40023800 	.word	0x40023800
 80041d0:	00f42400 	.word	0x00f42400
 80041d4:	007a1200 	.word	0x007a1200

080041d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041dc:	4b03      	ldr	r3, [pc, #12]	@ (80041ec <HAL_RCC_GetHCLKFreq+0x14>)
 80041de:	681b      	ldr	r3, [r3, #0]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	20000014 	.word	0x20000014

080041f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041f4:	f7ff fff0 	bl	80041d8 <HAL_RCC_GetHCLKFreq>
 80041f8:	4602      	mov	r2, r0
 80041fa:	4b05      	ldr	r3, [pc, #20]	@ (8004210 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	0a9b      	lsrs	r3, r3, #10
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	4903      	ldr	r1, [pc, #12]	@ (8004214 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004206:	5ccb      	ldrb	r3, [r1, r3]
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800420c:	4618      	mov	r0, r3
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40023800 	.word	0x40023800
 8004214:	0800cf04 	.word	0x0800cf04

08004218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800421c:	f7ff ffdc 	bl	80041d8 <HAL_RCC_GetHCLKFreq>
 8004220:	4602      	mov	r2, r0
 8004222:	4b05      	ldr	r3, [pc, #20]	@ (8004238 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	0b5b      	lsrs	r3, r3, #13
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	4903      	ldr	r1, [pc, #12]	@ (800423c <HAL_RCC_GetPCLK2Freq+0x24>)
 800422e:	5ccb      	ldrb	r3, [r1, r3]
 8004230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004234:	4618      	mov	r0, r3
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40023800 	.word	0x40023800
 800423c:	0800cf04 	.word	0x0800cf04

08004240 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	220f      	movs	r2, #15
 800424e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004250:	4b12      	ldr	r3, [pc, #72]	@ (800429c <HAL_RCC_GetClockConfig+0x5c>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 0203 	and.w	r2, r3, #3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800425c:	4b0f      	ldr	r3, [pc, #60]	@ (800429c <HAL_RCC_GetClockConfig+0x5c>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004268:	4b0c      	ldr	r3, [pc, #48]	@ (800429c <HAL_RCC_GetClockConfig+0x5c>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004274:	4b09      	ldr	r3, [pc, #36]	@ (800429c <HAL_RCC_GetClockConfig+0x5c>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	08db      	lsrs	r3, r3, #3
 800427a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004282:	4b07      	ldr	r3, [pc, #28]	@ (80042a0 <HAL_RCC_GetClockConfig+0x60>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0207 	and.w	r2, r3, #7
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	601a      	str	r2, [r3, #0]
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40023800 	.word	0x40023800
 80042a0:	40023c00 	.word	0x40023c00

080042a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e07b      	b.n	80043ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d108      	bne.n	80042d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042c6:	d009      	beq.n	80042dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	61da      	str	r2, [r3, #28]
 80042ce:	e005      	b.n	80042dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fd ff7e 	bl	80021f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004312:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004360:	ea42 0103 	orr.w	r1, r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004368:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	0c1b      	lsrs	r3, r3, #16
 800437a:	f003 0104 	and.w	r1, r3, #4
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004382:	f003 0210 	and.w	r2, r3, #16
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	69da      	ldr	r2, [r3, #28]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800439c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b088      	sub	sp, #32
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	603b      	str	r3, [r7, #0]
 80043c2:	4613      	mov	r3, r2
 80043c4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043c6:	f7fe fad5 	bl	8002974 <HAL_GetTick>
 80043ca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80043cc:	88fb      	ldrh	r3, [r7, #6]
 80043ce:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d001      	beq.n	80043e0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
 80043de:	e12a      	b.n	8004636 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <HAL_SPI_Transmit+0x36>
 80043e6:	88fb      	ldrh	r3, [r7, #6]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e122      	b.n	8004636 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <HAL_SPI_Transmit+0x48>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e11b      	b.n	8004636 <HAL_SPI_Transmit+0x280>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2203      	movs	r2, #3
 800440a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	88fa      	ldrh	r2, [r7, #6]
 800441e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	88fa      	ldrh	r2, [r7, #6]
 8004424:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800444c:	d10f      	bne.n	800446e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800445c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800446c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004478:	2b40      	cmp	r3, #64	@ 0x40
 800447a:	d007      	beq.n	800448c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800448a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004494:	d152      	bne.n	800453c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <HAL_SPI_Transmit+0xee>
 800449e:	8b7b      	ldrh	r3, [r7, #26]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d145      	bne.n	8004530 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a8:	881a      	ldrh	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b4:	1c9a      	adds	r2, r3, #2
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044c8:	e032      	b.n	8004530 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d112      	bne.n	80044fe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044dc:	881a      	ldrh	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e8:	1c9a      	adds	r2, r3, #2
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80044fc:	e018      	b.n	8004530 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044fe:	f7fe fa39 	bl	8002974 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d803      	bhi.n	8004516 <HAL_SPI_Transmit+0x160>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004514:	d102      	bne.n	800451c <HAL_SPI_Transmit+0x166>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d109      	bne.n	8004530 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e082      	b.n	8004636 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1c7      	bne.n	80044ca <HAL_SPI_Transmit+0x114>
 800453a:	e053      	b.n	80045e4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <HAL_SPI_Transmit+0x194>
 8004544:	8b7b      	ldrh	r3, [r7, #26]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d147      	bne.n	80045da <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	330c      	adds	r3, #12
 8004554:	7812      	ldrb	r2, [r2, #0]
 8004556:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004566:	b29b      	uxth	r3, r3
 8004568:	3b01      	subs	r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004570:	e033      	b.n	80045da <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b02      	cmp	r3, #2
 800457e:	d113      	bne.n	80045a8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	330c      	adds	r3, #12
 800458a:	7812      	ldrb	r2, [r2, #0]
 800458c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800459c:	b29b      	uxth	r3, r3
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045a6:	e018      	b.n	80045da <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045a8:	f7fe f9e4 	bl	8002974 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d803      	bhi.n	80045c0 <HAL_SPI_Transmit+0x20a>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045be:	d102      	bne.n	80045c6 <HAL_SPI_Transmit+0x210>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d109      	bne.n	80045da <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e02d      	b.n	8004636 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1c6      	bne.n	8004572 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	6839      	ldr	r1, [r7, #0]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 fbab 	bl	8004d44 <SPI_EndRxTxTransaction>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e000      	b.n	8004636 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004634:	2300      	movs	r3, #0
  }
}
 8004636:	4618      	mov	r0, r3
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b08a      	sub	sp, #40	@ 0x28
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	607a      	str	r2, [r7, #4]
 800464a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800464c:	2301      	movs	r3, #1
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004650:	f7fe f990 	bl	8002974 <HAL_GetTick>
 8004654:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800465c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004664:	887b      	ldrh	r3, [r7, #2]
 8004666:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004668:	7ffb      	ldrb	r3, [r7, #31]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d00c      	beq.n	8004688 <HAL_SPI_TransmitReceive+0x4a>
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004674:	d106      	bne.n	8004684 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d102      	bne.n	8004684 <HAL_SPI_TransmitReceive+0x46>
 800467e:	7ffb      	ldrb	r3, [r7, #31]
 8004680:	2b04      	cmp	r3, #4
 8004682:	d001      	beq.n	8004688 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004684:	2302      	movs	r3, #2
 8004686:	e17f      	b.n	8004988 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <HAL_SPI_TransmitReceive+0x5c>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <HAL_SPI_TransmitReceive+0x5c>
 8004694:	887b      	ldrh	r3, [r7, #2]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e174      	b.n	8004988 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_SPI_TransmitReceive+0x6e>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e16d      	b.n	8004988 <HAL_SPI_TransmitReceive+0x34a>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d003      	beq.n	80046c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2205      	movs	r2, #5
 80046c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	887a      	ldrh	r2, [r7, #2]
 80046d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	887a      	ldrh	r2, [r7, #2]
 80046de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	887a      	ldrh	r2, [r7, #2]
 80046ea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	887a      	ldrh	r2, [r7, #2]
 80046f0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004708:	2b40      	cmp	r3, #64	@ 0x40
 800470a:	d007      	beq.n	800471c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800471a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004724:	d17e      	bne.n	8004824 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <HAL_SPI_TransmitReceive+0xf6>
 800472e:	8afb      	ldrh	r3, [r7, #22]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d16c      	bne.n	800480e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004738:	881a      	ldrh	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004744:	1c9a      	adds	r2, r3, #2
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004758:	e059      	b.n	800480e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b02      	cmp	r3, #2
 8004766:	d11b      	bne.n	80047a0 <HAL_SPI_TransmitReceive+0x162>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d016      	beq.n	80047a0 <HAL_SPI_TransmitReceive+0x162>
 8004772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004774:	2b01      	cmp	r3, #1
 8004776:	d113      	bne.n	80047a0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477c:	881a      	ldrh	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004788:	1c9a      	adds	r2, r3, #2
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d119      	bne.n	80047e2 <HAL_SPI_TransmitReceive+0x1a4>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d014      	beq.n	80047e2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c2:	b292      	uxth	r2, r2
 80047c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ca:	1c9a      	adds	r2, r3, #2
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047de:	2301      	movs	r3, #1
 80047e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047e2:	f7fe f8c7 	bl	8002974 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d80d      	bhi.n	800480e <HAL_SPI_TransmitReceive+0x1d0>
 80047f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f8:	d009      	beq.n	800480e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e0bc      	b.n	8004988 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004812:	b29b      	uxth	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1a0      	bne.n	800475a <HAL_SPI_TransmitReceive+0x11c>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d19b      	bne.n	800475a <HAL_SPI_TransmitReceive+0x11c>
 8004822:	e082      	b.n	800492a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <HAL_SPI_TransmitReceive+0x1f4>
 800482c:	8afb      	ldrh	r3, [r7, #22]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d171      	bne.n	8004916 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	330c      	adds	r3, #12
 800483c:	7812      	ldrb	r2, [r2, #0]
 800483e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800484e:	b29b      	uxth	r3, r3
 8004850:	3b01      	subs	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004858:	e05d      	b.n	8004916 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b02      	cmp	r3, #2
 8004866:	d11c      	bne.n	80048a2 <HAL_SPI_TransmitReceive+0x264>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d017      	beq.n	80048a2 <HAL_SPI_TransmitReceive+0x264>
 8004872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004874:	2b01      	cmp	r3, #1
 8004876:	d114      	bne.n	80048a2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	330c      	adds	r3, #12
 8004882:	7812      	ldrb	r2, [r2, #0]
 8004884:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004894:	b29b      	uxth	r3, r3
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d119      	bne.n	80048e4 <HAL_SPI_TransmitReceive+0x2a6>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d014      	beq.n	80048e4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048e0:	2301      	movs	r3, #1
 80048e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048e4:	f7fe f846 	bl	8002974 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d803      	bhi.n	80048fc <HAL_SPI_TransmitReceive+0x2be>
 80048f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fa:	d102      	bne.n	8004902 <HAL_SPI_TransmitReceive+0x2c4>
 80048fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e038      	b.n	8004988 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d19c      	bne.n	800485a <HAL_SPI_TransmitReceive+0x21c>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d197      	bne.n	800485a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800492a:	6a3a      	ldr	r2, [r7, #32]
 800492c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 fa08 	bl	8004d44 <SPI_EndRxTxTransaction>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d008      	beq.n	800494c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2220      	movs	r2, #32
 800493e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e01d      	b.n	8004988 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10a      	bne.n	800496a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004954:	2300      	movs	r3, #0
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	613b      	str	r3, [r7, #16]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004986:	2300      	movs	r3, #0
  }
}
 8004988:	4618      	mov	r0, r3
 800498a:	3728      	adds	r7, #40	@ 0x28
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	4613      	mov	r3, r2
 800499c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d001      	beq.n	80049ae <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80049aa:	2302      	movs	r3, #2
 80049ac:	e097      	b.n	8004ade <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <HAL_SPI_Transmit_DMA+0x2a>
 80049b4:	88fb      	ldrh	r3, [r7, #6]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e08f      	b.n	8004ade <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_SPI_Transmit_DMA+0x3c>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e088      	b.n	8004ade <HAL_SPI_Transmit_DMA+0x14e>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2203      	movs	r2, #3
 80049d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	88fa      	ldrh	r2, [r7, #6]
 80049ec:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	88fa      	ldrh	r2, [r7, #6]
 80049f2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a1a:	d10f      	bne.n	8004a3c <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a40:	4a29      	ldr	r2, [pc, #164]	@ (8004ae8 <HAL_SPI_Transmit_DMA+0x158>)
 8004a42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a48:	4a28      	ldr	r2, [pc, #160]	@ (8004aec <HAL_SPI_Transmit_DMA+0x15c>)
 8004a4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a50:	4a27      	ldr	r2, [pc, #156]	@ (8004af0 <HAL_SPI_Transmit_DMA+0x160>)
 8004a52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a58:	2200      	movs	r2, #0
 8004a5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a64:	4619      	mov	r1, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	330c      	adds	r3, #12
 8004a6c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a72:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004a74:	f7fe faa4 	bl	8002fc0 <HAL_DMA_Start_IT>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00b      	beq.n	8004a96 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a82:	f043 0210 	orr.w	r2, r3, #16
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e023      	b.n	8004ade <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa0:	2b40      	cmp	r3, #64	@ 0x40
 8004aa2:	d007      	beq.n	8004ab4 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ab2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0220 	orr.w	r2, r2, #32
 8004aca:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0202 	orr.w	r2, r2, #2
 8004ada:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	08004bd9 	.word	0x08004bd9
 8004aec:	08004b31 	.word	0x08004b31
 8004af0:	08004bf5 	.word	0x08004bf5

08004af4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b3e:	f7fd ff19 	bl	8002974 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b52:	d03b      	beq.n	8004bcc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0220 	bic.w	r2, r2, #32
 8004b62:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0202 	bic.w	r2, r2, #2
 8004b72:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	2164      	movs	r1, #100	@ 0x64
 8004b78:	6978      	ldr	r0, [r7, #20]
 8004b7a:	f000 f8e3 	bl	8004d44 <SPI_EndRxTxTransaction>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b88:	f043 0220 	orr.w	r2, r3, #32
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10a      	bne.n	8004bae <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004bc4:	6978      	ldr	r0, [r7, #20]
 8004bc6:	f7ff ffa9 	bl	8004b1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004bca:	e002      	b.n	8004bd2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004bcc:	6978      	ldr	r0, [r7, #20]
 8004bce:	f7ff ff91 	bl	8004af4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff ff8e 	bl	8004b08 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004bec:	bf00      	nop
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c00:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0203 	bic.w	r2, r2, #3
 8004c10:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c16:	f043 0210 	orr.w	r2, r3, #16
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f7ff ff78 	bl	8004b1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c2c:	bf00      	nop
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	603b      	str	r3, [r7, #0]
 8004c40:	4613      	mov	r3, r2
 8004c42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c44:	f7fd fe96 	bl	8002974 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4c:	1a9b      	subs	r3, r3, r2
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	4413      	add	r3, r2
 8004c52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c54:	f7fd fe8e 	bl	8002974 <HAL_GetTick>
 8004c58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c5a:	4b39      	ldr	r3, [pc, #228]	@ (8004d40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	015b      	lsls	r3, r3, #5
 8004c60:	0d1b      	lsrs	r3, r3, #20
 8004c62:	69fa      	ldr	r2, [r7, #28]
 8004c64:	fb02 f303 	mul.w	r3, r2, r3
 8004c68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c6a:	e054      	b.n	8004d16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c72:	d050      	beq.n	8004d16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c74:	f7fd fe7e 	bl	8002974 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	69fa      	ldr	r2, [r7, #28]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d902      	bls.n	8004c8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d13d      	bne.n	8004d06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ca2:	d111      	bne.n	8004cc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cac:	d004      	beq.n	8004cb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb6:	d107      	bne.n	8004cc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ccc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cd0:	d10f      	bne.n	8004cf2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cf0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e017      	b.n	8004d36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	bf0c      	ite	eq
 8004d26:	2301      	moveq	r3, #1
 8004d28:	2300      	movne	r3, #0
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d19b      	bne.n	8004c6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000014 	.word	0x20000014

08004d44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b088      	sub	sp, #32
 8004d48:	af02      	add	r7, sp, #8
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2201      	movs	r2, #1
 8004d58:	2102      	movs	r1, #2
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f7ff ff6a 	bl	8004c34 <SPI_WaitFlagStateUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d007      	beq.n	8004d76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6a:	f043 0220 	orr.w	r2, r3, #32
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e032      	b.n	8004ddc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d76:	4b1b      	ldr	r3, [pc, #108]	@ (8004de4 <SPI_EndRxTxTransaction+0xa0>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8004de8 <SPI_EndRxTxTransaction+0xa4>)
 8004d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d80:	0d5b      	lsrs	r3, r3, #21
 8004d82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d86:	fb02 f303 	mul.w	r3, r2, r3
 8004d8a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d94:	d112      	bne.n	8004dbc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2180      	movs	r1, #128	@ 0x80
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f7ff ff47 	bl	8004c34 <SPI_WaitFlagStateUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d016      	beq.n	8004dda <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db0:	f043 0220 	orr.w	r2, r3, #32
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e00f      	b.n	8004ddc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dd2:	2b80      	cmp	r3, #128	@ 0x80
 8004dd4:	d0f2      	beq.n	8004dbc <SPI_EndRxTxTransaction+0x78>
 8004dd6:	e000      	b.n	8004dda <SPI_EndRxTxTransaction+0x96>
        break;
 8004dd8:	bf00      	nop
  }

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20000014 	.word	0x20000014
 8004de8:	165e9f81 	.word	0x165e9f81

08004dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e041      	b.n	8004e82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f839 	bl	8004e8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3304      	adds	r3, #4
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	f000 f9c0 	bl	80051b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
	...

08004ea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d001      	beq.n	8004eb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e04e      	b.n	8004f56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a23      	ldr	r2, [pc, #140]	@ (8004f64 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d022      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x80>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee2:	d01d      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x80>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8004f68 <HAL_TIM_Base_Start_IT+0xc8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d018      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x80>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f6c <HAL_TIM_Base_Start_IT+0xcc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d013      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x80>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1c      	ldr	r2, [pc, #112]	@ (8004f70 <HAL_TIM_Base_Start_IT+0xd0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00e      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x80>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1b      	ldr	r2, [pc, #108]	@ (8004f74 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d009      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x80>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a19      	ldr	r2, [pc, #100]	@ (8004f78 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d004      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x80>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a18      	ldr	r2, [pc, #96]	@ (8004f7c <HAL_TIM_Base_Start_IT+0xdc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d111      	bne.n	8004f44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b06      	cmp	r3, #6
 8004f30:	d010      	beq.n	8004f54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0201 	orr.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f42:	e007      	b.n	8004f54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40010000 	.word	0x40010000
 8004f68:	40000400 	.word	0x40000400
 8004f6c:	40000800 	.word	0x40000800
 8004f70:	40000c00 	.word	0x40000c00
 8004f74:	40010400 	.word	0x40010400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40001800 	.word	0x40001800

08004f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d020      	beq.n	8004fe4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01b      	beq.n	8004fe4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f06f 0202 	mvn.w	r2, #2
 8004fb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f8d2 	bl	8005174 <HAL_TIM_IC_CaptureCallback>
 8004fd0:	e005      	b.n	8004fde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f8c4 	bl	8005160 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f8d5 	bl	8005188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d020      	beq.n	8005030 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01b      	beq.n	8005030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0204 	mvn.w	r2, #4
 8005000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2202      	movs	r2, #2
 8005006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8ac 	bl	8005174 <HAL_TIM_IC_CaptureCallback>
 800501c:	e005      	b.n	800502a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f89e 	bl	8005160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f8af 	bl	8005188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b00      	cmp	r3, #0
 8005038:	d020      	beq.n	800507c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f003 0308 	and.w	r3, r3, #8
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01b      	beq.n	800507c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0208 	mvn.w	r2, #8
 800504c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2204      	movs	r2, #4
 8005052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f886 	bl	8005174 <HAL_TIM_IC_CaptureCallback>
 8005068:	e005      	b.n	8005076 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f878 	bl	8005160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f889 	bl	8005188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b00      	cmp	r3, #0
 8005084:	d020      	beq.n	80050c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01b      	beq.n	80050c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0210 	mvn.w	r2, #16
 8005098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2208      	movs	r2, #8
 800509e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f860 	bl	8005174 <HAL_TIM_IC_CaptureCallback>
 80050b4:	e005      	b.n	80050c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f852 	bl	8005160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f863 	bl	8005188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00c      	beq.n	80050ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d007      	beq.n	80050ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0201 	mvn.w	r2, #1
 80050e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7fd f838 	bl	800215c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00c      	beq.n	8005110 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d007      	beq.n	8005110 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f906 	bl	800531c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00c      	beq.n	8005134 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005120:	2b00      	cmp	r3, #0
 8005122:	d007      	beq.n	8005134 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800512c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f834 	bl	800519c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f003 0320 	and.w	r3, r3, #32
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00c      	beq.n	8005158 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f003 0320 	and.w	r3, r3, #32
 8005144:	2b00      	cmp	r3, #0
 8005146:	d007      	beq.n	8005158 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0220 	mvn.w	r2, #32
 8005150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f8d8 	bl	8005308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005158:	bf00      	nop
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a46      	ldr	r2, [pc, #280]	@ (80052dc <TIM_Base_SetConfig+0x12c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d013      	beq.n	80051f0 <TIM_Base_SetConfig+0x40>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ce:	d00f      	beq.n	80051f0 <TIM_Base_SetConfig+0x40>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a43      	ldr	r2, [pc, #268]	@ (80052e0 <TIM_Base_SetConfig+0x130>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00b      	beq.n	80051f0 <TIM_Base_SetConfig+0x40>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a42      	ldr	r2, [pc, #264]	@ (80052e4 <TIM_Base_SetConfig+0x134>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d007      	beq.n	80051f0 <TIM_Base_SetConfig+0x40>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a41      	ldr	r2, [pc, #260]	@ (80052e8 <TIM_Base_SetConfig+0x138>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <TIM_Base_SetConfig+0x40>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a40      	ldr	r2, [pc, #256]	@ (80052ec <TIM_Base_SetConfig+0x13c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d108      	bne.n	8005202 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a35      	ldr	r2, [pc, #212]	@ (80052dc <TIM_Base_SetConfig+0x12c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d02b      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005210:	d027      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a32      	ldr	r2, [pc, #200]	@ (80052e0 <TIM_Base_SetConfig+0x130>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d023      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a31      	ldr	r2, [pc, #196]	@ (80052e4 <TIM_Base_SetConfig+0x134>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d01f      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a30      	ldr	r2, [pc, #192]	@ (80052e8 <TIM_Base_SetConfig+0x138>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d01b      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2f      	ldr	r2, [pc, #188]	@ (80052ec <TIM_Base_SetConfig+0x13c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d017      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2e      	ldr	r2, [pc, #184]	@ (80052f0 <TIM_Base_SetConfig+0x140>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d013      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a2d      	ldr	r2, [pc, #180]	@ (80052f4 <TIM_Base_SetConfig+0x144>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d00f      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2c      	ldr	r2, [pc, #176]	@ (80052f8 <TIM_Base_SetConfig+0x148>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00b      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a2b      	ldr	r2, [pc, #172]	@ (80052fc <TIM_Base_SetConfig+0x14c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d007      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a2a      	ldr	r2, [pc, #168]	@ (8005300 <TIM_Base_SetConfig+0x150>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d003      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a29      	ldr	r2, [pc, #164]	@ (8005304 <TIM_Base_SetConfig+0x154>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d108      	bne.n	8005274 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	4313      	orrs	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a10      	ldr	r2, [pc, #64]	@ (80052dc <TIM_Base_SetConfig+0x12c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d003      	beq.n	80052a8 <TIM_Base_SetConfig+0xf8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a12      	ldr	r2, [pc, #72]	@ (80052ec <TIM_Base_SetConfig+0x13c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d103      	bne.n	80052b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d105      	bne.n	80052ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f023 0201 	bic.w	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	611a      	str	r2, [r3, #16]
  }
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40000400 	.word	0x40000400
 80052e4:	40000800 	.word	0x40000800
 80052e8:	40000c00 	.word	0x40000c00
 80052ec:	40010400 	.word	0x40010400
 80052f0:	40014000 	.word	0x40014000
 80052f4:	40014400 	.word	0x40014400
 80052f8:	40014800 	.word	0x40014800
 80052fc:	40001800 	.word	0x40001800
 8005300:	40001c00 	.word	0x40001c00
 8005304:	40002000 	.word	0x40002000

08005308 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e042      	b.n	80053c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d106      	bne.n	800535c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fd f986 	bl	8002668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2224      	movs	r2, #36	@ 0x24
 8005360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005372:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f973 	bl	8005660 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	691a      	ldr	r2, [r3, #16]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005388:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695a      	ldr	r2, [r3, #20]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005398:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08a      	sub	sp, #40	@ 0x28
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	4613      	mov	r3, r2
 80053de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d175      	bne.n	80054dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <HAL_UART_Transmit+0x2c>
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e06e      	b.n	80054de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2221      	movs	r2, #33	@ 0x21
 800540a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800540e:	f7fd fab1 	bl	8002974 <HAL_GetTick>
 8005412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	88fa      	ldrh	r2, [r7, #6]
 8005418:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	88fa      	ldrh	r2, [r7, #6]
 800541e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005428:	d108      	bne.n	800543c <HAL_UART_Transmit+0x6c>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d104      	bne.n	800543c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005432:	2300      	movs	r3, #0
 8005434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	61bb      	str	r3, [r7, #24]
 800543a:	e003      	b.n	8005444 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005440:	2300      	movs	r3, #0
 8005442:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005444:	e02e      	b.n	80054a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2200      	movs	r2, #0
 800544e:	2180      	movs	r1, #128	@ 0x80
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 f848 	bl	80054e6 <UART_WaitOnFlagUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d005      	beq.n	8005468 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e03a      	b.n	80054de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10b      	bne.n	8005486 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800547c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	3302      	adds	r3, #2
 8005482:	61bb      	str	r3, [r7, #24]
 8005484:	e007      	b.n	8005496 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	781a      	ldrb	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	3301      	adds	r3, #1
 8005494:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800549a:	b29b      	uxth	r3, r3
 800549c:	3b01      	subs	r3, #1
 800549e:	b29a      	uxth	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1cb      	bne.n	8005446 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2200      	movs	r2, #0
 80054b6:	2140      	movs	r1, #64	@ 0x40
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 f814 	bl	80054e6 <UART_WaitOnFlagUntilTimeout>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e006      	b.n	80054de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	e000      	b.n	80054de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80054dc:	2302      	movs	r3, #2
  }
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3720      	adds	r7, #32
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b086      	sub	sp, #24
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	603b      	str	r3, [r7, #0]
 80054f2:	4613      	mov	r3, r2
 80054f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054f6:	e03b      	b.n	8005570 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fe:	d037      	beq.n	8005570 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005500:	f7fd fa38 	bl	8002974 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	6a3a      	ldr	r2, [r7, #32]
 800550c:	429a      	cmp	r2, r3
 800550e:	d302      	bcc.n	8005516 <UART_WaitOnFlagUntilTimeout+0x30>
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e03a      	b.n	8005590 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d023      	beq.n	8005570 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b80      	cmp	r3, #128	@ 0x80
 800552c:	d020      	beq.n	8005570 <UART_WaitOnFlagUntilTimeout+0x8a>
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b40      	cmp	r3, #64	@ 0x40
 8005532:	d01d      	beq.n	8005570 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b08      	cmp	r3, #8
 8005540:	d116      	bne.n	8005570 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 f81d 	bl	8005598 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2208      	movs	r2, #8
 8005562:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e00f      	b.n	8005590 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4013      	ands	r3, r2
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	429a      	cmp	r2, r3
 800557e:	bf0c      	ite	eq
 8005580:	2301      	moveq	r3, #1
 8005582:	2300      	movne	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	461a      	mov	r2, r3
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	429a      	cmp	r2, r3
 800558c:	d0b4      	beq.n	80054f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005598:	b480      	push	{r7}
 800559a:	b095      	sub	sp, #84	@ 0x54
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	330c      	adds	r3, #12
 80055a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055aa:	e853 3f00 	ldrex	r3, [r3]
 80055ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	330c      	adds	r3, #12
 80055be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80055c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055c8:	e841 2300 	strex	r3, r2, [r1]
 80055cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e5      	bne.n	80055a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3314      	adds	r3, #20
 80055da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	f023 0301 	bic.w	r3, r3, #1
 80055ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3314      	adds	r3, #20
 80055f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e5      	bne.n	80055d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560c:	2b01      	cmp	r3, #1
 800560e:	d119      	bne.n	8005644 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	330c      	adds	r3, #12
 8005616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f023 0310 	bic.w	r3, r3, #16
 8005626:	647b      	str	r3, [r7, #68]	@ 0x44
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	330c      	adds	r3, #12
 800562e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005630:	61ba      	str	r2, [r7, #24]
 8005632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	6979      	ldr	r1, [r7, #20]
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	613b      	str	r3, [r7, #16]
   return(result);
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e5      	bne.n	8005610 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2220      	movs	r2, #32
 8005648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005652:	bf00      	nop
 8005654:	3754      	adds	r7, #84	@ 0x54
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
	...

08005660 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005664:	b0c0      	sub	sp, #256	@ 0x100
 8005666:	af00      	add	r7, sp, #0
 8005668:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800566c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800567c:	68d9      	ldr	r1, [r3, #12]
 800567e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	ea40 0301 	orr.w	r3, r0, r1
 8005688:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800568a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	431a      	orrs	r2, r3
 8005698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	431a      	orrs	r2, r3
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80056b8:	f021 010c 	bic.w	r1, r1, #12
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056c6:	430b      	orrs	r3, r1
 80056c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80056d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056da:	6999      	ldr	r1, [r3, #24]
 80056dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	ea40 0301 	orr.w	r3, r0, r1
 80056e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	4b8f      	ldr	r3, [pc, #572]	@ (800592c <UART_SetConfig+0x2cc>)
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d005      	beq.n	8005700 <UART_SetConfig+0xa0>
 80056f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	4b8d      	ldr	r3, [pc, #564]	@ (8005930 <UART_SetConfig+0x2d0>)
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d104      	bne.n	800570a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005700:	f7fe fd8a 	bl	8004218 <HAL_RCC_GetPCLK2Freq>
 8005704:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005708:	e003      	b.n	8005712 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800570a:	f7fe fd71 	bl	80041f0 <HAL_RCC_GetPCLK1Freq>
 800570e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800571c:	f040 810c 	bne.w	8005938 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005724:	2200      	movs	r2, #0
 8005726:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800572a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800572e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005732:	4622      	mov	r2, r4
 8005734:	462b      	mov	r3, r5
 8005736:	1891      	adds	r1, r2, r2
 8005738:	65b9      	str	r1, [r7, #88]	@ 0x58
 800573a:	415b      	adcs	r3, r3
 800573c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800573e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005742:	4621      	mov	r1, r4
 8005744:	eb12 0801 	adds.w	r8, r2, r1
 8005748:	4629      	mov	r1, r5
 800574a:	eb43 0901 	adc.w	r9, r3, r1
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800575a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800575e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005762:	4690      	mov	r8, r2
 8005764:	4699      	mov	r9, r3
 8005766:	4623      	mov	r3, r4
 8005768:	eb18 0303 	adds.w	r3, r8, r3
 800576c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005770:	462b      	mov	r3, r5
 8005772:	eb49 0303 	adc.w	r3, r9, r3
 8005776:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800577a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005786:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800578a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800578e:	460b      	mov	r3, r1
 8005790:	18db      	adds	r3, r3, r3
 8005792:	653b      	str	r3, [r7, #80]	@ 0x50
 8005794:	4613      	mov	r3, r2
 8005796:	eb42 0303 	adc.w	r3, r2, r3
 800579a:	657b      	str	r3, [r7, #84]	@ 0x54
 800579c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80057a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80057a4:	f7fb fa0a 	bl	8000bbc <__aeabi_uldivmod>
 80057a8:	4602      	mov	r2, r0
 80057aa:	460b      	mov	r3, r1
 80057ac:	4b61      	ldr	r3, [pc, #388]	@ (8005934 <UART_SetConfig+0x2d4>)
 80057ae:	fba3 2302 	umull	r2, r3, r3, r2
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	011c      	lsls	r4, r3, #4
 80057b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80057c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80057c8:	4642      	mov	r2, r8
 80057ca:	464b      	mov	r3, r9
 80057cc:	1891      	adds	r1, r2, r2
 80057ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80057d0:	415b      	adcs	r3, r3
 80057d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80057d8:	4641      	mov	r1, r8
 80057da:	eb12 0a01 	adds.w	sl, r2, r1
 80057de:	4649      	mov	r1, r9
 80057e0:	eb43 0b01 	adc.w	fp, r3, r1
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	f04f 0300 	mov.w	r3, #0
 80057ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057f8:	4692      	mov	sl, r2
 80057fa:	469b      	mov	fp, r3
 80057fc:	4643      	mov	r3, r8
 80057fe:	eb1a 0303 	adds.w	r3, sl, r3
 8005802:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005806:	464b      	mov	r3, r9
 8005808:	eb4b 0303 	adc.w	r3, fp, r3
 800580c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800581c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005820:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005824:	460b      	mov	r3, r1
 8005826:	18db      	adds	r3, r3, r3
 8005828:	643b      	str	r3, [r7, #64]	@ 0x40
 800582a:	4613      	mov	r3, r2
 800582c:	eb42 0303 	adc.w	r3, r2, r3
 8005830:	647b      	str	r3, [r7, #68]	@ 0x44
 8005832:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005836:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800583a:	f7fb f9bf 	bl	8000bbc <__aeabi_uldivmod>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4611      	mov	r1, r2
 8005844:	4b3b      	ldr	r3, [pc, #236]	@ (8005934 <UART_SetConfig+0x2d4>)
 8005846:	fba3 2301 	umull	r2, r3, r3, r1
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	2264      	movs	r2, #100	@ 0x64
 800584e:	fb02 f303 	mul.w	r3, r2, r3
 8005852:	1acb      	subs	r3, r1, r3
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800585a:	4b36      	ldr	r3, [pc, #216]	@ (8005934 <UART_SetConfig+0x2d4>)
 800585c:	fba3 2302 	umull	r2, r3, r3, r2
 8005860:	095b      	lsrs	r3, r3, #5
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005868:	441c      	add	r4, r3
 800586a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800586e:	2200      	movs	r2, #0
 8005870:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005874:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005878:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800587c:	4642      	mov	r2, r8
 800587e:	464b      	mov	r3, r9
 8005880:	1891      	adds	r1, r2, r2
 8005882:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005884:	415b      	adcs	r3, r3
 8005886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005888:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800588c:	4641      	mov	r1, r8
 800588e:	1851      	adds	r1, r2, r1
 8005890:	6339      	str	r1, [r7, #48]	@ 0x30
 8005892:	4649      	mov	r1, r9
 8005894:	414b      	adcs	r3, r1
 8005896:	637b      	str	r3, [r7, #52]	@ 0x34
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80058a4:	4659      	mov	r1, fp
 80058a6:	00cb      	lsls	r3, r1, #3
 80058a8:	4651      	mov	r1, sl
 80058aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ae:	4651      	mov	r1, sl
 80058b0:	00ca      	lsls	r2, r1, #3
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	4603      	mov	r3, r0
 80058b8:	4642      	mov	r2, r8
 80058ba:	189b      	adds	r3, r3, r2
 80058bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058c0:	464b      	mov	r3, r9
 80058c2:	460a      	mov	r2, r1
 80058c4:	eb42 0303 	adc.w	r3, r2, r3
 80058c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80058dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058e0:	460b      	mov	r3, r1
 80058e2:	18db      	adds	r3, r3, r3
 80058e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058e6:	4613      	mov	r3, r2
 80058e8:	eb42 0303 	adc.w	r3, r2, r3
 80058ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80058f6:	f7fb f961 	bl	8000bbc <__aeabi_uldivmod>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005934 <UART_SetConfig+0x2d4>)
 8005900:	fba3 1302 	umull	r1, r3, r3, r2
 8005904:	095b      	lsrs	r3, r3, #5
 8005906:	2164      	movs	r1, #100	@ 0x64
 8005908:	fb01 f303 	mul.w	r3, r1, r3
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	3332      	adds	r3, #50	@ 0x32
 8005912:	4a08      	ldr	r2, [pc, #32]	@ (8005934 <UART_SetConfig+0x2d4>)
 8005914:	fba2 2303 	umull	r2, r3, r2, r3
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	f003 0207 	and.w	r2, r3, #7
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4422      	add	r2, r4
 8005926:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005928:	e106      	b.n	8005b38 <UART_SetConfig+0x4d8>
 800592a:	bf00      	nop
 800592c:	40011000 	.word	0x40011000
 8005930:	40011400 	.word	0x40011400
 8005934:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800593c:	2200      	movs	r2, #0
 800593e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005942:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005946:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800594a:	4642      	mov	r2, r8
 800594c:	464b      	mov	r3, r9
 800594e:	1891      	adds	r1, r2, r2
 8005950:	6239      	str	r1, [r7, #32]
 8005952:	415b      	adcs	r3, r3
 8005954:	627b      	str	r3, [r7, #36]	@ 0x24
 8005956:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800595a:	4641      	mov	r1, r8
 800595c:	1854      	adds	r4, r2, r1
 800595e:	4649      	mov	r1, r9
 8005960:	eb43 0501 	adc.w	r5, r3, r1
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	00eb      	lsls	r3, r5, #3
 800596e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005972:	00e2      	lsls	r2, r4, #3
 8005974:	4614      	mov	r4, r2
 8005976:	461d      	mov	r5, r3
 8005978:	4643      	mov	r3, r8
 800597a:	18e3      	adds	r3, r4, r3
 800597c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005980:	464b      	mov	r3, r9
 8005982:	eb45 0303 	adc.w	r3, r5, r3
 8005986:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800598a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005996:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800599a:	f04f 0200 	mov.w	r2, #0
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80059a6:	4629      	mov	r1, r5
 80059a8:	008b      	lsls	r3, r1, #2
 80059aa:	4621      	mov	r1, r4
 80059ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059b0:	4621      	mov	r1, r4
 80059b2:	008a      	lsls	r2, r1, #2
 80059b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80059b8:	f7fb f900 	bl	8000bbc <__aeabi_uldivmod>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4b60      	ldr	r3, [pc, #384]	@ (8005b44 <UART_SetConfig+0x4e4>)
 80059c2:	fba3 2302 	umull	r2, r3, r3, r2
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	011c      	lsls	r4, r3, #4
 80059ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80059d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80059dc:	4642      	mov	r2, r8
 80059de:	464b      	mov	r3, r9
 80059e0:	1891      	adds	r1, r2, r2
 80059e2:	61b9      	str	r1, [r7, #24]
 80059e4:	415b      	adcs	r3, r3
 80059e6:	61fb      	str	r3, [r7, #28]
 80059e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059ec:	4641      	mov	r1, r8
 80059ee:	1851      	adds	r1, r2, r1
 80059f0:	6139      	str	r1, [r7, #16]
 80059f2:	4649      	mov	r1, r9
 80059f4:	414b      	adcs	r3, r1
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a04:	4659      	mov	r1, fp
 8005a06:	00cb      	lsls	r3, r1, #3
 8005a08:	4651      	mov	r1, sl
 8005a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a0e:	4651      	mov	r1, sl
 8005a10:	00ca      	lsls	r2, r1, #3
 8005a12:	4610      	mov	r0, r2
 8005a14:	4619      	mov	r1, r3
 8005a16:	4603      	mov	r3, r0
 8005a18:	4642      	mov	r2, r8
 8005a1a:	189b      	adds	r3, r3, r2
 8005a1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a20:	464b      	mov	r3, r9
 8005a22:	460a      	mov	r2, r1
 8005a24:	eb42 0303 	adc.w	r3, r2, r3
 8005a28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a44:	4649      	mov	r1, r9
 8005a46:	008b      	lsls	r3, r1, #2
 8005a48:	4641      	mov	r1, r8
 8005a4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a4e:	4641      	mov	r1, r8
 8005a50:	008a      	lsls	r2, r1, #2
 8005a52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a56:	f7fb f8b1 	bl	8000bbc <__aeabi_uldivmod>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4611      	mov	r1, r2
 8005a60:	4b38      	ldr	r3, [pc, #224]	@ (8005b44 <UART_SetConfig+0x4e4>)
 8005a62:	fba3 2301 	umull	r2, r3, r3, r1
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	2264      	movs	r2, #100	@ 0x64
 8005a6a:	fb02 f303 	mul.w	r3, r2, r3
 8005a6e:	1acb      	subs	r3, r1, r3
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	3332      	adds	r3, #50	@ 0x32
 8005a74:	4a33      	ldr	r2, [pc, #204]	@ (8005b44 <UART_SetConfig+0x4e4>)
 8005a76:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a80:	441c      	add	r4, r3
 8005a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a86:	2200      	movs	r2, #0
 8005a88:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a8a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a90:	4642      	mov	r2, r8
 8005a92:	464b      	mov	r3, r9
 8005a94:	1891      	adds	r1, r2, r2
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	415b      	adcs	r3, r3
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005aa0:	4641      	mov	r1, r8
 8005aa2:	1851      	adds	r1, r2, r1
 8005aa4:	6039      	str	r1, [r7, #0]
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	414b      	adcs	r3, r1
 8005aaa:	607b      	str	r3, [r7, #4]
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ab8:	4659      	mov	r1, fp
 8005aba:	00cb      	lsls	r3, r1, #3
 8005abc:	4651      	mov	r1, sl
 8005abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ac2:	4651      	mov	r1, sl
 8005ac4:	00ca      	lsls	r2, r1, #3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4603      	mov	r3, r0
 8005acc:	4642      	mov	r2, r8
 8005ace:	189b      	adds	r3, r3, r2
 8005ad0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ad2:	464b      	mov	r3, r9
 8005ad4:	460a      	mov	r2, r1
 8005ad6:	eb42 0303 	adc.w	r3, r2, r3
 8005ada:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ae6:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005af4:	4649      	mov	r1, r9
 8005af6:	008b      	lsls	r3, r1, #2
 8005af8:	4641      	mov	r1, r8
 8005afa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005afe:	4641      	mov	r1, r8
 8005b00:	008a      	lsls	r2, r1, #2
 8005b02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b06:	f7fb f859 	bl	8000bbc <__aeabi_uldivmod>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b44 <UART_SetConfig+0x4e4>)
 8005b10:	fba3 1302 	umull	r1, r3, r3, r2
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	2164      	movs	r1, #100	@ 0x64
 8005b18:	fb01 f303 	mul.w	r3, r1, r3
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	3332      	adds	r3, #50	@ 0x32
 8005b22:	4a08      	ldr	r2, [pc, #32]	@ (8005b44 <UART_SetConfig+0x4e4>)
 8005b24:	fba2 2303 	umull	r2, r3, r2, r3
 8005b28:	095b      	lsrs	r3, r3, #5
 8005b2a:	f003 020f 	and.w	r2, r3, #15
 8005b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4422      	add	r2, r4
 8005b36:	609a      	str	r2, [r3, #8]
}
 8005b38:	bf00      	nop
 8005b3a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b44:	51eb851f 	.word	0x51eb851f

08005b48 <__NVIC_SetPriority>:
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	4603      	mov	r3, r0
 8005b50:	6039      	str	r1, [r7, #0]
 8005b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	db0a      	blt.n	8005b72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	490c      	ldr	r1, [pc, #48]	@ (8005b94 <__NVIC_SetPriority+0x4c>)
 8005b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b66:	0112      	lsls	r2, r2, #4
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005b70:	e00a      	b.n	8005b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	4908      	ldr	r1, [pc, #32]	@ (8005b98 <__NVIC_SetPriority+0x50>)
 8005b78:	79fb      	ldrb	r3, [r7, #7]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	3b04      	subs	r3, #4
 8005b80:	0112      	lsls	r2, r2, #4
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	440b      	add	r3, r1
 8005b86:	761a      	strb	r2, [r3, #24]
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	e000e100 	.word	0xe000e100
 8005b98:	e000ed00 	.word	0xe000ed00

08005b9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005ba0:	4b05      	ldr	r3, [pc, #20]	@ (8005bb8 <SysTick_Handler+0x1c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005ba4:	f002 f996 	bl	8007ed4 <xTaskGetSchedulerState>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d001      	beq.n	8005bb2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005bae:	f003 f88b 	bl	8008cc8 <xPortSysTickHandler>
  }
}
 8005bb2:	bf00      	nop
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	e000e010 	.word	0xe000e010

08005bbc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	f06f 0004 	mvn.w	r0, #4
 8005bc6:	f7ff ffbf 	bl	8005b48 <__NVIC_SetPriority>
#endif
}
 8005bca:	bf00      	nop
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bd6:	f3ef 8305 	mrs	r3, IPSR
 8005bda:	603b      	str	r3, [r7, #0]
  return(result);
 8005bdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005be2:	f06f 0305 	mvn.w	r3, #5
 8005be6:	607b      	str	r3, [r7, #4]
 8005be8:	e00c      	b.n	8005c04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005bea:	4b0a      	ldr	r3, [pc, #40]	@ (8005c14 <osKernelInitialize+0x44>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d105      	bne.n	8005bfe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005bf2:	4b08      	ldr	r3, [pc, #32]	@ (8005c14 <osKernelInitialize+0x44>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	607b      	str	r3, [r7, #4]
 8005bfc:	e002      	b.n	8005c04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8005c02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c04:	687b      	ldr	r3, [r7, #4]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	20000bd4 	.word	0x20000bd4

08005c18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c1e:	f3ef 8305 	mrs	r3, IPSR
 8005c22:	603b      	str	r3, [r7, #0]
  return(result);
 8005c24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005c2a:	f06f 0305 	mvn.w	r3, #5
 8005c2e:	607b      	str	r3, [r7, #4]
 8005c30:	e010      	b.n	8005c54 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c32:	4b0b      	ldr	r3, [pc, #44]	@ (8005c60 <osKernelStart+0x48>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d109      	bne.n	8005c4e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005c3a:	f7ff ffbf 	bl	8005bbc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005c3e:	4b08      	ldr	r3, [pc, #32]	@ (8005c60 <osKernelStart+0x48>)
 8005c40:	2202      	movs	r2, #2
 8005c42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005c44:	f001 fce2 	bl	800760c <vTaskStartScheduler>
      stat = osOK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	607b      	str	r3, [r7, #4]
 8005c4c:	e002      	b.n	8005c54 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c54:	687b      	ldr	r3, [r7, #4]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	20000bd4 	.word	0x20000bd4

08005c64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08e      	sub	sp, #56	@ 0x38
 8005c68:	af04      	add	r7, sp, #16
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c70:	2300      	movs	r3, #0
 8005c72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c74:	f3ef 8305 	mrs	r3, IPSR
 8005c78:	617b      	str	r3, [r7, #20]
  return(result);
 8005c7a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d17e      	bne.n	8005d7e <osThreadNew+0x11a>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d07b      	beq.n	8005d7e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005c86:	2380      	movs	r3, #128	@ 0x80
 8005c88:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005c8a:	2318      	movs	r3, #24
 8005c8c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005c92:	f04f 33ff 	mov.w	r3, #4294967295
 8005c96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d045      	beq.n	8005d2a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <osThreadNew+0x48>
        name = attr->name;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d008      	beq.n	8005cd2 <osThreadNew+0x6e>
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	2b38      	cmp	r3, #56	@ 0x38
 8005cc4:	d805      	bhi.n	8005cd2 <osThreadNew+0x6e>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <osThreadNew+0x72>
        return (NULL);
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e054      	b.n	8005d80 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	089b      	lsrs	r3, r3, #2
 8005ce4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00e      	beq.n	8005d0c <osThreadNew+0xa8>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	2ba7      	cmp	r3, #167	@ 0xa7
 8005cf4:	d90a      	bls.n	8005d0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d006      	beq.n	8005d0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <osThreadNew+0xa8>
        mem = 1;
 8005d06:	2301      	movs	r3, #1
 8005d08:	61bb      	str	r3, [r7, #24]
 8005d0a:	e010      	b.n	8005d2e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10c      	bne.n	8005d2e <osThreadNew+0xca>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d108      	bne.n	8005d2e <osThreadNew+0xca>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d104      	bne.n	8005d2e <osThreadNew+0xca>
          mem = 0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	61bb      	str	r3, [r7, #24]
 8005d28:	e001      	b.n	8005d2e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d110      	bne.n	8005d56 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d3c:	9202      	str	r2, [sp, #8]
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	6a3a      	ldr	r2, [r7, #32]
 8005d48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f001 fa6a 	bl	8007224 <xTaskCreateStatic>
 8005d50:	4603      	mov	r3, r0
 8005d52:	613b      	str	r3, [r7, #16]
 8005d54:	e013      	b.n	8005d7e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d110      	bne.n	8005d7e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	f107 0310 	add.w	r3, r7, #16
 8005d64:	9301      	str	r3, [sp, #4]
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f001 fab8 	bl	80072e4 <xTaskCreate>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d001      	beq.n	8005d7e <osThreadNew+0x11a>
            hTask = NULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d7e:	693b      	ldr	r3, [r7, #16]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3728      	adds	r7, #40	@ 0x28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d90:	f3ef 8305 	mrs	r3, IPSR
 8005d94:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d96:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <osDelay+0x1c>
    stat = osErrorISR;
 8005d9c:	f06f 0305 	mvn.w	r3, #5
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	e007      	b.n	8005db4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f001 fbf6 	bl	80075a0 <vTaskDelay>
    }
  }

  return (stat);
 8005db4:	68fb      	ldr	r3, [r7, #12]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b08a      	sub	sp, #40	@ 0x28
 8005dc2:	af02      	add	r7, sp, #8
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dce:	f3ef 8305 	mrs	r3, IPSR
 8005dd2:	613b      	str	r3, [r7, #16]
  return(result);
 8005dd4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d175      	bne.n	8005ec6 <osSemaphoreNew+0x108>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d072      	beq.n	8005ec6 <osSemaphoreNew+0x108>
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d86e      	bhi.n	8005ec6 <osSemaphoreNew+0x108>
    mem = -1;
 8005de8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d015      	beq.n	8005e20 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d006      	beq.n	8005e0a <osSemaphoreNew+0x4c>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	2b4f      	cmp	r3, #79	@ 0x4f
 8005e02:	d902      	bls.n	8005e0a <osSemaphoreNew+0x4c>
        mem = 1;
 8005e04:	2301      	movs	r3, #1
 8005e06:	61bb      	str	r3, [r7, #24]
 8005e08:	e00c      	b.n	8005e24 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d108      	bne.n	8005e24 <osSemaphoreNew+0x66>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d104      	bne.n	8005e24 <osSemaphoreNew+0x66>
          mem = 0;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	e001      	b.n	8005e24 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005e20:	2300      	movs	r3, #0
 8005e22:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2a:	d04c      	beq.n	8005ec6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d128      	bne.n	8005e84 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d10a      	bne.n	8005e4e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	2203      	movs	r2, #3
 8005e3e:	9200      	str	r2, [sp, #0]
 8005e40:	2200      	movs	r2, #0
 8005e42:	2100      	movs	r1, #0
 8005e44:	2001      	movs	r0, #1
 8005e46:	f000 fa2b 	bl	80062a0 <xQueueGenericCreateStatic>
 8005e4a:	61f8      	str	r0, [r7, #28]
 8005e4c:	e005      	b.n	8005e5a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005e4e:	2203      	movs	r2, #3
 8005e50:	2100      	movs	r1, #0
 8005e52:	2001      	movs	r0, #1
 8005e54:	f000 faa1 	bl	800639a <xQueueGenericCreate>
 8005e58:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d022      	beq.n	8005ea6 <osSemaphoreNew+0xe8>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d01f      	beq.n	8005ea6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005e66:	2300      	movs	r3, #0
 8005e68:	2200      	movs	r2, #0
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	69f8      	ldr	r0, [r7, #28]
 8005e6e:	f000 fb61 	bl	8006534 <xQueueGenericSend>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d016      	beq.n	8005ea6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005e78:	69f8      	ldr	r0, [r7, #28]
 8005e7a:	f000 ffff 	bl	8006e7c <vQueueDelete>
            hSemaphore = NULL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	61fb      	str	r3, [r7, #28]
 8005e82:	e010      	b.n	8005ea6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d108      	bne.n	8005e9c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 fadf 	bl	8006456 <xQueueCreateCountingSemaphoreStatic>
 8005e98:	61f8      	str	r0, [r7, #28]
 8005e9a:	e004      	b.n	8005ea6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005e9c:	68b9      	ldr	r1, [r7, #8]
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 fb12 	bl	80064c8 <xQueueCreateCountingSemaphore>
 8005ea4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00c      	beq.n	8005ec6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <osSemaphoreNew+0xfc>
          name = attr->name;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	e001      	b.n	8005ebe <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005ebe:	6979      	ldr	r1, [r7, #20]
 8005ec0:	69f8      	ldr	r0, [r7, #28]
 8005ec2:	f001 f927 	bl	8007114 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005ec6:	69fb      	ldr	r3, [r7, #28]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3720      	adds	r7, #32
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d103      	bne.n	8005ef0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005ee8:	f06f 0303 	mvn.w	r3, #3
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	e039      	b.n	8005f64 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ef0:	f3ef 8305 	mrs	r3, IPSR
 8005ef4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d022      	beq.n	8005f42 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005f02:	f06f 0303 	mvn.w	r3, #3
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	e02c      	b.n	8005f64 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005f0e:	f107 0308 	add.w	r3, r7, #8
 8005f12:	461a      	mov	r2, r3
 8005f14:	2100      	movs	r1, #0
 8005f16:	6938      	ldr	r0, [r7, #16]
 8005f18:	f000 ff2e 	bl	8006d78 <xQueueReceiveFromISR>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d003      	beq.n	8005f2a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005f22:	f06f 0302 	mvn.w	r3, #2
 8005f26:	617b      	str	r3, [r7, #20]
 8005f28:	e01c      	b.n	8005f64 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d019      	beq.n	8005f64 <osSemaphoreAcquire+0x94>
 8005f30:	4b0f      	ldr	r3, [pc, #60]	@ (8005f70 <osSemaphoreAcquire+0xa0>)
 8005f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	e010      	b.n	8005f64 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005f42:	6839      	ldr	r1, [r7, #0]
 8005f44:	6938      	ldr	r0, [r7, #16]
 8005f46:	f000 fe07 	bl	8006b58 <xQueueSemaphoreTake>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d009      	beq.n	8005f64 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005f56:	f06f 0301 	mvn.w	r3, #1
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	e002      	b.n	8005f64 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005f5e:	f06f 0302 	mvn.w	r3, #2
 8005f62:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005f64:	697b      	ldr	r3, [r7, #20]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	e000ed04 	.word	0xe000ed04

08005f74 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d103      	bne.n	8005f92 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005f8a:	f06f 0303 	mvn.w	r3, #3
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	e02c      	b.n	8005fec <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f92:	f3ef 8305 	mrs	r3, IPSR
 8005f96:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f98:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d01a      	beq.n	8005fd4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005fa2:	f107 0308 	add.w	r3, r7, #8
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	6938      	ldr	r0, [r7, #16]
 8005faa:	f000 fc63 	bl	8006874 <xQueueGiveFromISR>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d003      	beq.n	8005fbc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005fb4:	f06f 0302 	mvn.w	r3, #2
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	e017      	b.n	8005fec <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d014      	beq.n	8005fec <osSemaphoreRelease+0x78>
 8005fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ff8 <osSemaphoreRelease+0x84>)
 8005fc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	e00b      	b.n	8005fec <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	2100      	movs	r1, #0
 8005fda:	6938      	ldr	r0, [r7, #16]
 8005fdc:	f000 faaa 	bl	8006534 <xQueueGenericSend>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d002      	beq.n	8005fec <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005fe6:	f06f 0302 	mvn.w	r3, #2
 8005fea:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005fec:	697b      	ldr	r3, [r7, #20]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	e000ed04 	.word	0xe000ed04

08005ffc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4a07      	ldr	r2, [pc, #28]	@ (8006028 <vApplicationGetIdleTaskMemory+0x2c>)
 800600c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	4a06      	ldr	r2, [pc, #24]	@ (800602c <vApplicationGetIdleTaskMemory+0x30>)
 8006012:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2280      	movs	r2, #128	@ 0x80
 8006018:	601a      	str	r2, [r3, #0]
}
 800601a:	bf00      	nop
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	20000bd8 	.word	0x20000bd8
 800602c:	20000c80 	.word	0x20000c80

08006030 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4a07      	ldr	r2, [pc, #28]	@ (800605c <vApplicationGetTimerTaskMemory+0x2c>)
 8006040:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4a06      	ldr	r2, [pc, #24]	@ (8006060 <vApplicationGetTimerTaskMemory+0x30>)
 8006046:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800604e:	601a      	str	r2, [r3, #0]
}
 8006050:	bf00      	nop
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	20000e80 	.word	0x20000e80
 8006060:	20000f28 	.word	0x20000f28

08006064 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f103 0208 	add.w	r2, r3, #8
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f04f 32ff 	mov.w	r2, #4294967295
 800607c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f103 0208 	add.w	r2, r3, #8
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f103 0208 	add.w	r2, r3, #8
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80060b2:	bf00      	nop
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060be:	b480      	push	{r7}
 80060c0:	b085      	sub	sp, #20
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	601a      	str	r2, [r3, #0]
}
 80060fa:	bf00      	nop
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006106:	b480      	push	{r7}
 8006108:	b085      	sub	sp, #20
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611c:	d103      	bne.n	8006126 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	e00c      	b.n	8006140 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	3308      	adds	r3, #8
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	e002      	b.n	8006134 <vListInsert+0x2e>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	429a      	cmp	r2, r3
 800613e:	d2f6      	bcs.n	800612e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	601a      	str	r2, [r3, #0]
}
 800616c:	bf00      	nop
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6892      	ldr	r2, [r2, #8]
 800618e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6852      	ldr	r2, [r2, #4]
 8006198:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d103      	bne.n	80061ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	1e5a      	subs	r2, r3, #1
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10b      	bne.n	80061f8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061f2:	bf00      	nop
 80061f4:	bf00      	nop
 80061f6:	e7fd      	b.n	80061f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80061f8:	f002 fcd6 	bl	8008ba8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006204:	68f9      	ldr	r1, [r7, #12]
 8006206:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006208:	fb01 f303 	mul.w	r3, r1, r3
 800620c:	441a      	add	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006228:	3b01      	subs	r3, #1
 800622a:	68f9      	ldr	r1, [r7, #12]
 800622c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800622e:	fb01 f303 	mul.w	r3, r1, r3
 8006232:	441a      	add	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	22ff      	movs	r2, #255	@ 0xff
 800623c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	22ff      	movs	r2, #255	@ 0xff
 8006244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d114      	bne.n	8006278 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d01a      	beq.n	800628c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3310      	adds	r3, #16
 800625a:	4618      	mov	r0, r3
 800625c:	f001 fc74 	bl	8007b48 <xTaskRemoveFromEventList>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d012      	beq.n	800628c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006266:	4b0d      	ldr	r3, [pc, #52]	@ (800629c <xQueueGenericReset+0xd0>)
 8006268:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	e009      	b.n	800628c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	3310      	adds	r3, #16
 800627c:	4618      	mov	r0, r3
 800627e:	f7ff fef1 	bl	8006064 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3324      	adds	r3, #36	@ 0x24
 8006286:	4618      	mov	r0, r3
 8006288:	f7ff feec 	bl	8006064 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800628c:	f002 fcbe 	bl	8008c0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006290:	2301      	movs	r3, #1
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	e000ed04 	.word	0xe000ed04

080062a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08e      	sub	sp, #56	@ 0x38
 80062a4:	af02      	add	r7, sp, #8
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10b      	bne.n	80062cc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80062c6:	bf00      	nop
 80062c8:	bf00      	nop
 80062ca:	e7fd      	b.n	80062c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10b      	bne.n	80062ea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop
 80062e8:	e7fd      	b.n	80062e6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <xQueueGenericCreateStatic+0x56>
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <xQueueGenericCreateStatic+0x5a>
 80062f6:	2301      	movs	r3, #1
 80062f8:	e000      	b.n	80062fc <xQueueGenericCreateStatic+0x5c>
 80062fa:	2300      	movs	r3, #0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10b      	bne.n	8006318 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	623b      	str	r3, [r7, #32]
}
 8006312:	bf00      	nop
 8006314:	bf00      	nop
 8006316:	e7fd      	b.n	8006314 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d102      	bne.n	8006324 <xQueueGenericCreateStatic+0x84>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <xQueueGenericCreateStatic+0x88>
 8006324:	2301      	movs	r3, #1
 8006326:	e000      	b.n	800632a <xQueueGenericCreateStatic+0x8a>
 8006328:	2300      	movs	r3, #0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10b      	bne.n	8006346 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	61fb      	str	r3, [r7, #28]
}
 8006340:	bf00      	nop
 8006342:	bf00      	nop
 8006344:	e7fd      	b.n	8006342 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006346:	2350      	movs	r3, #80	@ 0x50
 8006348:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2b50      	cmp	r3, #80	@ 0x50
 800634e:	d00b      	beq.n	8006368 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	61bb      	str	r3, [r7, #24]
}
 8006362:	bf00      	nop
 8006364:	bf00      	nop
 8006366:	e7fd      	b.n	8006364 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006368:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800636e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00d      	beq.n	8006390 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800637c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	4613      	mov	r3, r2
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	68b9      	ldr	r1, [r7, #8]
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 f840 	bl	8006410 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006392:	4618      	mov	r0, r3
 8006394:	3730      	adds	r7, #48	@ 0x30
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800639a:	b580      	push	{r7, lr}
 800639c:	b08a      	sub	sp, #40	@ 0x28
 800639e:	af02      	add	r7, sp, #8
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	4613      	mov	r3, r2
 80063a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10b      	bne.n	80063c6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	613b      	str	r3, [r7, #16]
}
 80063c0:	bf00      	nop
 80063c2:	bf00      	nop
 80063c4:	e7fd      	b.n	80063c2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	fb02 f303 	mul.w	r3, r2, r3
 80063ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	3350      	adds	r3, #80	@ 0x50
 80063d4:	4618      	mov	r0, r3
 80063d6:	f002 fd09 	bl	8008dec <pvPortMalloc>
 80063da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d011      	beq.n	8006406 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	3350      	adds	r3, #80	@ 0x50
 80063ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063f4:	79fa      	ldrb	r2, [r7, #7]
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	4613      	mov	r3, r2
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	68b9      	ldr	r1, [r7, #8]
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 f805 	bl	8006410 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006406:	69bb      	ldr	r3, [r7, #24]
	}
 8006408:	4618      	mov	r0, r3
 800640a:	3720      	adds	r7, #32
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
 800641c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d103      	bne.n	800642c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	69ba      	ldr	r2, [r7, #24]
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	e002      	b.n	8006432 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800643e:	2101      	movs	r1, #1
 8006440:	69b8      	ldr	r0, [r7, #24]
 8006442:	f7ff fec3 	bl	80061cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	78fa      	ldrb	r2, [r7, #3]
 800644a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800644e:	bf00      	nop
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006456:	b580      	push	{r7, lr}
 8006458:	b08a      	sub	sp, #40	@ 0x28
 800645a:	af02      	add	r7, sp, #8
 800645c:	60f8      	str	r0, [r7, #12]
 800645e:	60b9      	str	r1, [r7, #8]
 8006460:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10b      	bne.n	8006480 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8006468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	61bb      	str	r3, [r7, #24]
}
 800647a:	bf00      	nop
 800647c:	bf00      	nop
 800647e:	e7fd      	b.n	800647c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	429a      	cmp	r2, r3
 8006486:	d90b      	bls.n	80064a0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	617b      	str	r3, [r7, #20]
}
 800649a:	bf00      	nop
 800649c:	bf00      	nop
 800649e:	e7fd      	b.n	800649c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80064a0:	2302      	movs	r3, #2
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	2100      	movs	r1, #0
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f7ff fef8 	bl	80062a0 <xQueueGenericCreateStatic>
 80064b0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80064be:	69fb      	ldr	r3, [r7, #28]
	}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3720      	adds	r7, #32
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10b      	bne.n	80064f0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	613b      	str	r3, [r7, #16]
}
 80064ea:	bf00      	nop
 80064ec:	bf00      	nop
 80064ee:	e7fd      	b.n	80064ec <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d90b      	bls.n	8006510 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80064f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	60fb      	str	r3, [r7, #12]
}
 800650a:	bf00      	nop
 800650c:	bf00      	nop
 800650e:	e7fd      	b.n	800650c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006510:	2202      	movs	r2, #2
 8006512:	2100      	movs	r1, #0
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7ff ff40 	bl	800639a <xQueueGenericCreate>
 800651a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006528:	697b      	ldr	r3, [r7, #20]
	}
 800652a:	4618      	mov	r0, r3
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b08e      	sub	sp, #56	@ 0x38
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006542:	2300      	movs	r3, #0
 8006544:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10b      	bne.n	8006568 <xQueueGenericSend+0x34>
	__asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006562:	bf00      	nop
 8006564:	bf00      	nop
 8006566:	e7fd      	b.n	8006564 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d103      	bne.n	8006576 <xQueueGenericSend+0x42>
 800656e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <xQueueGenericSend+0x46>
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <xQueueGenericSend+0x48>
 800657a:	2300      	movs	r3, #0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10b      	bne.n	8006598 <xQueueGenericSend+0x64>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006592:	bf00      	nop
 8006594:	bf00      	nop
 8006596:	e7fd      	b.n	8006594 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	2b02      	cmp	r3, #2
 800659c:	d103      	bne.n	80065a6 <xQueueGenericSend+0x72>
 800659e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d101      	bne.n	80065aa <xQueueGenericSend+0x76>
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <xQueueGenericSend+0x78>
 80065aa:	2300      	movs	r3, #0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10b      	bne.n	80065c8 <xQueueGenericSend+0x94>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	623b      	str	r3, [r7, #32]
}
 80065c2:	bf00      	nop
 80065c4:	bf00      	nop
 80065c6:	e7fd      	b.n	80065c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065c8:	f001 fc84 	bl	8007ed4 <xTaskGetSchedulerState>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d102      	bne.n	80065d8 <xQueueGenericSend+0xa4>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <xQueueGenericSend+0xa8>
 80065d8:	2301      	movs	r3, #1
 80065da:	e000      	b.n	80065de <xQueueGenericSend+0xaa>
 80065dc:	2300      	movs	r3, #0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10b      	bne.n	80065fa <xQueueGenericSend+0xc6>
	__asm volatile
 80065e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	61fb      	str	r3, [r7, #28]
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop
 80065f8:	e7fd      	b.n	80065f6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065fa:	f002 fad5 	bl	8008ba8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006600:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006606:	429a      	cmp	r2, r3
 8006608:	d302      	bcc.n	8006610 <xQueueGenericSend+0xdc>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b02      	cmp	r3, #2
 800660e:	d129      	bne.n	8006664 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006616:	f000 fc6d 	bl	8006ef4 <prvCopyDataToQueue>
 800661a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800661c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006620:	2b00      	cmp	r3, #0
 8006622:	d010      	beq.n	8006646 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006626:	3324      	adds	r3, #36	@ 0x24
 8006628:	4618      	mov	r0, r3
 800662a:	f001 fa8d 	bl	8007b48 <xTaskRemoveFromEventList>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d013      	beq.n	800665c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006634:	4b3f      	ldr	r3, [pc, #252]	@ (8006734 <xQueueGenericSend+0x200>)
 8006636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	e00a      	b.n	800665c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d007      	beq.n	800665c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800664c:	4b39      	ldr	r3, [pc, #228]	@ (8006734 <xQueueGenericSend+0x200>)
 800664e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800665c:	f002 fad6 	bl	8008c0c <vPortExitCritical>
				return pdPASS;
 8006660:	2301      	movs	r3, #1
 8006662:	e063      	b.n	800672c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d103      	bne.n	8006672 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800666a:	f002 facf 	bl	8008c0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800666e:	2300      	movs	r3, #0
 8006670:	e05c      	b.n	800672c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006674:	2b00      	cmp	r3, #0
 8006676:	d106      	bne.n	8006686 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006678:	f107 0314 	add.w	r3, r7, #20
 800667c:	4618      	mov	r0, r3
 800667e:	f001 fac7 	bl	8007c10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006682:	2301      	movs	r3, #1
 8006684:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006686:	f002 fac1 	bl	8008c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800668a:	f001 f82f 	bl	80076ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800668e:	f002 fa8b 	bl	8008ba8 <vPortEnterCritical>
 8006692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006694:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006698:	b25b      	sxtb	r3, r3
 800669a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669e:	d103      	bne.n	80066a8 <xQueueGenericSend+0x174>
 80066a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066ae:	b25b      	sxtb	r3, r3
 80066b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b4:	d103      	bne.n	80066be <xQueueGenericSend+0x18a>
 80066b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066be:	f002 faa5 	bl	8008c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066c2:	1d3a      	adds	r2, r7, #4
 80066c4:	f107 0314 	add.w	r3, r7, #20
 80066c8:	4611      	mov	r1, r2
 80066ca:	4618      	mov	r0, r3
 80066cc:	f001 fab6 	bl	8007c3c <xTaskCheckForTimeOut>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d124      	bne.n	8006720 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066d8:	f000 fd04 	bl	80070e4 <prvIsQueueFull>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d018      	beq.n	8006714 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e4:	3310      	adds	r3, #16
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	4611      	mov	r1, r2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f001 f9da 	bl	8007aa4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066f2:	f000 fc8f 	bl	8007014 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066f6:	f001 f807 	bl	8007708 <xTaskResumeAll>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f47f af7c 	bne.w	80065fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006702:	4b0c      	ldr	r3, [pc, #48]	@ (8006734 <xQueueGenericSend+0x200>)
 8006704:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	e772      	b.n	80065fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006714:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006716:	f000 fc7d 	bl	8007014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800671a:	f000 fff5 	bl	8007708 <xTaskResumeAll>
 800671e:	e76c      	b.n	80065fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006720:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006722:	f000 fc77 	bl	8007014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006726:	f000 ffef 	bl	8007708 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800672a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800672c:	4618      	mov	r0, r3
 800672e:	3738      	adds	r7, #56	@ 0x38
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	e000ed04 	.word	0xe000ed04

08006738 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b090      	sub	sp, #64	@ 0x40
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
 8006744:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800674a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10b      	bne.n	8006768 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006762:	bf00      	nop
 8006764:	bf00      	nop
 8006766:	e7fd      	b.n	8006764 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d103      	bne.n	8006776 <xQueueGenericSendFromISR+0x3e>
 800676e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <xQueueGenericSendFromISR+0x42>
 8006776:	2301      	movs	r3, #1
 8006778:	e000      	b.n	800677c <xQueueGenericSendFromISR+0x44>
 800677a:	2300      	movs	r3, #0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10b      	bne.n	8006798 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006792:	bf00      	nop
 8006794:	bf00      	nop
 8006796:	e7fd      	b.n	8006794 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2b02      	cmp	r3, #2
 800679c:	d103      	bne.n	80067a6 <xQueueGenericSendFromISR+0x6e>
 800679e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d101      	bne.n	80067aa <xQueueGenericSendFromISR+0x72>
 80067a6:	2301      	movs	r3, #1
 80067a8:	e000      	b.n	80067ac <xQueueGenericSendFromISR+0x74>
 80067aa:	2300      	movs	r3, #0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10b      	bne.n	80067c8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	623b      	str	r3, [r7, #32]
}
 80067c2:	bf00      	nop
 80067c4:	bf00      	nop
 80067c6:	e7fd      	b.n	80067c4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067c8:	f002 face 	bl	8008d68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80067cc:	f3ef 8211 	mrs	r2, BASEPRI
 80067d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	61fa      	str	r2, [r7, #28]
 80067e2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80067e4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067e6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d302      	bcc.n	80067fa <xQueueGenericSendFromISR+0xc2>
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d12f      	bne.n	800685a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006800:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006808:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	68b9      	ldr	r1, [r7, #8]
 800680e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006810:	f000 fb70 	bl	8006ef4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006814:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681c:	d112      	bne.n	8006844 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800681e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006822:	2b00      	cmp	r3, #0
 8006824:	d016      	beq.n	8006854 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006828:	3324      	adds	r3, #36	@ 0x24
 800682a:	4618      	mov	r0, r3
 800682c:	f001 f98c 	bl	8007b48 <xTaskRemoveFromEventList>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00e      	beq.n	8006854 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00b      	beq.n	8006854 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	e007      	b.n	8006854 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006844:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006848:	3301      	adds	r3, #1
 800684a:	b2db      	uxtb	r3, r3
 800684c:	b25a      	sxtb	r2, r3
 800684e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006854:	2301      	movs	r3, #1
 8006856:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006858:	e001      	b.n	800685e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800685a:	2300      	movs	r3, #0
 800685c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800685e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006860:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006868:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800686a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800686c:	4618      	mov	r0, r3
 800686e:	3740      	adds	r7, #64	@ 0x40
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08e      	sub	sp, #56	@ 0x38
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10b      	bne.n	80068a0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	623b      	str	r3, [r7, #32]
}
 800689a:	bf00      	nop
 800689c:	bf00      	nop
 800689e:	e7fd      	b.n	800689c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80068a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00b      	beq.n	80068c0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	61fb      	str	r3, [r7, #28]
}
 80068ba:	bf00      	nop
 80068bc:	bf00      	nop
 80068be:	e7fd      	b.n	80068bc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80068c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d103      	bne.n	80068d0 <xQueueGiveFromISR+0x5c>
 80068c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <xQueueGiveFromISR+0x60>
 80068d0:	2301      	movs	r3, #1
 80068d2:	e000      	b.n	80068d6 <xQueueGiveFromISR+0x62>
 80068d4:	2300      	movs	r3, #0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10b      	bne.n	80068f2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	61bb      	str	r3, [r7, #24]
}
 80068ec:	bf00      	nop
 80068ee:	bf00      	nop
 80068f0:	e7fd      	b.n	80068ee <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068f2:	f002 fa39 	bl	8008d68 <vPortValidateInterruptPriority>
	__asm volatile
 80068f6:	f3ef 8211 	mrs	r2, BASEPRI
 80068fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	617a      	str	r2, [r7, #20]
 800690c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800690e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006910:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006916:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800691c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800691e:	429a      	cmp	r2, r3
 8006920:	d22b      	bcs.n	800697a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006924:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006928:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800692c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006932:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006934:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693c:	d112      	bne.n	8006964 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006942:	2b00      	cmp	r3, #0
 8006944:	d016      	beq.n	8006974 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006948:	3324      	adds	r3, #36	@ 0x24
 800694a:	4618      	mov	r0, r3
 800694c:	f001 f8fc 	bl	8007b48 <xTaskRemoveFromEventList>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00e      	beq.n	8006974 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00b      	beq.n	8006974 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2201      	movs	r2, #1
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	e007      	b.n	8006974 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006968:	3301      	adds	r3, #1
 800696a:	b2db      	uxtb	r3, r3
 800696c:	b25a      	sxtb	r2, r3
 800696e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006974:	2301      	movs	r3, #1
 8006976:	637b      	str	r3, [r7, #52]	@ 0x34
 8006978:	e001      	b.n	800697e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800697a:	2300      	movs	r3, #0
 800697c:	637b      	str	r3, [r7, #52]	@ 0x34
 800697e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006980:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f383 8811 	msr	BASEPRI, r3
}
 8006988:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800698a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800698c:	4618      	mov	r0, r3
 800698e:	3738      	adds	r7, #56	@ 0x38
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b08c      	sub	sp, #48	@ 0x30
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80069a0:	2300      	movs	r3, #0
 80069a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10b      	bne.n	80069c6 <xQueueReceive+0x32>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	623b      	str	r3, [r7, #32]
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	e7fd      	b.n	80069c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d103      	bne.n	80069d4 <xQueueReceive+0x40>
 80069cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <xQueueReceive+0x44>
 80069d4:	2301      	movs	r3, #1
 80069d6:	e000      	b.n	80069da <xQueueReceive+0x46>
 80069d8:	2300      	movs	r3, #0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10b      	bne.n	80069f6 <xQueueReceive+0x62>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	61fb      	str	r3, [r7, #28]
}
 80069f0:	bf00      	nop
 80069f2:	bf00      	nop
 80069f4:	e7fd      	b.n	80069f2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069f6:	f001 fa6d 	bl	8007ed4 <xTaskGetSchedulerState>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d102      	bne.n	8006a06 <xQueueReceive+0x72>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <xQueueReceive+0x76>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <xQueueReceive+0x78>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10b      	bne.n	8006a28 <xQueueReceive+0x94>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	61bb      	str	r3, [r7, #24]
}
 8006a22:	bf00      	nop
 8006a24:	bf00      	nop
 8006a26:	e7fd      	b.n	8006a24 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a28:	f002 f8be 	bl	8008ba8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a30:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01f      	beq.n	8006a78 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a38:	68b9      	ldr	r1, [r7, #8]
 8006a3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a3c:	f000 fac4 	bl	8006fc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a42:	1e5a      	subs	r2, r3, #1
 8006a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a46:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00f      	beq.n	8006a70 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a52:	3310      	adds	r3, #16
 8006a54:	4618      	mov	r0, r3
 8006a56:	f001 f877 	bl	8007b48 <xTaskRemoveFromEventList>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d007      	beq.n	8006a70 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a60:	4b3c      	ldr	r3, [pc, #240]	@ (8006b54 <xQueueReceive+0x1c0>)
 8006a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a70:	f002 f8cc 	bl	8008c0c <vPortExitCritical>
				return pdPASS;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e069      	b.n	8006b4c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d103      	bne.n	8006a86 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a7e:	f002 f8c5 	bl	8008c0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a82:	2300      	movs	r3, #0
 8006a84:	e062      	b.n	8006b4c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d106      	bne.n	8006a9a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a8c:	f107 0310 	add.w	r3, r7, #16
 8006a90:	4618      	mov	r0, r3
 8006a92:	f001 f8bd 	bl	8007c10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a96:	2301      	movs	r3, #1
 8006a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a9a:	f002 f8b7 	bl	8008c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a9e:	f000 fe25 	bl	80076ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006aa2:	f002 f881 	bl	8008ba8 <vPortEnterCritical>
 8006aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006aac:	b25b      	sxtb	r3, r3
 8006aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab2:	d103      	bne.n	8006abc <xQueueReceive+0x128>
 8006ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006abe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ac2:	b25b      	sxtb	r3, r3
 8006ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac8:	d103      	bne.n	8006ad2 <xQueueReceive+0x13e>
 8006aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ad2:	f002 f89b 	bl	8008c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ad6:	1d3a      	adds	r2, r7, #4
 8006ad8:	f107 0310 	add.w	r3, r7, #16
 8006adc:	4611      	mov	r1, r2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 f8ac 	bl	8007c3c <xTaskCheckForTimeOut>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d123      	bne.n	8006b32 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006aec:	f000 fae4 	bl	80070b8 <prvIsQueueEmpty>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d017      	beq.n	8006b26 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af8:	3324      	adds	r3, #36	@ 0x24
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	4611      	mov	r1, r2
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 ffd0 	bl	8007aa4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b06:	f000 fa85 	bl	8007014 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b0a:	f000 fdfd 	bl	8007708 <xTaskResumeAll>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d189      	bne.n	8006a28 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006b14:	4b0f      	ldr	r3, [pc, #60]	@ (8006b54 <xQueueReceive+0x1c0>)
 8006b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	e780      	b.n	8006a28 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b28:	f000 fa74 	bl	8007014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b2c:	f000 fdec 	bl	8007708 <xTaskResumeAll>
 8006b30:	e77a      	b.n	8006a28 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b34:	f000 fa6e 	bl	8007014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b38:	f000 fde6 	bl	8007708 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b3e:	f000 fabb 	bl	80070b8 <prvIsQueueEmpty>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f43f af6f 	beq.w	8006a28 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3730      	adds	r7, #48	@ 0x30
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	e000ed04 	.word	0xe000ed04

08006b58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08e      	sub	sp, #56	@ 0x38
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b62:	2300      	movs	r3, #0
 8006b64:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10b      	bne.n	8006b8c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	623b      	str	r3, [r7, #32]
}
 8006b86:	bf00      	nop
 8006b88:	bf00      	nop
 8006b8a:	e7fd      	b.n	8006b88 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00b      	beq.n	8006bac <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	61fb      	str	r3, [r7, #28]
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	e7fd      	b.n	8006ba8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bac:	f001 f992 	bl	8007ed4 <xTaskGetSchedulerState>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d102      	bne.n	8006bbc <xQueueSemaphoreTake+0x64>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <xQueueSemaphoreTake+0x68>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e000      	b.n	8006bc2 <xQueueSemaphoreTake+0x6a>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10b      	bne.n	8006bde <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bca:	f383 8811 	msr	BASEPRI, r3
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	61bb      	str	r3, [r7, #24]
}
 8006bd8:	bf00      	nop
 8006bda:	bf00      	nop
 8006bdc:	e7fd      	b.n	8006bda <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bde:	f001 ffe3 	bl	8008ba8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d024      	beq.n	8006c38 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf0:	1e5a      	subs	r2, r3, #1
 8006bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d104      	bne.n	8006c08 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006bfe:	f001 fae3 	bl	80081c8 <pvTaskIncrementMutexHeldCount>
 8006c02:	4602      	mov	r2, r0
 8006c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c06:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00f      	beq.n	8006c30 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c12:	3310      	adds	r3, #16
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 ff97 	bl	8007b48 <xTaskRemoveFromEventList>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d007      	beq.n	8006c30 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c20:	4b54      	ldr	r3, [pc, #336]	@ (8006d74 <xQueueSemaphoreTake+0x21c>)
 8006c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c30:	f001 ffec 	bl	8008c0c <vPortExitCritical>
				return pdPASS;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e098      	b.n	8006d6a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d112      	bne.n	8006c64 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00b      	beq.n	8006c5c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	617b      	str	r3, [r7, #20]
}
 8006c56:	bf00      	nop
 8006c58:	bf00      	nop
 8006c5a:	e7fd      	b.n	8006c58 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006c5c:	f001 ffd6 	bl	8008c0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c60:	2300      	movs	r3, #0
 8006c62:	e082      	b.n	8006d6a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d106      	bne.n	8006c78 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c6a:	f107 030c 	add.w	r3, r7, #12
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 ffce 	bl	8007c10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c74:	2301      	movs	r3, #1
 8006c76:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c78:	f001 ffc8 	bl	8008c0c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c7c:	f000 fd36 	bl	80076ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c80:	f001 ff92 	bl	8008ba8 <vPortEnterCritical>
 8006c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c8a:	b25b      	sxtb	r3, r3
 8006c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c90:	d103      	bne.n	8006c9a <xQueueSemaphoreTake+0x142>
 8006c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ca0:	b25b      	sxtb	r3, r3
 8006ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca6:	d103      	bne.n	8006cb0 <xQueueSemaphoreTake+0x158>
 8006ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cb0:	f001 ffac 	bl	8008c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cb4:	463a      	mov	r2, r7
 8006cb6:	f107 030c 	add.w	r3, r7, #12
 8006cba:	4611      	mov	r1, r2
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 ffbd 	bl	8007c3c <xTaskCheckForTimeOut>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d132      	bne.n	8006d2e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cca:	f000 f9f5 	bl	80070b8 <prvIsQueueEmpty>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d026      	beq.n	8006d22 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d109      	bne.n	8006cf0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006cdc:	f001 ff64 	bl	8008ba8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f001 f913 	bl	8007f10 <xTaskPriorityInherit>
 8006cea:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006cec:	f001 ff8e 	bl	8008c0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf2:	3324      	adds	r3, #36	@ 0x24
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 fed3 	bl	8007aa4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cfe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d00:	f000 f988 	bl	8007014 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d04:	f000 fd00 	bl	8007708 <xTaskResumeAll>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f47f af67 	bne.w	8006bde <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006d10:	4b18      	ldr	r3, [pc, #96]	@ (8006d74 <xQueueSemaphoreTake+0x21c>)
 8006d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	e75d      	b.n	8006bde <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006d22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d24:	f000 f976 	bl	8007014 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d28:	f000 fcee 	bl	8007708 <xTaskResumeAll>
 8006d2c:	e757      	b.n	8006bde <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006d2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d30:	f000 f970 	bl	8007014 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d34:	f000 fce8 	bl	8007708 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d3a:	f000 f9bd 	bl	80070b8 <prvIsQueueEmpty>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f43f af4c 	beq.w	8006bde <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00d      	beq.n	8006d68 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006d4c:	f001 ff2c 	bl	8008ba8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d52:	f000 f8b7 	bl	8006ec4 <prvGetDisinheritPriorityAfterTimeout>
 8006d56:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f001 f9ae 	bl	80080c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006d64:	f001 ff52 	bl	8008c0c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3738      	adds	r7, #56	@ 0x38
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	e000ed04 	.word	0xe000ed04

08006d78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b08e      	sub	sp, #56	@ 0x38
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10b      	bne.n	8006da6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	623b      	str	r3, [r7, #32]
}
 8006da0:	bf00      	nop
 8006da2:	bf00      	nop
 8006da4:	e7fd      	b.n	8006da2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d103      	bne.n	8006db4 <xQueueReceiveFromISR+0x3c>
 8006dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <xQueueReceiveFromISR+0x40>
 8006db4:	2301      	movs	r3, #1
 8006db6:	e000      	b.n	8006dba <xQueueReceiveFromISR+0x42>
 8006db8:	2300      	movs	r3, #0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10b      	bne.n	8006dd6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	61fb      	str	r3, [r7, #28]
}
 8006dd0:	bf00      	nop
 8006dd2:	bf00      	nop
 8006dd4:	e7fd      	b.n	8006dd2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dd6:	f001 ffc7 	bl	8008d68 <vPortValidateInterruptPriority>
	__asm volatile
 8006dda:	f3ef 8211 	mrs	r2, BASEPRI
 8006dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	61ba      	str	r2, [r7, #24]
 8006df0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006df2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d02f      	beq.n	8006e62 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e0c:	68b9      	ldr	r1, [r7, #8]
 8006e0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e10:	f000 f8da 	bl	8006fc8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e16:	1e5a      	subs	r2, r3, #1
 8006e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006e1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e24:	d112      	bne.n	8006e4c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d016      	beq.n	8006e5c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e30:	3310      	adds	r3, #16
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fe88 	bl	8007b48 <xTaskRemoveFromEventList>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00e      	beq.n	8006e5c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00b      	beq.n	8006e5c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	e007      	b.n	8006e5c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e50:	3301      	adds	r3, #1
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	b25a      	sxtb	r2, r3
 8006e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e60:	e001      	b.n	8006e66 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e68:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f383 8811 	msr	BASEPRI, r3
}
 8006e70:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3738      	adds	r7, #56	@ 0x38
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10b      	bne.n	8006ea6 <vQueueDelete+0x2a>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	60bb      	str	r3, [r7, #8]
}
 8006ea0:	bf00      	nop
 8006ea2:	bf00      	nop
 8006ea4:	e7fd      	b.n	8006ea2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 f95e 	bl	8007168 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d102      	bne.n	8006ebc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f002 f866 	bl	8008f88 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006ebc:	bf00      	nop
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d006      	beq.n	8006ee2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006ede:	60fb      	str	r3, [r7, #12]
 8006ee0:	e001      	b.n	8006ee6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
	}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f00:	2300      	movs	r3, #0
 8006f02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10d      	bne.n	8006f2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d14d      	bne.n	8006fb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f001 f85e 	bl	8007fe0 <xTaskPriorityDisinherit>
 8006f24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	609a      	str	r2, [r3, #8]
 8006f2c:	e043      	b.n	8006fb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d119      	bne.n	8006f68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6858      	ldr	r0, [r3, #4]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	f002 fa00 	bl	8009344 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4c:	441a      	add	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d32b      	bcc.n	8006fb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	605a      	str	r2, [r3, #4]
 8006f66:	e026      	b.n	8006fb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	68d8      	ldr	r0, [r3, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f70:	461a      	mov	r2, r3
 8006f72:	68b9      	ldr	r1, [r7, #8]
 8006f74:	f002 f9e6 	bl	8009344 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f80:	425b      	negs	r3, r3
 8006f82:	441a      	add	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	68da      	ldr	r2, [r3, #12]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d207      	bcs.n	8006fa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f9c:	425b      	negs	r3, r3
 8006f9e:	441a      	add	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d105      	bne.n	8006fb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006fbe:	697b      	ldr	r3, [r7, #20]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d018      	beq.n	800700c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe2:	441a      	add	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68da      	ldr	r2, [r3, #12]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d303      	bcc.n	8006ffc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68d9      	ldr	r1, [r3, #12]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007004:	461a      	mov	r2, r3
 8007006:	6838      	ldr	r0, [r7, #0]
 8007008:	f002 f99c 	bl	8009344 <memcpy>
	}
}
 800700c:	bf00      	nop
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800701c:	f001 fdc4 	bl	8008ba8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007026:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007028:	e011      	b.n	800704e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800702e:	2b00      	cmp	r3, #0
 8007030:	d012      	beq.n	8007058 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3324      	adds	r3, #36	@ 0x24
 8007036:	4618      	mov	r0, r3
 8007038:	f000 fd86 	bl	8007b48 <xTaskRemoveFromEventList>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007042:	f000 fe5f 	bl	8007d04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007046:	7bfb      	ldrb	r3, [r7, #15]
 8007048:	3b01      	subs	r3, #1
 800704a:	b2db      	uxtb	r3, r3
 800704c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800704e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007052:	2b00      	cmp	r3, #0
 8007054:	dce9      	bgt.n	800702a <prvUnlockQueue+0x16>
 8007056:	e000      	b.n	800705a <prvUnlockQueue+0x46>
					break;
 8007058:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	22ff      	movs	r2, #255	@ 0xff
 800705e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007062:	f001 fdd3 	bl	8008c0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007066:	f001 fd9f 	bl	8008ba8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007070:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007072:	e011      	b.n	8007098 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d012      	beq.n	80070a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3310      	adds	r3, #16
 8007080:	4618      	mov	r0, r3
 8007082:	f000 fd61 	bl	8007b48 <xTaskRemoveFromEventList>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800708c:	f000 fe3a 	bl	8007d04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007090:	7bbb      	ldrb	r3, [r7, #14]
 8007092:	3b01      	subs	r3, #1
 8007094:	b2db      	uxtb	r3, r3
 8007096:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007098:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800709c:	2b00      	cmp	r3, #0
 800709e:	dce9      	bgt.n	8007074 <prvUnlockQueue+0x60>
 80070a0:	e000      	b.n	80070a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80070a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	22ff      	movs	r2, #255	@ 0xff
 80070a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80070ac:	f001 fdae 	bl	8008c0c <vPortExitCritical>
}
 80070b0:	bf00      	nop
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070c0:	f001 fd72 	bl	8008ba8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d102      	bne.n	80070d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070cc:	2301      	movs	r3, #1
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	e001      	b.n	80070d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070d2:	2300      	movs	r3, #0
 80070d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070d6:	f001 fd99 	bl	8008c0c <vPortExitCritical>

	return xReturn;
 80070da:	68fb      	ldr	r3, [r7, #12]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070ec:	f001 fd5c 	bl	8008ba8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d102      	bne.n	8007102 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070fc:	2301      	movs	r3, #1
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	e001      	b.n	8007106 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007106:	f001 fd81 	bl	8008c0c <vPortExitCritical>

	return xReturn;
 800710a:	68fb      	ldr	r3, [r7, #12]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800711e:	2300      	movs	r3, #0
 8007120:	60fb      	str	r3, [r7, #12]
 8007122:	e014      	b.n	800714e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007124:	4a0f      	ldr	r2, [pc, #60]	@ (8007164 <vQueueAddToRegistry+0x50>)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10b      	bne.n	8007148 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007130:	490c      	ldr	r1, [pc, #48]	@ (8007164 <vQueueAddToRegistry+0x50>)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800713a:	4a0a      	ldr	r2, [pc, #40]	@ (8007164 <vQueueAddToRegistry+0x50>)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	4413      	add	r3, r2
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007146:	e006      	b.n	8007156 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3301      	adds	r3, #1
 800714c:	60fb      	str	r3, [r7, #12]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b07      	cmp	r3, #7
 8007152:	d9e7      	bls.n	8007124 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007154:	bf00      	nop
 8007156:	bf00      	nop
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20001328 	.word	0x20001328

08007168 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007170:	2300      	movs	r3, #0
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	e016      	b.n	80071a4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007176:	4a10      	ldr	r2, [pc, #64]	@ (80071b8 <vQueueUnregisterQueue+0x50>)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	4413      	add	r3, r2
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	429a      	cmp	r2, r3
 8007184:	d10b      	bne.n	800719e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007186:	4a0c      	ldr	r2, [pc, #48]	@ (80071b8 <vQueueUnregisterQueue+0x50>)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2100      	movs	r1, #0
 800718c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007190:	4a09      	ldr	r2, [pc, #36]	@ (80071b8 <vQueueUnregisterQueue+0x50>)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	4413      	add	r3, r2
 8007198:	2200      	movs	r2, #0
 800719a:	605a      	str	r2, [r3, #4]
				break;
 800719c:	e006      	b.n	80071ac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	3301      	adds	r3, #1
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b07      	cmp	r3, #7
 80071a8:	d9e5      	bls.n	8007176 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80071aa:	bf00      	nop
 80071ac:	bf00      	nop
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	20001328 	.word	0x20001328

080071bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80071cc:	f001 fcec 	bl	8008ba8 <vPortEnterCritical>
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071d6:	b25b      	sxtb	r3, r3
 80071d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071dc:	d103      	bne.n	80071e6 <vQueueWaitForMessageRestricted+0x2a>
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071ec:	b25b      	sxtb	r3, r3
 80071ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f2:	d103      	bne.n	80071fc <vQueueWaitForMessageRestricted+0x40>
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071fc:	f001 fd06 	bl	8008c0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007204:	2b00      	cmp	r3, #0
 8007206:	d106      	bne.n	8007216 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	3324      	adds	r3, #36	@ 0x24
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	68b9      	ldr	r1, [r7, #8]
 8007210:	4618      	mov	r0, r3
 8007212:	f000 fc6d 	bl	8007af0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007216:	6978      	ldr	r0, [r7, #20]
 8007218:	f7ff fefc 	bl	8007014 <prvUnlockQueue>
	}
 800721c:	bf00      	nop
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08e      	sub	sp, #56	@ 0x38
 8007228:	af04      	add	r7, sp, #16
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10b      	bne.n	8007250 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	623b      	str	r3, [r7, #32]
}
 800724a:	bf00      	nop
 800724c:	bf00      	nop
 800724e:	e7fd      	b.n	800724c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10b      	bne.n	800726e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	61fb      	str	r3, [r7, #28]
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop
 800726c:	e7fd      	b.n	800726a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800726e:	23a8      	movs	r3, #168	@ 0xa8
 8007270:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	2ba8      	cmp	r3, #168	@ 0xa8
 8007276:	d00b      	beq.n	8007290 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	61bb      	str	r3, [r7, #24]
}
 800728a:	bf00      	nop
 800728c:	bf00      	nop
 800728e:	e7fd      	b.n	800728c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007290:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01e      	beq.n	80072d6 <xTaskCreateStatic+0xb2>
 8007298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800729a:	2b00      	cmp	r3, #0
 800729c:	d01b      	beq.n	80072d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800729e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80072a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80072a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80072b0:	2300      	movs	r3, #0
 80072b2:	9303      	str	r3, [sp, #12]
 80072b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b6:	9302      	str	r3, [sp, #8]
 80072b8:	f107 0314 	add.w	r3, r7, #20
 80072bc:	9301      	str	r3, [sp, #4]
 80072be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	68b9      	ldr	r1, [r7, #8]
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 f851 	bl	8007370 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80072d0:	f000 f8f6 	bl	80074c0 <prvAddNewTaskToReadyList>
 80072d4:	e001      	b.n	80072da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80072da:	697b      	ldr	r3, [r7, #20]
	}
 80072dc:	4618      	mov	r0, r3
 80072de:	3728      	adds	r7, #40	@ 0x28
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08c      	sub	sp, #48	@ 0x30
 80072e8:	af04      	add	r7, sp, #16
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	603b      	str	r3, [r7, #0]
 80072f0:	4613      	mov	r3, r2
 80072f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072f4:	88fb      	ldrh	r3, [r7, #6]
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4618      	mov	r0, r3
 80072fa:	f001 fd77 	bl	8008dec <pvPortMalloc>
 80072fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00e      	beq.n	8007324 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007306:	20a8      	movs	r0, #168	@ 0xa8
 8007308:	f001 fd70 	bl	8008dec <pvPortMalloc>
 800730c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	631a      	str	r2, [r3, #48]	@ 0x30
 800731a:	e005      	b.n	8007328 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800731c:	6978      	ldr	r0, [r7, #20]
 800731e:	f001 fe33 	bl	8008f88 <vPortFree>
 8007322:	e001      	b.n	8007328 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007324:	2300      	movs	r3, #0
 8007326:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d017      	beq.n	800735e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007336:	88fa      	ldrh	r2, [r7, #6]
 8007338:	2300      	movs	r3, #0
 800733a:	9303      	str	r3, [sp, #12]
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	9302      	str	r3, [sp, #8]
 8007340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007342:	9301      	str	r3, [sp, #4]
 8007344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	68b9      	ldr	r1, [r7, #8]
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 f80f 	bl	8007370 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007352:	69f8      	ldr	r0, [r7, #28]
 8007354:	f000 f8b4 	bl	80074c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007358:	2301      	movs	r3, #1
 800735a:	61bb      	str	r3, [r7, #24]
 800735c:	e002      	b.n	8007364 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800735e:	f04f 33ff 	mov.w	r3, #4294967295
 8007362:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007364:	69bb      	ldr	r3, [r7, #24]
	}
 8007366:	4618      	mov	r0, r3
 8007368:	3720      	adds	r7, #32
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b088      	sub	sp, #32
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800737e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007380:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	461a      	mov	r2, r3
 8007388:	21a5      	movs	r1, #165	@ 0xa5
 800738a:	f001 ff51 	bl	8009230 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800738e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007390:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007398:	3b01      	subs	r3, #1
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	f023 0307 	bic.w	r3, r3, #7
 80073a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00b      	beq.n	80073ca <prvInitialiseNewTask+0x5a>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	617b      	str	r3, [r7, #20]
}
 80073c4:	bf00      	nop
 80073c6:	bf00      	nop
 80073c8:	e7fd      	b.n	80073c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d01f      	beq.n	8007410 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073d0:	2300      	movs	r3, #0
 80073d2:	61fb      	str	r3, [r7, #28]
 80073d4:	e012      	b.n	80073fc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	4413      	add	r3, r2
 80073dc:	7819      	ldrb	r1, [r3, #0]
 80073de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	4413      	add	r3, r2
 80073e4:	3334      	adds	r3, #52	@ 0x34
 80073e6:	460a      	mov	r2, r1
 80073e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	4413      	add	r3, r2
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d006      	beq.n	8007404 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	3301      	adds	r3, #1
 80073fa:	61fb      	str	r3, [r7, #28]
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	2b0f      	cmp	r3, #15
 8007400:	d9e9      	bls.n	80073d6 <prvInitialiseNewTask+0x66>
 8007402:	e000      	b.n	8007406 <prvInitialiseNewTask+0x96>
			{
				break;
 8007404:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800740e:	e003      	b.n	8007418 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741a:	2b37      	cmp	r3, #55	@ 0x37
 800741c:	d901      	bls.n	8007422 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800741e:	2337      	movs	r3, #55	@ 0x37
 8007420:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007424:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007426:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800742c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800742e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007430:	2200      	movs	r2, #0
 8007432:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007436:	3304      	adds	r3, #4
 8007438:	4618      	mov	r0, r3
 800743a:	f7fe fe33 	bl	80060a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800743e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007440:	3318      	adds	r3, #24
 8007442:	4618      	mov	r0, r3
 8007444:	f7fe fe2e 	bl	80060a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800744c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800744e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007450:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007456:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800745c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800745e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007460:	2200      	movs	r2, #0
 8007462:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007468:	2200      	movs	r2, #0
 800746a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800746e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007470:	3354      	adds	r3, #84	@ 0x54
 8007472:	224c      	movs	r2, #76	@ 0x4c
 8007474:	2100      	movs	r1, #0
 8007476:	4618      	mov	r0, r3
 8007478:	f001 feda 	bl	8009230 <memset>
 800747c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747e:	4a0d      	ldr	r2, [pc, #52]	@ (80074b4 <prvInitialiseNewTask+0x144>)
 8007480:	659a      	str	r2, [r3, #88]	@ 0x58
 8007482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007484:	4a0c      	ldr	r2, [pc, #48]	@ (80074b8 <prvInitialiseNewTask+0x148>)
 8007486:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748a:	4a0c      	ldr	r2, [pc, #48]	@ (80074bc <prvInitialiseNewTask+0x14c>)
 800748c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	68f9      	ldr	r1, [r7, #12]
 8007492:	69b8      	ldr	r0, [r7, #24]
 8007494:	f001 fa5a 	bl	800894c <pxPortInitialiseStack>
 8007498:	4602      	mov	r2, r0
 800749a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800749e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074aa:	bf00      	nop
 80074ac:	3720      	adds	r7, #32
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	200055bc 	.word	0x200055bc
 80074b8:	20005624 	.word	0x20005624
 80074bc:	2000568c 	.word	0x2000568c

080074c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074c8:	f001 fb6e 	bl	8008ba8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074cc:	4b2d      	ldr	r3, [pc, #180]	@ (8007584 <prvAddNewTaskToReadyList+0xc4>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3301      	adds	r3, #1
 80074d2:	4a2c      	ldr	r2, [pc, #176]	@ (8007584 <prvAddNewTaskToReadyList+0xc4>)
 80074d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074d6:	4b2c      	ldr	r3, [pc, #176]	@ (8007588 <prvAddNewTaskToReadyList+0xc8>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d109      	bne.n	80074f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074de:	4a2a      	ldr	r2, [pc, #168]	@ (8007588 <prvAddNewTaskToReadyList+0xc8>)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074e4:	4b27      	ldr	r3, [pc, #156]	@ (8007584 <prvAddNewTaskToReadyList+0xc4>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d110      	bne.n	800750e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80074ec:	f000 fc2e 	bl	8007d4c <prvInitialiseTaskLists>
 80074f0:	e00d      	b.n	800750e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80074f2:	4b26      	ldr	r3, [pc, #152]	@ (800758c <prvAddNewTaskToReadyList+0xcc>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d109      	bne.n	800750e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074fa:	4b23      	ldr	r3, [pc, #140]	@ (8007588 <prvAddNewTaskToReadyList+0xc8>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007504:	429a      	cmp	r2, r3
 8007506:	d802      	bhi.n	800750e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007508:	4a1f      	ldr	r2, [pc, #124]	@ (8007588 <prvAddNewTaskToReadyList+0xc8>)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800750e:	4b20      	ldr	r3, [pc, #128]	@ (8007590 <prvAddNewTaskToReadyList+0xd0>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3301      	adds	r3, #1
 8007514:	4a1e      	ldr	r2, [pc, #120]	@ (8007590 <prvAddNewTaskToReadyList+0xd0>)
 8007516:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007518:	4b1d      	ldr	r3, [pc, #116]	@ (8007590 <prvAddNewTaskToReadyList+0xd0>)
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007524:	4b1b      	ldr	r3, [pc, #108]	@ (8007594 <prvAddNewTaskToReadyList+0xd4>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	429a      	cmp	r2, r3
 800752a:	d903      	bls.n	8007534 <prvAddNewTaskToReadyList+0x74>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007530:	4a18      	ldr	r2, [pc, #96]	@ (8007594 <prvAddNewTaskToReadyList+0xd4>)
 8007532:	6013      	str	r3, [r2, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007538:	4613      	mov	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4a15      	ldr	r2, [pc, #84]	@ (8007598 <prvAddNewTaskToReadyList+0xd8>)
 8007542:	441a      	add	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3304      	adds	r3, #4
 8007548:	4619      	mov	r1, r3
 800754a:	4610      	mov	r0, r2
 800754c:	f7fe fdb7 	bl	80060be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007550:	f001 fb5c 	bl	8008c0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007554:	4b0d      	ldr	r3, [pc, #52]	@ (800758c <prvAddNewTaskToReadyList+0xcc>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00e      	beq.n	800757a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800755c:	4b0a      	ldr	r3, [pc, #40]	@ (8007588 <prvAddNewTaskToReadyList+0xc8>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007566:	429a      	cmp	r2, r3
 8007568:	d207      	bcs.n	800757a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800756a:	4b0c      	ldr	r3, [pc, #48]	@ (800759c <prvAddNewTaskToReadyList+0xdc>)
 800756c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007570:	601a      	str	r2, [r3, #0]
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800757a:	bf00      	nop
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	2000183c 	.word	0x2000183c
 8007588:	20001368 	.word	0x20001368
 800758c:	20001848 	.word	0x20001848
 8007590:	20001858 	.word	0x20001858
 8007594:	20001844 	.word	0x20001844
 8007598:	2000136c 	.word	0x2000136c
 800759c:	e000ed04 	.word	0xe000ed04

080075a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075a8:	2300      	movs	r3, #0
 80075aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d018      	beq.n	80075e4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075b2:	4b14      	ldr	r3, [pc, #80]	@ (8007604 <vTaskDelay+0x64>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00b      	beq.n	80075d2 <vTaskDelay+0x32>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	60bb      	str	r3, [r7, #8]
}
 80075cc:	bf00      	nop
 80075ce:	bf00      	nop
 80075d0:	e7fd      	b.n	80075ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80075d2:	f000 f88b 	bl	80076ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80075d6:	2100      	movs	r1, #0
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fe09 	bl	80081f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80075de:	f000 f893 	bl	8007708 <xTaskResumeAll>
 80075e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d107      	bne.n	80075fa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80075ea:	4b07      	ldr	r3, [pc, #28]	@ (8007608 <vTaskDelay+0x68>)
 80075ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075fa:	bf00      	nop
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	20001864 	.word	0x20001864
 8007608:	e000ed04 	.word	0xe000ed04

0800760c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08a      	sub	sp, #40	@ 0x28
 8007610:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007612:	2300      	movs	r3, #0
 8007614:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007616:	2300      	movs	r3, #0
 8007618:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800761a:	463a      	mov	r2, r7
 800761c:	1d39      	adds	r1, r7, #4
 800761e:	f107 0308 	add.w	r3, r7, #8
 8007622:	4618      	mov	r0, r3
 8007624:	f7fe fcea 	bl	8005ffc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	9202      	str	r2, [sp, #8]
 8007630:	9301      	str	r3, [sp, #4]
 8007632:	2300      	movs	r3, #0
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	2300      	movs	r3, #0
 8007638:	460a      	mov	r2, r1
 800763a:	4924      	ldr	r1, [pc, #144]	@ (80076cc <vTaskStartScheduler+0xc0>)
 800763c:	4824      	ldr	r0, [pc, #144]	@ (80076d0 <vTaskStartScheduler+0xc4>)
 800763e:	f7ff fdf1 	bl	8007224 <xTaskCreateStatic>
 8007642:	4603      	mov	r3, r0
 8007644:	4a23      	ldr	r2, [pc, #140]	@ (80076d4 <vTaskStartScheduler+0xc8>)
 8007646:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007648:	4b22      	ldr	r3, [pc, #136]	@ (80076d4 <vTaskStartScheduler+0xc8>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007650:	2301      	movs	r3, #1
 8007652:	617b      	str	r3, [r7, #20]
 8007654:	e001      	b.n	800765a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007656:	2300      	movs	r3, #0
 8007658:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d102      	bne.n	8007666 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007660:	f000 fe1a 	bl	8008298 <xTimerCreateTimerTask>
 8007664:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d11b      	bne.n	80076a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800766c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007670:	f383 8811 	msr	BASEPRI, r3
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	613b      	str	r3, [r7, #16]
}
 800767e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007680:	4b15      	ldr	r3, [pc, #84]	@ (80076d8 <vTaskStartScheduler+0xcc>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3354      	adds	r3, #84	@ 0x54
 8007686:	4a15      	ldr	r2, [pc, #84]	@ (80076dc <vTaskStartScheduler+0xd0>)
 8007688:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800768a:	4b15      	ldr	r3, [pc, #84]	@ (80076e0 <vTaskStartScheduler+0xd4>)
 800768c:	f04f 32ff 	mov.w	r2, #4294967295
 8007690:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007692:	4b14      	ldr	r3, [pc, #80]	@ (80076e4 <vTaskStartScheduler+0xd8>)
 8007694:	2201      	movs	r2, #1
 8007696:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007698:	4b13      	ldr	r3, [pc, #76]	@ (80076e8 <vTaskStartScheduler+0xdc>)
 800769a:	2200      	movs	r2, #0
 800769c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800769e:	f001 f9df 	bl	8008a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076a2:	e00f      	b.n	80076c4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076aa:	d10b      	bne.n	80076c4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	60fb      	str	r3, [r7, #12]
}
 80076be:	bf00      	nop
 80076c0:	bf00      	nop
 80076c2:	e7fd      	b.n	80076c0 <vTaskStartScheduler+0xb4>
}
 80076c4:	bf00      	nop
 80076c6:	3718      	adds	r7, #24
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	0800ada8 	.word	0x0800ada8
 80076d0:	08007d1d 	.word	0x08007d1d
 80076d4:	20001860 	.word	0x20001860
 80076d8:	20001368 	.word	0x20001368
 80076dc:	20000024 	.word	0x20000024
 80076e0:	2000185c 	.word	0x2000185c
 80076e4:	20001848 	.word	0x20001848
 80076e8:	20001840 	.word	0x20001840

080076ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80076f0:	4b04      	ldr	r3, [pc, #16]	@ (8007704 <vTaskSuspendAll+0x18>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3301      	adds	r3, #1
 80076f6:	4a03      	ldr	r2, [pc, #12]	@ (8007704 <vTaskSuspendAll+0x18>)
 80076f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80076fa:	bf00      	nop
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	20001864 	.word	0x20001864

08007708 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800770e:	2300      	movs	r3, #0
 8007710:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007712:	2300      	movs	r3, #0
 8007714:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007716:	4b42      	ldr	r3, [pc, #264]	@ (8007820 <xTaskResumeAll+0x118>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10b      	bne.n	8007736 <xTaskResumeAll+0x2e>
	__asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	603b      	str	r3, [r7, #0]
}
 8007730:	bf00      	nop
 8007732:	bf00      	nop
 8007734:	e7fd      	b.n	8007732 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007736:	f001 fa37 	bl	8008ba8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800773a:	4b39      	ldr	r3, [pc, #228]	@ (8007820 <xTaskResumeAll+0x118>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3b01      	subs	r3, #1
 8007740:	4a37      	ldr	r2, [pc, #220]	@ (8007820 <xTaskResumeAll+0x118>)
 8007742:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007744:	4b36      	ldr	r3, [pc, #216]	@ (8007820 <xTaskResumeAll+0x118>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d162      	bne.n	8007812 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800774c:	4b35      	ldr	r3, [pc, #212]	@ (8007824 <xTaskResumeAll+0x11c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d05e      	beq.n	8007812 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007754:	e02f      	b.n	80077b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007756:	4b34      	ldr	r3, [pc, #208]	@ (8007828 <xTaskResumeAll+0x120>)
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3318      	adds	r3, #24
 8007762:	4618      	mov	r0, r3
 8007764:	f7fe fd08 	bl	8006178 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3304      	adds	r3, #4
 800776c:	4618      	mov	r0, r3
 800776e:	f7fe fd03 	bl	8006178 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007776:	4b2d      	ldr	r3, [pc, #180]	@ (800782c <xTaskResumeAll+0x124>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d903      	bls.n	8007786 <xTaskResumeAll+0x7e>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007782:	4a2a      	ldr	r2, [pc, #168]	@ (800782c <xTaskResumeAll+0x124>)
 8007784:	6013      	str	r3, [r2, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800778a:	4613      	mov	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4a27      	ldr	r2, [pc, #156]	@ (8007830 <xTaskResumeAll+0x128>)
 8007794:	441a      	add	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3304      	adds	r3, #4
 800779a:	4619      	mov	r1, r3
 800779c:	4610      	mov	r0, r2
 800779e:	f7fe fc8e 	bl	80060be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077a6:	4b23      	ldr	r3, [pc, #140]	@ (8007834 <xTaskResumeAll+0x12c>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d302      	bcc.n	80077b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80077b0:	4b21      	ldr	r3, [pc, #132]	@ (8007838 <xTaskResumeAll+0x130>)
 80077b2:	2201      	movs	r2, #1
 80077b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077b6:	4b1c      	ldr	r3, [pc, #112]	@ (8007828 <xTaskResumeAll+0x120>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1cb      	bne.n	8007756 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077c4:	f000 fb66 	bl	8007e94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80077c8:	4b1c      	ldr	r3, [pc, #112]	@ (800783c <xTaskResumeAll+0x134>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d010      	beq.n	80077f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077d4:	f000 f846 	bl	8007864 <xTaskIncrementTick>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80077de:	4b16      	ldr	r3, [pc, #88]	@ (8007838 <xTaskResumeAll+0x130>)
 80077e0:	2201      	movs	r2, #1
 80077e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1f1      	bne.n	80077d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80077f0:	4b12      	ldr	r3, [pc, #72]	@ (800783c <xTaskResumeAll+0x134>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077f6:	4b10      	ldr	r3, [pc, #64]	@ (8007838 <xTaskResumeAll+0x130>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d009      	beq.n	8007812 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80077fe:	2301      	movs	r3, #1
 8007800:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007802:	4b0f      	ldr	r3, [pc, #60]	@ (8007840 <xTaskResumeAll+0x138>)
 8007804:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007812:	f001 f9fb 	bl	8008c0c <vPortExitCritical>

	return xAlreadyYielded;
 8007816:	68bb      	ldr	r3, [r7, #8]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	20001864 	.word	0x20001864
 8007824:	2000183c 	.word	0x2000183c
 8007828:	200017fc 	.word	0x200017fc
 800782c:	20001844 	.word	0x20001844
 8007830:	2000136c 	.word	0x2000136c
 8007834:	20001368 	.word	0x20001368
 8007838:	20001850 	.word	0x20001850
 800783c:	2000184c 	.word	0x2000184c
 8007840:	e000ed04 	.word	0xe000ed04

08007844 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800784a:	4b05      	ldr	r3, [pc, #20]	@ (8007860 <xTaskGetTickCount+0x1c>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007850:	687b      	ldr	r3, [r7, #4]
}
 8007852:	4618      	mov	r0, r3
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	20001840 	.word	0x20001840

08007864 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b086      	sub	sp, #24
 8007868:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800786a:	2300      	movs	r3, #0
 800786c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800786e:	4b4f      	ldr	r3, [pc, #316]	@ (80079ac <xTaskIncrementTick+0x148>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	f040 8090 	bne.w	8007998 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007878:	4b4d      	ldr	r3, [pc, #308]	@ (80079b0 <xTaskIncrementTick+0x14c>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3301      	adds	r3, #1
 800787e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007880:	4a4b      	ldr	r2, [pc, #300]	@ (80079b0 <xTaskIncrementTick+0x14c>)
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d121      	bne.n	80078d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800788c:	4b49      	ldr	r3, [pc, #292]	@ (80079b4 <xTaskIncrementTick+0x150>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00b      	beq.n	80078ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8007896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800789a:	f383 8811 	msr	BASEPRI, r3
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	603b      	str	r3, [r7, #0]
}
 80078a8:	bf00      	nop
 80078aa:	bf00      	nop
 80078ac:	e7fd      	b.n	80078aa <xTaskIncrementTick+0x46>
 80078ae:	4b41      	ldr	r3, [pc, #260]	@ (80079b4 <xTaskIncrementTick+0x150>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	4b40      	ldr	r3, [pc, #256]	@ (80079b8 <xTaskIncrementTick+0x154>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a3e      	ldr	r2, [pc, #248]	@ (80079b4 <xTaskIncrementTick+0x150>)
 80078ba:	6013      	str	r3, [r2, #0]
 80078bc:	4a3e      	ldr	r2, [pc, #248]	@ (80079b8 <xTaskIncrementTick+0x154>)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6013      	str	r3, [r2, #0]
 80078c2:	4b3e      	ldr	r3, [pc, #248]	@ (80079bc <xTaskIncrementTick+0x158>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3301      	adds	r3, #1
 80078c8:	4a3c      	ldr	r2, [pc, #240]	@ (80079bc <xTaskIncrementTick+0x158>)
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	f000 fae2 	bl	8007e94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078d0:	4b3b      	ldr	r3, [pc, #236]	@ (80079c0 <xTaskIncrementTick+0x15c>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d349      	bcc.n	800796e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078da:	4b36      	ldr	r3, [pc, #216]	@ (80079b4 <xTaskIncrementTick+0x150>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d104      	bne.n	80078ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078e4:	4b36      	ldr	r3, [pc, #216]	@ (80079c0 <xTaskIncrementTick+0x15c>)
 80078e6:	f04f 32ff 	mov.w	r2, #4294967295
 80078ea:	601a      	str	r2, [r3, #0]
					break;
 80078ec:	e03f      	b.n	800796e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078ee:	4b31      	ldr	r3, [pc, #196]	@ (80079b4 <xTaskIncrementTick+0x150>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	429a      	cmp	r2, r3
 8007904:	d203      	bcs.n	800790e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007906:	4a2e      	ldr	r2, [pc, #184]	@ (80079c0 <xTaskIncrementTick+0x15c>)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800790c:	e02f      	b.n	800796e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	3304      	adds	r3, #4
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe fc30 	bl	8006178 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800791c:	2b00      	cmp	r3, #0
 800791e:	d004      	beq.n	800792a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	3318      	adds	r3, #24
 8007924:	4618      	mov	r0, r3
 8007926:	f7fe fc27 	bl	8006178 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800792e:	4b25      	ldr	r3, [pc, #148]	@ (80079c4 <xTaskIncrementTick+0x160>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	429a      	cmp	r2, r3
 8007934:	d903      	bls.n	800793e <xTaskIncrementTick+0xda>
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793a:	4a22      	ldr	r2, [pc, #136]	@ (80079c4 <xTaskIncrementTick+0x160>)
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4a1f      	ldr	r2, [pc, #124]	@ (80079c8 <xTaskIncrementTick+0x164>)
 800794c:	441a      	add	r2, r3
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	3304      	adds	r3, #4
 8007952:	4619      	mov	r1, r3
 8007954:	4610      	mov	r0, r2
 8007956:	f7fe fbb2 	bl	80060be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800795e:	4b1b      	ldr	r3, [pc, #108]	@ (80079cc <xTaskIncrementTick+0x168>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007964:	429a      	cmp	r2, r3
 8007966:	d3b8      	bcc.n	80078da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007968:	2301      	movs	r3, #1
 800796a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800796c:	e7b5      	b.n	80078da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800796e:	4b17      	ldr	r3, [pc, #92]	@ (80079cc <xTaskIncrementTick+0x168>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007974:	4914      	ldr	r1, [pc, #80]	@ (80079c8 <xTaskIncrementTick+0x164>)
 8007976:	4613      	mov	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	440b      	add	r3, r1
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d901      	bls.n	800798a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007986:	2301      	movs	r3, #1
 8007988:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800798a:	4b11      	ldr	r3, [pc, #68]	@ (80079d0 <xTaskIncrementTick+0x16c>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d007      	beq.n	80079a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007992:	2301      	movs	r3, #1
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	e004      	b.n	80079a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007998:	4b0e      	ldr	r3, [pc, #56]	@ (80079d4 <xTaskIncrementTick+0x170>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3301      	adds	r3, #1
 800799e:	4a0d      	ldr	r2, [pc, #52]	@ (80079d4 <xTaskIncrementTick+0x170>)
 80079a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80079a2:	697b      	ldr	r3, [r7, #20]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	20001864 	.word	0x20001864
 80079b0:	20001840 	.word	0x20001840
 80079b4:	200017f4 	.word	0x200017f4
 80079b8:	200017f8 	.word	0x200017f8
 80079bc:	20001854 	.word	0x20001854
 80079c0:	2000185c 	.word	0x2000185c
 80079c4:	20001844 	.word	0x20001844
 80079c8:	2000136c 	.word	0x2000136c
 80079cc:	20001368 	.word	0x20001368
 80079d0:	20001850 	.word	0x20001850
 80079d4:	2000184c 	.word	0x2000184c

080079d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079de:	4b2b      	ldr	r3, [pc, #172]	@ (8007a8c <vTaskSwitchContext+0xb4>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d003      	beq.n	80079ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80079e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007a90 <vTaskSwitchContext+0xb8>)
 80079e8:	2201      	movs	r2, #1
 80079ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80079ec:	e047      	b.n	8007a7e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80079ee:	4b28      	ldr	r3, [pc, #160]	@ (8007a90 <vTaskSwitchContext+0xb8>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079f4:	4b27      	ldr	r3, [pc, #156]	@ (8007a94 <vTaskSwitchContext+0xbc>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	60fb      	str	r3, [r7, #12]
 80079fa:	e011      	b.n	8007a20 <vTaskSwitchContext+0x48>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10b      	bne.n	8007a1a <vTaskSwitchContext+0x42>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	607b      	str	r3, [r7, #4]
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop
 8007a18:	e7fd      	b.n	8007a16 <vTaskSwitchContext+0x3e>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	491d      	ldr	r1, [pc, #116]	@ (8007a98 <vTaskSwitchContext+0xc0>)
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	4613      	mov	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	440b      	add	r3, r1
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d0e3      	beq.n	80079fc <vTaskSwitchContext+0x24>
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	4613      	mov	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4a16      	ldr	r2, [pc, #88]	@ (8007a98 <vTaskSwitchContext+0xc0>)
 8007a40:	4413      	add	r3, r2
 8007a42:	60bb      	str	r3, [r7, #8]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	605a      	str	r2, [r3, #4]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	3308      	adds	r3, #8
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d104      	bne.n	8007a64 <vTaskSwitchContext+0x8c>
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	605a      	str	r2, [r3, #4]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	4a0c      	ldr	r2, [pc, #48]	@ (8007a9c <vTaskSwitchContext+0xc4>)
 8007a6c:	6013      	str	r3, [r2, #0]
 8007a6e:	4a09      	ldr	r2, [pc, #36]	@ (8007a94 <vTaskSwitchContext+0xbc>)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a74:	4b09      	ldr	r3, [pc, #36]	@ (8007a9c <vTaskSwitchContext+0xc4>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3354      	adds	r3, #84	@ 0x54
 8007a7a:	4a09      	ldr	r2, [pc, #36]	@ (8007aa0 <vTaskSwitchContext+0xc8>)
 8007a7c:	6013      	str	r3, [r2, #0]
}
 8007a7e:	bf00      	nop
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	20001864 	.word	0x20001864
 8007a90:	20001850 	.word	0x20001850
 8007a94:	20001844 	.word	0x20001844
 8007a98:	2000136c 	.word	0x2000136c
 8007a9c:	20001368 	.word	0x20001368
 8007aa0:	20000024 	.word	0x20000024

08007aa4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10b      	bne.n	8007acc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	60fb      	str	r3, [r7, #12]
}
 8007ac6:	bf00      	nop
 8007ac8:	bf00      	nop
 8007aca:	e7fd      	b.n	8007ac8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007acc:	4b07      	ldr	r3, [pc, #28]	@ (8007aec <vTaskPlaceOnEventList+0x48>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3318      	adds	r3, #24
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7fe fb16 	bl	8006106 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ada:	2101      	movs	r1, #1
 8007adc:	6838      	ldr	r0, [r7, #0]
 8007ade:	f000 fb87 	bl	80081f0 <prvAddCurrentTaskToDelayedList>
}
 8007ae2:	bf00      	nop
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	20001368 	.word	0x20001368

08007af0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10b      	bne.n	8007b1a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	617b      	str	r3, [r7, #20]
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop
 8007b18:	e7fd      	b.n	8007b16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8007b44 <vTaskPlaceOnEventListRestricted+0x54>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3318      	adds	r3, #24
 8007b20:	4619      	mov	r1, r3
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f7fe facb 	bl	80060be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b32:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b34:	6879      	ldr	r1, [r7, #4]
 8007b36:	68b8      	ldr	r0, [r7, #8]
 8007b38:	f000 fb5a 	bl	80081f0 <prvAddCurrentTaskToDelayedList>
	}
 8007b3c:	bf00      	nop
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	20001368 	.word	0x20001368

08007b48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10b      	bne.n	8007b76 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	60fb      	str	r3, [r7, #12]
}
 8007b70:	bf00      	nop
 8007b72:	bf00      	nop
 8007b74:	e7fd      	b.n	8007b72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	3318      	adds	r3, #24
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7fe fafc 	bl	8006178 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b80:	4b1d      	ldr	r3, [pc, #116]	@ (8007bf8 <xTaskRemoveFromEventList+0xb0>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d11d      	bne.n	8007bc4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fe faf3 	bl	8006178 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b96:	4b19      	ldr	r3, [pc, #100]	@ (8007bfc <xTaskRemoveFromEventList+0xb4>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d903      	bls.n	8007ba6 <xTaskRemoveFromEventList+0x5e>
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba2:	4a16      	ldr	r2, [pc, #88]	@ (8007bfc <xTaskRemoveFromEventList+0xb4>)
 8007ba4:	6013      	str	r3, [r2, #0]
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007baa:	4613      	mov	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4a13      	ldr	r2, [pc, #76]	@ (8007c00 <xTaskRemoveFromEventList+0xb8>)
 8007bb4:	441a      	add	r2, r3
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	3304      	adds	r3, #4
 8007bba:	4619      	mov	r1, r3
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	f7fe fa7e 	bl	80060be <vListInsertEnd>
 8007bc2:	e005      	b.n	8007bd0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	3318      	adds	r3, #24
 8007bc8:	4619      	mov	r1, r3
 8007bca:	480e      	ldr	r0, [pc, #56]	@ (8007c04 <xTaskRemoveFromEventList+0xbc>)
 8007bcc:	f7fe fa77 	bl	80060be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8007c08 <xTaskRemoveFromEventList+0xc0>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d905      	bls.n	8007bea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007bde:	2301      	movs	r3, #1
 8007be0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007be2:	4b0a      	ldr	r3, [pc, #40]	@ (8007c0c <xTaskRemoveFromEventList+0xc4>)
 8007be4:	2201      	movs	r2, #1
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	e001      	b.n	8007bee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007bea:	2300      	movs	r3, #0
 8007bec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007bee:	697b      	ldr	r3, [r7, #20]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	20001864 	.word	0x20001864
 8007bfc:	20001844 	.word	0x20001844
 8007c00:	2000136c 	.word	0x2000136c
 8007c04:	200017fc 	.word	0x200017fc
 8007c08:	20001368 	.word	0x20001368
 8007c0c:	20001850 	.word	0x20001850

08007c10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c18:	4b06      	ldr	r3, [pc, #24]	@ (8007c34 <vTaskInternalSetTimeOutState+0x24>)
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c20:	4b05      	ldr	r3, [pc, #20]	@ (8007c38 <vTaskInternalSetTimeOutState+0x28>)
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	605a      	str	r2, [r3, #4]
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	20001854 	.word	0x20001854
 8007c38:	20001840 	.word	0x20001840

08007c3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b088      	sub	sp, #32
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10b      	bne.n	8007c64 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	613b      	str	r3, [r7, #16]
}
 8007c5e:	bf00      	nop
 8007c60:	bf00      	nop
 8007c62:	e7fd      	b.n	8007c60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10b      	bne.n	8007c82 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	60fb      	str	r3, [r7, #12]
}
 8007c7c:	bf00      	nop
 8007c7e:	bf00      	nop
 8007c80:	e7fd      	b.n	8007c7e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007c82:	f000 ff91 	bl	8008ba8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c86:	4b1d      	ldr	r3, [pc, #116]	@ (8007cfc <xTaskCheckForTimeOut+0xc0>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9e:	d102      	bne.n	8007ca6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	61fb      	str	r3, [r7, #28]
 8007ca4:	e023      	b.n	8007cee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	4b15      	ldr	r3, [pc, #84]	@ (8007d00 <xTaskCheckForTimeOut+0xc4>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d007      	beq.n	8007cc2 <xTaskCheckForTimeOut+0x86>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	69ba      	ldr	r2, [r7, #24]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d302      	bcc.n	8007cc2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	61fb      	str	r3, [r7, #28]
 8007cc0:	e015      	b.n	8007cee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d20b      	bcs.n	8007ce4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	1ad2      	subs	r2, r2, r3
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff ff99 	bl	8007c10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	61fb      	str	r3, [r7, #28]
 8007ce2:	e004      	b.n	8007cee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007cea:	2301      	movs	r3, #1
 8007cec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007cee:	f000 ff8d 	bl	8008c0c <vPortExitCritical>

	return xReturn;
 8007cf2:	69fb      	ldr	r3, [r7, #28]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3720      	adds	r7, #32
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	20001840 	.word	0x20001840
 8007d00:	20001854 	.word	0x20001854

08007d04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d04:	b480      	push	{r7}
 8007d06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d08:	4b03      	ldr	r3, [pc, #12]	@ (8007d18 <vTaskMissedYield+0x14>)
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	601a      	str	r2, [r3, #0]
}
 8007d0e:	bf00      	nop
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	20001850 	.word	0x20001850

08007d1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d24:	f000 f852 	bl	8007dcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d28:	4b06      	ldr	r3, [pc, #24]	@ (8007d44 <prvIdleTask+0x28>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d9f9      	bls.n	8007d24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d30:	4b05      	ldr	r3, [pc, #20]	@ (8007d48 <prvIdleTask+0x2c>)
 8007d32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d40:	e7f0      	b.n	8007d24 <prvIdleTask+0x8>
 8007d42:	bf00      	nop
 8007d44:	2000136c 	.word	0x2000136c
 8007d48:	e000ed04 	.word	0xe000ed04

08007d4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d52:	2300      	movs	r3, #0
 8007d54:	607b      	str	r3, [r7, #4]
 8007d56:	e00c      	b.n	8007d72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4413      	add	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4a12      	ldr	r2, [pc, #72]	@ (8007dac <prvInitialiseTaskLists+0x60>)
 8007d64:	4413      	add	r3, r2
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe f97c 	bl	8006064 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	607b      	str	r3, [r7, #4]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b37      	cmp	r3, #55	@ 0x37
 8007d76:	d9ef      	bls.n	8007d58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d78:	480d      	ldr	r0, [pc, #52]	@ (8007db0 <prvInitialiseTaskLists+0x64>)
 8007d7a:	f7fe f973 	bl	8006064 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d7e:	480d      	ldr	r0, [pc, #52]	@ (8007db4 <prvInitialiseTaskLists+0x68>)
 8007d80:	f7fe f970 	bl	8006064 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d84:	480c      	ldr	r0, [pc, #48]	@ (8007db8 <prvInitialiseTaskLists+0x6c>)
 8007d86:	f7fe f96d 	bl	8006064 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d8a:	480c      	ldr	r0, [pc, #48]	@ (8007dbc <prvInitialiseTaskLists+0x70>)
 8007d8c:	f7fe f96a 	bl	8006064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d90:	480b      	ldr	r0, [pc, #44]	@ (8007dc0 <prvInitialiseTaskLists+0x74>)
 8007d92:	f7fe f967 	bl	8006064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d96:	4b0b      	ldr	r3, [pc, #44]	@ (8007dc4 <prvInitialiseTaskLists+0x78>)
 8007d98:	4a05      	ldr	r2, [pc, #20]	@ (8007db0 <prvInitialiseTaskLists+0x64>)
 8007d9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007dc8 <prvInitialiseTaskLists+0x7c>)
 8007d9e:	4a05      	ldr	r2, [pc, #20]	@ (8007db4 <prvInitialiseTaskLists+0x68>)
 8007da0:	601a      	str	r2, [r3, #0]
}
 8007da2:	bf00      	nop
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	2000136c 	.word	0x2000136c
 8007db0:	200017cc 	.word	0x200017cc
 8007db4:	200017e0 	.word	0x200017e0
 8007db8:	200017fc 	.word	0x200017fc
 8007dbc:	20001810 	.word	0x20001810
 8007dc0:	20001828 	.word	0x20001828
 8007dc4:	200017f4 	.word	0x200017f4
 8007dc8:	200017f8 	.word	0x200017f8

08007dcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dd2:	e019      	b.n	8007e08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007dd4:	f000 fee8 	bl	8008ba8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dd8:	4b10      	ldr	r3, [pc, #64]	@ (8007e1c <prvCheckTasksWaitingTermination+0x50>)
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3304      	adds	r3, #4
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fe f9c7 	bl	8006178 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007dea:	4b0d      	ldr	r3, [pc, #52]	@ (8007e20 <prvCheckTasksWaitingTermination+0x54>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	4a0b      	ldr	r2, [pc, #44]	@ (8007e20 <prvCheckTasksWaitingTermination+0x54>)
 8007df2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007df4:	4b0b      	ldr	r3, [pc, #44]	@ (8007e24 <prvCheckTasksWaitingTermination+0x58>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8007e24 <prvCheckTasksWaitingTermination+0x58>)
 8007dfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007dfe:	f000 ff05 	bl	8008c0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f810 	bl	8007e28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e08:	4b06      	ldr	r3, [pc, #24]	@ (8007e24 <prvCheckTasksWaitingTermination+0x58>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e1      	bne.n	8007dd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e10:	bf00      	nop
 8007e12:	bf00      	nop
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20001810 	.word	0x20001810
 8007e20:	2000183c 	.word	0x2000183c
 8007e24:	20001824 	.word	0x20001824

08007e28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	3354      	adds	r3, #84	@ 0x54
 8007e34:	4618      	mov	r0, r3
 8007e36:	f001 fa03 	bl	8009240 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d108      	bne.n	8007e56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f001 f89d 	bl	8008f88 <vPortFree>
				vPortFree( pxTCB );
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 f89a 	bl	8008f88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e54:	e019      	b.n	8007e8a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d103      	bne.n	8007e68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f001 f891 	bl	8008f88 <vPortFree>
	}
 8007e66:	e010      	b.n	8007e8a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d00b      	beq.n	8007e8a <prvDeleteTCB+0x62>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	60fb      	str	r3, [r7, #12]
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop
 8007e88:	e7fd      	b.n	8007e86 <prvDeleteTCB+0x5e>
	}
 8007e8a:	bf00      	nop
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8007ecc <prvResetNextTaskUnblockTime+0x38>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d104      	bne.n	8007eae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8007ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007eac:	e008      	b.n	8007ec0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eae:	4b07      	ldr	r3, [pc, #28]	@ (8007ecc <prvResetNextTaskUnblockTime+0x38>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	4a04      	ldr	r2, [pc, #16]	@ (8007ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8007ebe:	6013      	str	r3, [r2, #0]
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	200017f4 	.word	0x200017f4
 8007ed0:	2000185c 	.word	0x2000185c

08007ed4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007eda:	4b0b      	ldr	r3, [pc, #44]	@ (8007f08 <xTaskGetSchedulerState+0x34>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d102      	bne.n	8007ee8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	607b      	str	r3, [r7, #4]
 8007ee6:	e008      	b.n	8007efa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ee8:	4b08      	ldr	r3, [pc, #32]	@ (8007f0c <xTaskGetSchedulerState+0x38>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d102      	bne.n	8007ef6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	607b      	str	r3, [r7, #4]
 8007ef4:	e001      	b.n	8007efa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007efa:	687b      	ldr	r3, [r7, #4]
	}
 8007efc:	4618      	mov	r0, r3
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	20001848 	.word	0x20001848
 8007f0c:	20001864 	.word	0x20001864

08007f10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d051      	beq.n	8007fca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8007fd4 <xTaskPriorityInherit+0xc4>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d241      	bcs.n	8007fb8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	db06      	blt.n	8007f4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f3c:	4b25      	ldr	r3, [pc, #148]	@ (8007fd4 <xTaskPriorityInherit+0xc4>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f42:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	6959      	ldr	r1, [r3, #20]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f52:	4613      	mov	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8007fd8 <xTaskPriorityInherit+0xc8>)
 8007f5c:	4413      	add	r3, r2
 8007f5e:	4299      	cmp	r1, r3
 8007f60:	d122      	bne.n	8007fa8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	3304      	adds	r3, #4
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fe f906 	bl	8006178 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f6c:	4b19      	ldr	r3, [pc, #100]	@ (8007fd4 <xTaskPriorityInherit+0xc4>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f7a:	4b18      	ldr	r3, [pc, #96]	@ (8007fdc <xTaskPriorityInherit+0xcc>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d903      	bls.n	8007f8a <xTaskPriorityInherit+0x7a>
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f86:	4a15      	ldr	r2, [pc, #84]	@ (8007fdc <xTaskPriorityInherit+0xcc>)
 8007f88:	6013      	str	r3, [r2, #0]
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f8e:	4613      	mov	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4413      	add	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4a10      	ldr	r2, [pc, #64]	@ (8007fd8 <xTaskPriorityInherit+0xc8>)
 8007f98:	441a      	add	r2, r3
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	3304      	adds	r3, #4
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	f7fe f88c 	bl	80060be <vListInsertEnd>
 8007fa6:	e004      	b.n	8007fb2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8007fd4 <xTaskPriorityInherit+0xc4>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	60fb      	str	r3, [r7, #12]
 8007fb6:	e008      	b.n	8007fca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fbc:	4b05      	ldr	r3, [pc, #20]	@ (8007fd4 <xTaskPriorityInherit+0xc4>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d201      	bcs.n	8007fca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fca:	68fb      	ldr	r3, [r7, #12]
	}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	20001368 	.word	0x20001368
 8007fd8:	2000136c 	.word	0x2000136c
 8007fdc:	20001844 	.word	0x20001844

08007fe0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fec:	2300      	movs	r3, #0
 8007fee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d058      	beq.n	80080a8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ff6:	4b2f      	ldr	r3, [pc, #188]	@ (80080b4 <xTaskPriorityDisinherit+0xd4>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d00b      	beq.n	8008018 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	60fb      	str	r3, [r7, #12]
}
 8008012:	bf00      	nop
 8008014:	bf00      	nop
 8008016:	e7fd      	b.n	8008014 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10b      	bne.n	8008038 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	60bb      	str	r3, [r7, #8]
}
 8008032:	bf00      	nop
 8008034:	bf00      	nop
 8008036:	e7fd      	b.n	8008034 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800803c:	1e5a      	subs	r2, r3, #1
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800804a:	429a      	cmp	r2, r3
 800804c:	d02c      	beq.n	80080a8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008052:	2b00      	cmp	r3, #0
 8008054:	d128      	bne.n	80080a8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	3304      	adds	r3, #4
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe f88c 	bl	8006178 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008078:	4b0f      	ldr	r3, [pc, #60]	@ (80080b8 <xTaskPriorityDisinherit+0xd8>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	429a      	cmp	r2, r3
 800807e:	d903      	bls.n	8008088 <xTaskPriorityDisinherit+0xa8>
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008084:	4a0c      	ldr	r2, [pc, #48]	@ (80080b8 <xTaskPriorityDisinherit+0xd8>)
 8008086:	6013      	str	r3, [r2, #0]
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800808c:	4613      	mov	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4413      	add	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4a09      	ldr	r2, [pc, #36]	@ (80080bc <xTaskPriorityDisinherit+0xdc>)
 8008096:	441a      	add	r2, r3
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	3304      	adds	r3, #4
 800809c:	4619      	mov	r1, r3
 800809e:	4610      	mov	r0, r2
 80080a0:	f7fe f80d 	bl	80060be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080a4:	2301      	movs	r3, #1
 80080a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080a8:	697b      	ldr	r3, [r7, #20]
	}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	20001368 	.word	0x20001368
 80080b8:	20001844 	.word	0x20001844
 80080bc:	2000136c 	.word	0x2000136c

080080c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b088      	sub	sp, #32
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80080ce:	2301      	movs	r3, #1
 80080d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d06c      	beq.n	80081b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10b      	bne.n	80080f8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	60fb      	str	r3, [r7, #12]
}
 80080f2:	bf00      	nop
 80080f4:	bf00      	nop
 80080f6:	e7fd      	b.n	80080f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080fc:	683a      	ldr	r2, [r7, #0]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d902      	bls.n	8008108 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	61fb      	str	r3, [r7, #28]
 8008106:	e002      	b.n	800810e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800810c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008112:	69fa      	ldr	r2, [r7, #28]
 8008114:	429a      	cmp	r2, r3
 8008116:	d04c      	beq.n	80081b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	429a      	cmp	r2, r3
 8008120:	d147      	bne.n	80081b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008122:	4b26      	ldr	r3, [pc, #152]	@ (80081bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	429a      	cmp	r2, r3
 800812a:	d10b      	bne.n	8008144 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	60bb      	str	r3, [r7, #8]
}
 800813e:	bf00      	nop
 8008140:	bf00      	nop
 8008142:	e7fd      	b.n	8008140 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008148:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	69fa      	ldr	r2, [r7, #28]
 800814e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	2b00      	cmp	r3, #0
 8008156:	db04      	blt.n	8008162 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	6959      	ldr	r1, [r3, #20]
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	4613      	mov	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4a13      	ldr	r2, [pc, #76]	@ (80081c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008172:	4413      	add	r3, r2
 8008174:	4299      	cmp	r1, r3
 8008176:	d11c      	bne.n	80081b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	3304      	adds	r3, #4
 800817c:	4618      	mov	r0, r3
 800817e:	f7fd fffb 	bl	8006178 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008186:	4b0f      	ldr	r3, [pc, #60]	@ (80081c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d903      	bls.n	8008196 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008192:	4a0c      	ldr	r2, [pc, #48]	@ (80081c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008194:	6013      	str	r3, [r2, #0]
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800819a:	4613      	mov	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4a07      	ldr	r2, [pc, #28]	@ (80081c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80081a4:	441a      	add	r2, r3
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	3304      	adds	r3, #4
 80081aa:	4619      	mov	r1, r3
 80081ac:	4610      	mov	r0, r2
 80081ae:	f7fd ff86 	bl	80060be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081b2:	bf00      	nop
 80081b4:	3720      	adds	r7, #32
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20001368 	.word	0x20001368
 80081c0:	2000136c 	.word	0x2000136c
 80081c4:	20001844 	.word	0x20001844

080081c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80081c8:	b480      	push	{r7}
 80081ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80081cc:	4b07      	ldr	r3, [pc, #28]	@ (80081ec <pvTaskIncrementMutexHeldCount+0x24>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d004      	beq.n	80081de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80081d4:	4b05      	ldr	r3, [pc, #20]	@ (80081ec <pvTaskIncrementMutexHeldCount+0x24>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80081da:	3201      	adds	r2, #1
 80081dc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80081de:	4b03      	ldr	r3, [pc, #12]	@ (80081ec <pvTaskIncrementMutexHeldCount+0x24>)
 80081e0:	681b      	ldr	r3, [r3, #0]
	}
 80081e2:	4618      	mov	r0, r3
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	20001368 	.word	0x20001368

080081f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081fa:	4b21      	ldr	r3, [pc, #132]	@ (8008280 <prvAddCurrentTaskToDelayedList+0x90>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008200:	4b20      	ldr	r3, [pc, #128]	@ (8008284 <prvAddCurrentTaskToDelayedList+0x94>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3304      	adds	r3, #4
 8008206:	4618      	mov	r0, r3
 8008208:	f7fd ffb6 	bl	8006178 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008212:	d10a      	bne.n	800822a <prvAddCurrentTaskToDelayedList+0x3a>
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d007      	beq.n	800822a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800821a:	4b1a      	ldr	r3, [pc, #104]	@ (8008284 <prvAddCurrentTaskToDelayedList+0x94>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3304      	adds	r3, #4
 8008220:	4619      	mov	r1, r3
 8008222:	4819      	ldr	r0, [pc, #100]	@ (8008288 <prvAddCurrentTaskToDelayedList+0x98>)
 8008224:	f7fd ff4b 	bl	80060be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008228:	e026      	b.n	8008278 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4413      	add	r3, r2
 8008230:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008232:	4b14      	ldr	r3, [pc, #80]	@ (8008284 <prvAddCurrentTaskToDelayedList+0x94>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	429a      	cmp	r2, r3
 8008240:	d209      	bcs.n	8008256 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008242:	4b12      	ldr	r3, [pc, #72]	@ (800828c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	4b0f      	ldr	r3, [pc, #60]	@ (8008284 <prvAddCurrentTaskToDelayedList+0x94>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3304      	adds	r3, #4
 800824c:	4619      	mov	r1, r3
 800824e:	4610      	mov	r0, r2
 8008250:	f7fd ff59 	bl	8006106 <vListInsert>
}
 8008254:	e010      	b.n	8008278 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008256:	4b0e      	ldr	r3, [pc, #56]	@ (8008290 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	4b0a      	ldr	r3, [pc, #40]	@ (8008284 <prvAddCurrentTaskToDelayedList+0x94>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3304      	adds	r3, #4
 8008260:	4619      	mov	r1, r3
 8008262:	4610      	mov	r0, r2
 8008264:	f7fd ff4f 	bl	8006106 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008268:	4b0a      	ldr	r3, [pc, #40]	@ (8008294 <prvAddCurrentTaskToDelayedList+0xa4>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	429a      	cmp	r2, r3
 8008270:	d202      	bcs.n	8008278 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008272:	4a08      	ldr	r2, [pc, #32]	@ (8008294 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	6013      	str	r3, [r2, #0]
}
 8008278:	bf00      	nop
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20001840 	.word	0x20001840
 8008284:	20001368 	.word	0x20001368
 8008288:	20001828 	.word	0x20001828
 800828c:	200017f8 	.word	0x200017f8
 8008290:	200017f4 	.word	0x200017f4
 8008294:	2000185c 	.word	0x2000185c

08008298 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08a      	sub	sp, #40	@ 0x28
 800829c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800829e:	2300      	movs	r3, #0
 80082a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80082a2:	f000 fb13 	bl	80088cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80082a6:	4b1d      	ldr	r3, [pc, #116]	@ (800831c <xTimerCreateTimerTask+0x84>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d021      	beq.n	80082f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80082ae:	2300      	movs	r3, #0
 80082b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082b6:	1d3a      	adds	r2, r7, #4
 80082b8:	f107 0108 	add.w	r1, r7, #8
 80082bc:	f107 030c 	add.w	r3, r7, #12
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7fd feb5 	bl	8006030 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082c6:	6879      	ldr	r1, [r7, #4]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	9202      	str	r2, [sp, #8]
 80082ce:	9301      	str	r3, [sp, #4]
 80082d0:	2302      	movs	r3, #2
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	2300      	movs	r3, #0
 80082d6:	460a      	mov	r2, r1
 80082d8:	4911      	ldr	r1, [pc, #68]	@ (8008320 <xTimerCreateTimerTask+0x88>)
 80082da:	4812      	ldr	r0, [pc, #72]	@ (8008324 <xTimerCreateTimerTask+0x8c>)
 80082dc:	f7fe ffa2 	bl	8007224 <xTaskCreateStatic>
 80082e0:	4603      	mov	r3, r0
 80082e2:	4a11      	ldr	r2, [pc, #68]	@ (8008328 <xTimerCreateTimerTask+0x90>)
 80082e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80082e6:	4b10      	ldr	r3, [pc, #64]	@ (8008328 <xTimerCreateTimerTask+0x90>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d001      	beq.n	80082f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80082ee:	2301      	movs	r3, #1
 80082f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d10b      	bne.n	8008310 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80082f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082fc:	f383 8811 	msr	BASEPRI, r3
 8008300:	f3bf 8f6f 	isb	sy
 8008304:	f3bf 8f4f 	dsb	sy
 8008308:	613b      	str	r3, [r7, #16]
}
 800830a:	bf00      	nop
 800830c:	bf00      	nop
 800830e:	e7fd      	b.n	800830c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008310:	697b      	ldr	r3, [r7, #20]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3718      	adds	r7, #24
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	20001898 	.word	0x20001898
 8008320:	0800adb0 	.word	0x0800adb0
 8008324:	08008465 	.word	0x08008465
 8008328:	2000189c 	.word	0x2000189c

0800832c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b08a      	sub	sp, #40	@ 0x28
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
 8008338:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800833a:	2300      	movs	r3, #0
 800833c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10b      	bne.n	800835c <xTimerGenericCommand+0x30>
	__asm volatile
 8008344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	623b      	str	r3, [r7, #32]
}
 8008356:	bf00      	nop
 8008358:	bf00      	nop
 800835a:	e7fd      	b.n	8008358 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800835c:	4b19      	ldr	r3, [pc, #100]	@ (80083c4 <xTimerGenericCommand+0x98>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d02a      	beq.n	80083ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	2b05      	cmp	r3, #5
 8008374:	dc18      	bgt.n	80083a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008376:	f7ff fdad 	bl	8007ed4 <xTaskGetSchedulerState>
 800837a:	4603      	mov	r3, r0
 800837c:	2b02      	cmp	r3, #2
 800837e:	d109      	bne.n	8008394 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008380:	4b10      	ldr	r3, [pc, #64]	@ (80083c4 <xTimerGenericCommand+0x98>)
 8008382:	6818      	ldr	r0, [r3, #0]
 8008384:	f107 0110 	add.w	r1, r7, #16
 8008388:	2300      	movs	r3, #0
 800838a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800838c:	f7fe f8d2 	bl	8006534 <xQueueGenericSend>
 8008390:	6278      	str	r0, [r7, #36]	@ 0x24
 8008392:	e012      	b.n	80083ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008394:	4b0b      	ldr	r3, [pc, #44]	@ (80083c4 <xTimerGenericCommand+0x98>)
 8008396:	6818      	ldr	r0, [r3, #0]
 8008398:	f107 0110 	add.w	r1, r7, #16
 800839c:	2300      	movs	r3, #0
 800839e:	2200      	movs	r2, #0
 80083a0:	f7fe f8c8 	bl	8006534 <xQueueGenericSend>
 80083a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80083a6:	e008      	b.n	80083ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083a8:	4b06      	ldr	r3, [pc, #24]	@ (80083c4 <xTimerGenericCommand+0x98>)
 80083aa:	6818      	ldr	r0, [r3, #0]
 80083ac:	f107 0110 	add.w	r1, r7, #16
 80083b0:	2300      	movs	r3, #0
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	f7fe f9c0 	bl	8006738 <xQueueGenericSendFromISR>
 80083b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3728      	adds	r7, #40	@ 0x28
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	20001898 	.word	0x20001898

080083c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b088      	sub	sp, #32
 80083cc:	af02      	add	r7, sp, #8
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083d2:	4b23      	ldr	r3, [pc, #140]	@ (8008460 <prvProcessExpiredTimer+0x98>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	3304      	adds	r3, #4
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fd fec9 	bl	8006178 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083ec:	f003 0304 	and.w	r3, r3, #4
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d023      	beq.n	800843c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	699a      	ldr	r2, [r3, #24]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	18d1      	adds	r1, r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	6978      	ldr	r0, [r7, #20]
 8008402:	f000 f8d5 	bl	80085b0 <prvInsertTimerInActiveList>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d020      	beq.n	800844e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800840c:	2300      	movs	r3, #0
 800840e:	9300      	str	r3, [sp, #0]
 8008410:	2300      	movs	r3, #0
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	2100      	movs	r1, #0
 8008416:	6978      	ldr	r0, [r7, #20]
 8008418:	f7ff ff88 	bl	800832c <xTimerGenericCommand>
 800841c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d114      	bne.n	800844e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	60fb      	str	r3, [r7, #12]
}
 8008436:	bf00      	nop
 8008438:	bf00      	nop
 800843a:	e7fd      	b.n	8008438 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008442:	f023 0301 	bic.w	r3, r3, #1
 8008446:	b2da      	uxtb	r2, r3
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	6978      	ldr	r0, [r7, #20]
 8008454:	4798      	blx	r3
}
 8008456:	bf00      	nop
 8008458:	3718      	adds	r7, #24
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20001890 	.word	0x20001890

08008464 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800846c:	f107 0308 	add.w	r3, r7, #8
 8008470:	4618      	mov	r0, r3
 8008472:	f000 f859 	bl	8008528 <prvGetNextExpireTime>
 8008476:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	4619      	mov	r1, r3
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 f805 	bl	800848c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008482:	f000 f8d7 	bl	8008634 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008486:	bf00      	nop
 8008488:	e7f0      	b.n	800846c <prvTimerTask+0x8>
	...

0800848c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008496:	f7ff f929 	bl	80076ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800849a:	f107 0308 	add.w	r3, r7, #8
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 f866 	bl	8008570 <prvSampleTimeNow>
 80084a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d130      	bne.n	800850e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10a      	bne.n	80084c8 <prvProcessTimerOrBlockTask+0x3c>
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d806      	bhi.n	80084c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084ba:	f7ff f925 	bl	8007708 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084be:	68f9      	ldr	r1, [r7, #12]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7ff ff81 	bl	80083c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084c6:	e024      	b.n	8008512 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d008      	beq.n	80084e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084ce:	4b13      	ldr	r3, [pc, #76]	@ (800851c <prvProcessTimerOrBlockTask+0x90>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d101      	bne.n	80084dc <prvProcessTimerOrBlockTask+0x50>
 80084d8:	2301      	movs	r3, #1
 80084da:	e000      	b.n	80084de <prvProcessTimerOrBlockTask+0x52>
 80084dc:	2300      	movs	r3, #0
 80084de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80084e0:	4b0f      	ldr	r3, [pc, #60]	@ (8008520 <prvProcessTimerOrBlockTask+0x94>)
 80084e2:	6818      	ldr	r0, [r3, #0]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	4619      	mov	r1, r3
 80084ee:	f7fe fe65 	bl	80071bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80084f2:	f7ff f909 	bl	8007708 <xTaskResumeAll>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10a      	bne.n	8008512 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80084fc:	4b09      	ldr	r3, [pc, #36]	@ (8008524 <prvProcessTimerOrBlockTask+0x98>)
 80084fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	f3bf 8f4f 	dsb	sy
 8008508:	f3bf 8f6f 	isb	sy
}
 800850c:	e001      	b.n	8008512 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800850e:	f7ff f8fb 	bl	8007708 <xTaskResumeAll>
}
 8008512:	bf00      	nop
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	20001894 	.word	0x20001894
 8008520:	20001898 	.word	0x20001898
 8008524:	e000ed04 	.word	0xe000ed04

08008528 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008530:	4b0e      	ldr	r3, [pc, #56]	@ (800856c <prvGetNextExpireTime+0x44>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <prvGetNextExpireTime+0x16>
 800853a:	2201      	movs	r2, #1
 800853c:	e000      	b.n	8008540 <prvGetNextExpireTime+0x18>
 800853e:	2200      	movs	r2, #0
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d105      	bne.n	8008558 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800854c:	4b07      	ldr	r3, [pc, #28]	@ (800856c <prvGetNextExpireTime+0x44>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	60fb      	str	r3, [r7, #12]
 8008556:	e001      	b.n	800855c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008558:	2300      	movs	r3, #0
 800855a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800855c:	68fb      	ldr	r3, [r7, #12]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	20001890 	.word	0x20001890

08008570 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008578:	f7ff f964 	bl	8007844 <xTaskGetTickCount>
 800857c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800857e:	4b0b      	ldr	r3, [pc, #44]	@ (80085ac <prvSampleTimeNow+0x3c>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	429a      	cmp	r2, r3
 8008586:	d205      	bcs.n	8008594 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008588:	f000 f93a 	bl	8008800 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	601a      	str	r2, [r3, #0]
 8008592:	e002      	b.n	800859a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800859a:	4a04      	ldr	r2, [pc, #16]	@ (80085ac <prvSampleTimeNow+0x3c>)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085a0:	68fb      	ldr	r3, [r7, #12]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	200018a0 	.word	0x200018a0

080085b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085be:	2300      	movs	r3, #0
 80085c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d812      	bhi.n	80085fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	1ad2      	subs	r2, r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d302      	bcc.n	80085ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80085e4:	2301      	movs	r3, #1
 80085e6:	617b      	str	r3, [r7, #20]
 80085e8:	e01b      	b.n	8008622 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085ea:	4b10      	ldr	r3, [pc, #64]	@ (800862c <prvInsertTimerInActiveList+0x7c>)
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	3304      	adds	r3, #4
 80085f2:	4619      	mov	r1, r3
 80085f4:	4610      	mov	r0, r2
 80085f6:	f7fd fd86 	bl	8006106 <vListInsert>
 80085fa:	e012      	b.n	8008622 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	429a      	cmp	r2, r3
 8008602:	d206      	bcs.n	8008612 <prvInsertTimerInActiveList+0x62>
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	429a      	cmp	r2, r3
 800860a:	d302      	bcc.n	8008612 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800860c:	2301      	movs	r3, #1
 800860e:	617b      	str	r3, [r7, #20]
 8008610:	e007      	b.n	8008622 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008612:	4b07      	ldr	r3, [pc, #28]	@ (8008630 <prvInsertTimerInActiveList+0x80>)
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	3304      	adds	r3, #4
 800861a:	4619      	mov	r1, r3
 800861c:	4610      	mov	r0, r2
 800861e:	f7fd fd72 	bl	8006106 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008622:	697b      	ldr	r3, [r7, #20]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3718      	adds	r7, #24
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	20001894 	.word	0x20001894
 8008630:	20001890 	.word	0x20001890

08008634 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b08e      	sub	sp, #56	@ 0x38
 8008638:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800863a:	e0ce      	b.n	80087da <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	da19      	bge.n	8008676 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008642:	1d3b      	adds	r3, r7, #4
 8008644:	3304      	adds	r3, #4
 8008646:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10b      	bne.n	8008666 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	61fb      	str	r3, [r7, #28]
}
 8008660:	bf00      	nop
 8008662:	bf00      	nop
 8008664:	e7fd      	b.n	8008662 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800866c:	6850      	ldr	r0, [r2, #4]
 800866e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008670:	6892      	ldr	r2, [r2, #8]
 8008672:	4611      	mov	r1, r2
 8008674:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	f2c0 80ae 	blt.w	80087da <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d004      	beq.n	8008694 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800868a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868c:	3304      	adds	r3, #4
 800868e:	4618      	mov	r0, r3
 8008690:	f7fd fd72 	bl	8006178 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008694:	463b      	mov	r3, r7
 8008696:	4618      	mov	r0, r3
 8008698:	f7ff ff6a 	bl	8008570 <prvSampleTimeNow>
 800869c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b09      	cmp	r3, #9
 80086a2:	f200 8097 	bhi.w	80087d4 <prvProcessReceivedCommands+0x1a0>
 80086a6:	a201      	add	r2, pc, #4	@ (adr r2, 80086ac <prvProcessReceivedCommands+0x78>)
 80086a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ac:	080086d5 	.word	0x080086d5
 80086b0:	080086d5 	.word	0x080086d5
 80086b4:	080086d5 	.word	0x080086d5
 80086b8:	0800874b 	.word	0x0800874b
 80086bc:	0800875f 	.word	0x0800875f
 80086c0:	080087ab 	.word	0x080087ab
 80086c4:	080086d5 	.word	0x080086d5
 80086c8:	080086d5 	.word	0x080086d5
 80086cc:	0800874b 	.word	0x0800874b
 80086d0:	0800875f 	.word	0x0800875f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086da:	f043 0301 	orr.w	r3, r3, #1
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	18d1      	adds	r1, r2, r3
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086f4:	f7ff ff5c 	bl	80085b0 <prvInsertTimerInActiveList>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d06c      	beq.n	80087d8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008704:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008708:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800870c:	f003 0304 	and.w	r3, r3, #4
 8008710:	2b00      	cmp	r3, #0
 8008712:	d061      	beq.n	80087d8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	441a      	add	r2, r3
 800871c:	2300      	movs	r3, #0
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	2300      	movs	r3, #0
 8008722:	2100      	movs	r1, #0
 8008724:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008726:	f7ff fe01 	bl	800832c <xTimerGenericCommand>
 800872a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d152      	bne.n	80087d8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	61bb      	str	r3, [r7, #24]
}
 8008744:	bf00      	nop
 8008746:	bf00      	nop
 8008748:	e7fd      	b.n	8008746 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800874a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008750:	f023 0301 	bic.w	r3, r3, #1
 8008754:	b2da      	uxtb	r2, r3
 8008756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008758:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800875c:	e03d      	b.n	80087da <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800875e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008760:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008764:	f043 0301 	orr.w	r3, r3, #1
 8008768:	b2da      	uxtb	r2, r3
 800876a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008774:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10b      	bne.n	8008796 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	617b      	str	r3, [r7, #20]
}
 8008790:	bf00      	nop
 8008792:	bf00      	nop
 8008794:	e7fd      	b.n	8008792 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008798:	699a      	ldr	r2, [r3, #24]
 800879a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879c:	18d1      	adds	r1, r2, r3
 800879e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087a4:	f7ff ff04 	bl	80085b0 <prvInsertTimerInActiveList>
					break;
 80087a8:	e017      	b.n	80087da <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087b0:	f003 0302 	and.w	r3, r3, #2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d103      	bne.n	80087c0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80087b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087ba:	f000 fbe5 	bl	8008f88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087be:	e00c      	b.n	80087da <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087c6:	f023 0301 	bic.w	r3, r3, #1
 80087ca:	b2da      	uxtb	r2, r3
 80087cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80087d2:	e002      	b.n	80087da <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80087d4:	bf00      	nop
 80087d6:	e000      	b.n	80087da <prvProcessReceivedCommands+0x1a6>
					break;
 80087d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087da:	4b08      	ldr	r3, [pc, #32]	@ (80087fc <prvProcessReceivedCommands+0x1c8>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	1d39      	adds	r1, r7, #4
 80087e0:	2200      	movs	r2, #0
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fe f8d6 	bl	8006994 <xQueueReceive>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f47f af26 	bne.w	800863c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80087f0:	bf00      	nop
 80087f2:	bf00      	nop
 80087f4:	3730      	adds	r7, #48	@ 0x30
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	20001898 	.word	0x20001898

08008800 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b088      	sub	sp, #32
 8008804:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008806:	e049      	b.n	800889c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008808:	4b2e      	ldr	r3, [pc, #184]	@ (80088c4 <prvSwitchTimerLists+0xc4>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008812:	4b2c      	ldr	r3, [pc, #176]	@ (80088c4 <prvSwitchTimerLists+0xc4>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	3304      	adds	r3, #4
 8008820:	4618      	mov	r0, r3
 8008822:	f7fd fca9 	bl	8006178 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008834:	f003 0304 	and.w	r3, r3, #4
 8008838:	2b00      	cmp	r3, #0
 800883a:	d02f      	beq.n	800889c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	4413      	add	r3, r2
 8008844:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	429a      	cmp	r2, r3
 800884c:	d90e      	bls.n	800886c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800885a:	4b1a      	ldr	r3, [pc, #104]	@ (80088c4 <prvSwitchTimerLists+0xc4>)
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3304      	adds	r3, #4
 8008862:	4619      	mov	r1, r3
 8008864:	4610      	mov	r0, r2
 8008866:	f7fd fc4e 	bl	8006106 <vListInsert>
 800886a:	e017      	b.n	800889c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800886c:	2300      	movs	r3, #0
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	2300      	movs	r3, #0
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	2100      	movs	r1, #0
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f7ff fd58 	bl	800832c <xTimerGenericCommand>
 800887c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10b      	bne.n	800889c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008888:	f383 8811 	msr	BASEPRI, r3
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	603b      	str	r3, [r7, #0]
}
 8008896:	bf00      	nop
 8008898:	bf00      	nop
 800889a:	e7fd      	b.n	8008898 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800889c:	4b09      	ldr	r3, [pc, #36]	@ (80088c4 <prvSwitchTimerLists+0xc4>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1b0      	bne.n	8008808 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088a6:	4b07      	ldr	r3, [pc, #28]	@ (80088c4 <prvSwitchTimerLists+0xc4>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088ac:	4b06      	ldr	r3, [pc, #24]	@ (80088c8 <prvSwitchTimerLists+0xc8>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a04      	ldr	r2, [pc, #16]	@ (80088c4 <prvSwitchTimerLists+0xc4>)
 80088b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088b4:	4a04      	ldr	r2, [pc, #16]	@ (80088c8 <prvSwitchTimerLists+0xc8>)
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	6013      	str	r3, [r2, #0]
}
 80088ba:	bf00      	nop
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20001890 	.word	0x20001890
 80088c8:	20001894 	.word	0x20001894

080088cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088d2:	f000 f969 	bl	8008ba8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088d6:	4b15      	ldr	r3, [pc, #84]	@ (800892c <prvCheckForValidListAndQueue+0x60>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d120      	bne.n	8008920 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088de:	4814      	ldr	r0, [pc, #80]	@ (8008930 <prvCheckForValidListAndQueue+0x64>)
 80088e0:	f7fd fbc0 	bl	8006064 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088e4:	4813      	ldr	r0, [pc, #76]	@ (8008934 <prvCheckForValidListAndQueue+0x68>)
 80088e6:	f7fd fbbd 	bl	8006064 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088ea:	4b13      	ldr	r3, [pc, #76]	@ (8008938 <prvCheckForValidListAndQueue+0x6c>)
 80088ec:	4a10      	ldr	r2, [pc, #64]	@ (8008930 <prvCheckForValidListAndQueue+0x64>)
 80088ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088f0:	4b12      	ldr	r3, [pc, #72]	@ (800893c <prvCheckForValidListAndQueue+0x70>)
 80088f2:	4a10      	ldr	r2, [pc, #64]	@ (8008934 <prvCheckForValidListAndQueue+0x68>)
 80088f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088f6:	2300      	movs	r3, #0
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	4b11      	ldr	r3, [pc, #68]	@ (8008940 <prvCheckForValidListAndQueue+0x74>)
 80088fc:	4a11      	ldr	r2, [pc, #68]	@ (8008944 <prvCheckForValidListAndQueue+0x78>)
 80088fe:	2110      	movs	r1, #16
 8008900:	200a      	movs	r0, #10
 8008902:	f7fd fccd 	bl	80062a0 <xQueueGenericCreateStatic>
 8008906:	4603      	mov	r3, r0
 8008908:	4a08      	ldr	r2, [pc, #32]	@ (800892c <prvCheckForValidListAndQueue+0x60>)
 800890a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800890c:	4b07      	ldr	r3, [pc, #28]	@ (800892c <prvCheckForValidListAndQueue+0x60>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d005      	beq.n	8008920 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008914:	4b05      	ldr	r3, [pc, #20]	@ (800892c <prvCheckForValidListAndQueue+0x60>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	490b      	ldr	r1, [pc, #44]	@ (8008948 <prvCheckForValidListAndQueue+0x7c>)
 800891a:	4618      	mov	r0, r3
 800891c:	f7fe fbfa 	bl	8007114 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008920:	f000 f974 	bl	8008c0c <vPortExitCritical>
}
 8008924:	bf00      	nop
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	20001898 	.word	0x20001898
 8008930:	20001868 	.word	0x20001868
 8008934:	2000187c 	.word	0x2000187c
 8008938:	20001890 	.word	0x20001890
 800893c:	20001894 	.word	0x20001894
 8008940:	20001944 	.word	0x20001944
 8008944:	200018a4 	.word	0x200018a4
 8008948:	0800adb8 	.word	0x0800adb8

0800894c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	3b04      	subs	r3, #4
 800895c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	3b04      	subs	r3, #4
 800896a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f023 0201 	bic.w	r2, r3, #1
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3b04      	subs	r3, #4
 800897a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800897c:	4a0c      	ldr	r2, [pc, #48]	@ (80089b0 <pxPortInitialiseStack+0x64>)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	3b14      	subs	r3, #20
 8008986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	3b04      	subs	r3, #4
 8008992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f06f 0202 	mvn.w	r2, #2
 800899a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	3b20      	subs	r3, #32
 80089a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089a2:	68fb      	ldr	r3, [r7, #12]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3714      	adds	r7, #20
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	080089b5 	.word	0x080089b5

080089b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089ba:	2300      	movs	r3, #0
 80089bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089be:	4b13      	ldr	r3, [pc, #76]	@ (8008a0c <prvTaskExitError+0x58>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c6:	d00b      	beq.n	80089e0 <prvTaskExitError+0x2c>
	__asm volatile
 80089c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	60fb      	str	r3, [r7, #12]
}
 80089da:	bf00      	nop
 80089dc:	bf00      	nop
 80089de:	e7fd      	b.n	80089dc <prvTaskExitError+0x28>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	60bb      	str	r3, [r7, #8]
}
 80089f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089f4:	bf00      	nop
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0fc      	beq.n	80089f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089fc:	bf00      	nop
 80089fe:	bf00      	nop
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	20000020 	.word	0x20000020

08008a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a10:	4b07      	ldr	r3, [pc, #28]	@ (8008a30 <pxCurrentTCBConst2>)
 8008a12:	6819      	ldr	r1, [r3, #0]
 8008a14:	6808      	ldr	r0, [r1, #0]
 8008a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1a:	f380 8809 	msr	PSP, r0
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	f380 8811 	msr	BASEPRI, r0
 8008a2a:	4770      	bx	lr
 8008a2c:	f3af 8000 	nop.w

08008a30 <pxCurrentTCBConst2>:
 8008a30:	20001368 	.word	0x20001368
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop

08008a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a38:	4808      	ldr	r0, [pc, #32]	@ (8008a5c <prvPortStartFirstTask+0x24>)
 8008a3a:	6800      	ldr	r0, [r0, #0]
 8008a3c:	6800      	ldr	r0, [r0, #0]
 8008a3e:	f380 8808 	msr	MSP, r0
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f380 8814 	msr	CONTROL, r0
 8008a4a:	b662      	cpsie	i
 8008a4c:	b661      	cpsie	f
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	df00      	svc	0
 8008a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a5a:	bf00      	nop
 8008a5c:	e000ed08 	.word	0xe000ed08

08008a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a66:	4b47      	ldr	r3, [pc, #284]	@ (8008b84 <xPortStartScheduler+0x124>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a47      	ldr	r2, [pc, #284]	@ (8008b88 <xPortStartScheduler+0x128>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d10b      	bne.n	8008a88 <xPortStartScheduler+0x28>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	613b      	str	r3, [r7, #16]
}
 8008a82:	bf00      	nop
 8008a84:	bf00      	nop
 8008a86:	e7fd      	b.n	8008a84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a88:	4b3e      	ldr	r3, [pc, #248]	@ (8008b84 <xPortStartScheduler+0x124>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a3f      	ldr	r2, [pc, #252]	@ (8008b8c <xPortStartScheduler+0x12c>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d10b      	bne.n	8008aaa <xPortStartScheduler+0x4a>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	60fb      	str	r3, [r7, #12]
}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop
 8008aa8:	e7fd      	b.n	8008aa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008aaa:	4b39      	ldr	r3, [pc, #228]	@ (8008b90 <xPortStartScheduler+0x130>)
 8008aac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	22ff      	movs	r2, #255	@ 0xff
 8008aba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ac4:	78fb      	ldrb	r3, [r7, #3]
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	4b31      	ldr	r3, [pc, #196]	@ (8008b94 <xPortStartScheduler+0x134>)
 8008ad0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ad2:	4b31      	ldr	r3, [pc, #196]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008ad4:	2207      	movs	r2, #7
 8008ad6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ad8:	e009      	b.n	8008aee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008ada:	4b2f      	ldr	r3, [pc, #188]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008ae2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	005b      	lsls	r3, r3, #1
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aee:	78fb      	ldrb	r3, [r7, #3]
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008af6:	2b80      	cmp	r3, #128	@ 0x80
 8008af8:	d0ef      	beq.n	8008ada <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008afa:	4b27      	ldr	r3, [pc, #156]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f1c3 0307 	rsb	r3, r3, #7
 8008b02:	2b04      	cmp	r3, #4
 8008b04:	d00b      	beq.n	8008b1e <xPortStartScheduler+0xbe>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	60bb      	str	r3, [r7, #8]
}
 8008b18:	bf00      	nop
 8008b1a:	bf00      	nop
 8008b1c:	e7fd      	b.n	8008b1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	021b      	lsls	r3, r3, #8
 8008b24:	4a1c      	ldr	r2, [pc, #112]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008b26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b28:	4b1b      	ldr	r3, [pc, #108]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b30:	4a19      	ldr	r2, [pc, #100]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008b32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b3c:	4b17      	ldr	r3, [pc, #92]	@ (8008b9c <xPortStartScheduler+0x13c>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a16      	ldr	r2, [pc, #88]	@ (8008b9c <xPortStartScheduler+0x13c>)
 8008b42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b48:	4b14      	ldr	r3, [pc, #80]	@ (8008b9c <xPortStartScheduler+0x13c>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a13      	ldr	r2, [pc, #76]	@ (8008b9c <xPortStartScheduler+0x13c>)
 8008b4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008b52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b54:	f000 f8da 	bl	8008d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b58:	4b11      	ldr	r3, [pc, #68]	@ (8008ba0 <xPortStartScheduler+0x140>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b5e:	f000 f8f9 	bl	8008d54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b62:	4b10      	ldr	r3, [pc, #64]	@ (8008ba4 <xPortStartScheduler+0x144>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a0f      	ldr	r2, [pc, #60]	@ (8008ba4 <xPortStartScheduler+0x144>)
 8008b68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008b6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b6e:	f7ff ff63 	bl	8008a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b72:	f7fe ff31 	bl	80079d8 <vTaskSwitchContext>
	prvTaskExitError();
 8008b76:	f7ff ff1d 	bl	80089b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3718      	adds	r7, #24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	e000ed00 	.word	0xe000ed00
 8008b88:	410fc271 	.word	0x410fc271
 8008b8c:	410fc270 	.word	0x410fc270
 8008b90:	e000e400 	.word	0xe000e400
 8008b94:	20001994 	.word	0x20001994
 8008b98:	20001998 	.word	0x20001998
 8008b9c:	e000ed20 	.word	0xe000ed20
 8008ba0:	20000020 	.word	0x20000020
 8008ba4:	e000ef34 	.word	0xe000ef34

08008ba8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	607b      	str	r3, [r7, #4]
}
 8008bc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bc2:	4b10      	ldr	r3, [pc, #64]	@ (8008c04 <vPortEnterCritical+0x5c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8008c04 <vPortEnterCritical+0x5c>)
 8008bca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8008c04 <vPortEnterCritical+0x5c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d110      	bne.n	8008bf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008c08 <vPortEnterCritical+0x60>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00b      	beq.n	8008bf6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	603b      	str	r3, [r7, #0]
}
 8008bf0:	bf00      	nop
 8008bf2:	bf00      	nop
 8008bf4:	e7fd      	b.n	8008bf2 <vPortEnterCritical+0x4a>
	}
}
 8008bf6:	bf00      	nop
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	20000020 	.word	0x20000020
 8008c08:	e000ed04 	.word	0xe000ed04

08008c0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c12:	4b12      	ldr	r3, [pc, #72]	@ (8008c5c <vPortExitCritical+0x50>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10b      	bne.n	8008c32 <vPortExitCritical+0x26>
	__asm volatile
 8008c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	607b      	str	r3, [r7, #4]
}
 8008c2c:	bf00      	nop
 8008c2e:	bf00      	nop
 8008c30:	e7fd      	b.n	8008c2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c32:	4b0a      	ldr	r3, [pc, #40]	@ (8008c5c <vPortExitCritical+0x50>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	3b01      	subs	r3, #1
 8008c38:	4a08      	ldr	r2, [pc, #32]	@ (8008c5c <vPortExitCritical+0x50>)
 8008c3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c3c:	4b07      	ldr	r3, [pc, #28]	@ (8008c5c <vPortExitCritical+0x50>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d105      	bne.n	8008c50 <vPortExitCritical+0x44>
 8008c44:	2300      	movs	r3, #0
 8008c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	f383 8811 	msr	BASEPRI, r3
}
 8008c4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	20000020 	.word	0x20000020

08008c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c60:	f3ef 8009 	mrs	r0, PSP
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	4b15      	ldr	r3, [pc, #84]	@ (8008cc0 <pxCurrentTCBConst>)
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	f01e 0f10 	tst.w	lr, #16
 8008c70:	bf08      	it	eq
 8008c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7a:	6010      	str	r0, [r2, #0]
 8008c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008c84:	f380 8811 	msr	BASEPRI, r0
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f7fe fea2 	bl	80079d8 <vTaskSwitchContext>
 8008c94:	f04f 0000 	mov.w	r0, #0
 8008c98:	f380 8811 	msr	BASEPRI, r0
 8008c9c:	bc09      	pop	{r0, r3}
 8008c9e:	6819      	ldr	r1, [r3, #0]
 8008ca0:	6808      	ldr	r0, [r1, #0]
 8008ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca6:	f01e 0f10 	tst.w	lr, #16
 8008caa:	bf08      	it	eq
 8008cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cb0:	f380 8809 	msr	PSP, r0
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	f3af 8000 	nop.w

08008cc0 <pxCurrentTCBConst>:
 8008cc0:	20001368 	.word	0x20001368
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop

08008cc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	607b      	str	r3, [r7, #4]
}
 8008ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ce2:	f7fe fdbf 	bl	8007864 <xTaskIncrementTick>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cec:	4b06      	ldr	r3, [pc, #24]	@ (8008d08 <xPortSysTickHandler+0x40>)
 8008cee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	f383 8811 	msr	BASEPRI, r3
}
 8008cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d00:	bf00      	nop
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	e000ed04 	.word	0xe000ed04

08008d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d10:	4b0b      	ldr	r3, [pc, #44]	@ (8008d40 <vPortSetupTimerInterrupt+0x34>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d16:	4b0b      	ldr	r3, [pc, #44]	@ (8008d44 <vPortSetupTimerInterrupt+0x38>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d48 <vPortSetupTimerInterrupt+0x3c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a0a      	ldr	r2, [pc, #40]	@ (8008d4c <vPortSetupTimerInterrupt+0x40>)
 8008d22:	fba2 2303 	umull	r2, r3, r2, r3
 8008d26:	099b      	lsrs	r3, r3, #6
 8008d28:	4a09      	ldr	r2, [pc, #36]	@ (8008d50 <vPortSetupTimerInterrupt+0x44>)
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d2e:	4b04      	ldr	r3, [pc, #16]	@ (8008d40 <vPortSetupTimerInterrupt+0x34>)
 8008d30:	2207      	movs	r2, #7
 8008d32:	601a      	str	r2, [r3, #0]
}
 8008d34:	bf00      	nop
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	e000e010 	.word	0xe000e010
 8008d44:	e000e018 	.word	0xe000e018
 8008d48:	20000014 	.word	0x20000014
 8008d4c:	10624dd3 	.word	0x10624dd3
 8008d50:	e000e014 	.word	0xe000e014

08008d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008d64 <vPortEnableVFP+0x10>
 8008d58:	6801      	ldr	r1, [r0, #0]
 8008d5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008d5e:	6001      	str	r1, [r0, #0]
 8008d60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d62:	bf00      	nop
 8008d64:	e000ed88 	.word	0xe000ed88

08008d68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d6e:	f3ef 8305 	mrs	r3, IPSR
 8008d72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2b0f      	cmp	r3, #15
 8008d78:	d915      	bls.n	8008da6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d7a:	4a18      	ldr	r2, [pc, #96]	@ (8008ddc <vPortValidateInterruptPriority+0x74>)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	4413      	add	r3, r2
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d84:	4b16      	ldr	r3, [pc, #88]	@ (8008de0 <vPortValidateInterruptPriority+0x78>)
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	7afa      	ldrb	r2, [r7, #11]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d20b      	bcs.n	8008da6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	607b      	str	r3, [r7, #4]
}
 8008da0:	bf00      	nop
 8008da2:	bf00      	nop
 8008da4:	e7fd      	b.n	8008da2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008da6:	4b0f      	ldr	r3, [pc, #60]	@ (8008de4 <vPortValidateInterruptPriority+0x7c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008dae:	4b0e      	ldr	r3, [pc, #56]	@ (8008de8 <vPortValidateInterruptPriority+0x80>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d90b      	bls.n	8008dce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	603b      	str	r3, [r7, #0]
}
 8008dc8:	bf00      	nop
 8008dca:	bf00      	nop
 8008dcc:	e7fd      	b.n	8008dca <vPortValidateInterruptPriority+0x62>
	}
 8008dce:	bf00      	nop
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	e000e3f0 	.word	0xe000e3f0
 8008de0:	20001994 	.word	0x20001994
 8008de4:	e000ed0c 	.word	0xe000ed0c
 8008de8:	20001998 	.word	0x20001998

08008dec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b08a      	sub	sp, #40	@ 0x28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008df4:	2300      	movs	r3, #0
 8008df6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008df8:	f7fe fc78 	bl	80076ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8008f70 <pvPortMalloc+0x184>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d101      	bne.n	8008e08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e04:	f000 f924 	bl	8009050 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e08:	4b5a      	ldr	r3, [pc, #360]	@ (8008f74 <pvPortMalloc+0x188>)
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4013      	ands	r3, r2
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f040 8095 	bne.w	8008f40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d01e      	beq.n	8008e5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008e1c:	2208      	movs	r2, #8
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4413      	add	r3, r2
 8008e22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f003 0307 	and.w	r3, r3, #7
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d015      	beq.n	8008e5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f023 0307 	bic.w	r3, r3, #7
 8008e34:	3308      	adds	r3, #8
 8008e36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f003 0307 	and.w	r3, r3, #7
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <pvPortMalloc+0x6e>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	617b      	str	r3, [r7, #20]
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop
 8008e58:	e7fd      	b.n	8008e56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d06f      	beq.n	8008f40 <pvPortMalloc+0x154>
 8008e60:	4b45      	ldr	r3, [pc, #276]	@ (8008f78 <pvPortMalloc+0x18c>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d86a      	bhi.n	8008f40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e6a:	4b44      	ldr	r3, [pc, #272]	@ (8008f7c <pvPortMalloc+0x190>)
 8008e6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e6e:	4b43      	ldr	r3, [pc, #268]	@ (8008f7c <pvPortMalloc+0x190>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e74:	e004      	b.n	8008e80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d903      	bls.n	8008e92 <pvPortMalloc+0xa6>
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1f1      	bne.n	8008e76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e92:	4b37      	ldr	r3, [pc, #220]	@ (8008f70 <pvPortMalloc+0x184>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d051      	beq.n	8008f40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2208      	movs	r2, #8
 8008ea2:	4413      	add	r3, r2
 8008ea4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb0:	685a      	ldr	r2, [r3, #4]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	1ad2      	subs	r2, r2, r3
 8008eb6:	2308      	movs	r3, #8
 8008eb8:	005b      	lsls	r3, r3, #1
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d920      	bls.n	8008f00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	f003 0307 	and.w	r3, r3, #7
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00b      	beq.n	8008ee8 <pvPortMalloc+0xfc>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	613b      	str	r3, [r7, #16]
}
 8008ee2:	bf00      	nop
 8008ee4:	bf00      	nop
 8008ee6:	e7fd      	b.n	8008ee4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	1ad2      	subs	r2, r2, r3
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008efa:	69b8      	ldr	r0, [r7, #24]
 8008efc:	f000 f90a 	bl	8009114 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f00:	4b1d      	ldr	r3, [pc, #116]	@ (8008f78 <pvPortMalloc+0x18c>)
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8008f78 <pvPortMalloc+0x18c>)
 8008f0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8008f78 <pvPortMalloc+0x18c>)
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	4b1b      	ldr	r3, [pc, #108]	@ (8008f80 <pvPortMalloc+0x194>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d203      	bcs.n	8008f22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f1a:	4b17      	ldr	r3, [pc, #92]	@ (8008f78 <pvPortMalloc+0x18c>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a18      	ldr	r2, [pc, #96]	@ (8008f80 <pvPortMalloc+0x194>)
 8008f20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	4b13      	ldr	r3, [pc, #76]	@ (8008f74 <pvPortMalloc+0x188>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	431a      	orrs	r2, r3
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f32:	2200      	movs	r2, #0
 8008f34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f36:	4b13      	ldr	r3, [pc, #76]	@ (8008f84 <pvPortMalloc+0x198>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	4a11      	ldr	r2, [pc, #68]	@ (8008f84 <pvPortMalloc+0x198>)
 8008f3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f40:	f7fe fbe2 	bl	8007708 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	f003 0307 	and.w	r3, r3, #7
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00b      	beq.n	8008f66 <pvPortMalloc+0x17a>
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	60fb      	str	r3, [r7, #12]
}
 8008f60:	bf00      	nop
 8008f62:	bf00      	nop
 8008f64:	e7fd      	b.n	8008f62 <pvPortMalloc+0x176>
	return pvReturn;
 8008f66:	69fb      	ldr	r3, [r7, #28]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3728      	adds	r7, #40	@ 0x28
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	200055a4 	.word	0x200055a4
 8008f74:	200055b8 	.word	0x200055b8
 8008f78:	200055a8 	.word	0x200055a8
 8008f7c:	2000559c 	.word	0x2000559c
 8008f80:	200055ac 	.word	0x200055ac
 8008f84:	200055b0 	.word	0x200055b0

08008f88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d04f      	beq.n	800903a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f9a:	2308      	movs	r3, #8
 8008f9c:	425b      	negs	r3, r3
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	4b25      	ldr	r3, [pc, #148]	@ (8009044 <vPortFree+0xbc>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10b      	bne.n	8008fce <vPortFree+0x46>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	60fb      	str	r3, [r7, #12]
}
 8008fc8:	bf00      	nop
 8008fca:	bf00      	nop
 8008fcc:	e7fd      	b.n	8008fca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00b      	beq.n	8008fee <vPortFree+0x66>
	__asm volatile
 8008fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	60bb      	str	r3, [r7, #8]
}
 8008fe8:	bf00      	nop
 8008fea:	bf00      	nop
 8008fec:	e7fd      	b.n	8008fea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	685a      	ldr	r2, [r3, #4]
 8008ff2:	4b14      	ldr	r3, [pc, #80]	@ (8009044 <vPortFree+0xbc>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d01e      	beq.n	800903a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d11a      	bne.n	800903a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	685a      	ldr	r2, [r3, #4]
 8009008:	4b0e      	ldr	r3, [pc, #56]	@ (8009044 <vPortFree+0xbc>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	43db      	mvns	r3, r3
 800900e:	401a      	ands	r2, r3
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009014:	f7fe fb6a 	bl	80076ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	4b0a      	ldr	r3, [pc, #40]	@ (8009048 <vPortFree+0xc0>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4413      	add	r3, r2
 8009022:	4a09      	ldr	r2, [pc, #36]	@ (8009048 <vPortFree+0xc0>)
 8009024:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009026:	6938      	ldr	r0, [r7, #16]
 8009028:	f000 f874 	bl	8009114 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800902c:	4b07      	ldr	r3, [pc, #28]	@ (800904c <vPortFree+0xc4>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3301      	adds	r3, #1
 8009032:	4a06      	ldr	r2, [pc, #24]	@ (800904c <vPortFree+0xc4>)
 8009034:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009036:	f7fe fb67 	bl	8007708 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800903a:	bf00      	nop
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	200055b8 	.word	0x200055b8
 8009048:	200055a8 	.word	0x200055a8
 800904c:	200055b4 	.word	0x200055b4

08009050 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009056:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800905a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800905c:	4b27      	ldr	r3, [pc, #156]	@ (80090fc <prvHeapInit+0xac>)
 800905e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f003 0307 	and.w	r3, r3, #7
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00c      	beq.n	8009084 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	3307      	adds	r3, #7
 800906e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f023 0307 	bic.w	r3, r3, #7
 8009076:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	4a1f      	ldr	r2, [pc, #124]	@ (80090fc <prvHeapInit+0xac>)
 8009080:	4413      	add	r3, r2
 8009082:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009088:	4a1d      	ldr	r2, [pc, #116]	@ (8009100 <prvHeapInit+0xb0>)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800908e:	4b1c      	ldr	r3, [pc, #112]	@ (8009100 <prvHeapInit+0xb0>)
 8009090:	2200      	movs	r2, #0
 8009092:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	4413      	add	r3, r2
 800909a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800909c:	2208      	movs	r2, #8
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	1a9b      	subs	r3, r3, r2
 80090a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f023 0307 	bic.w	r3, r3, #7
 80090aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	4a15      	ldr	r2, [pc, #84]	@ (8009104 <prvHeapInit+0xb4>)
 80090b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090b2:	4b14      	ldr	r3, [pc, #80]	@ (8009104 <prvHeapInit+0xb4>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2200      	movs	r2, #0
 80090b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090ba:	4b12      	ldr	r3, [pc, #72]	@ (8009104 <prvHeapInit+0xb4>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2200      	movs	r2, #0
 80090c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	1ad2      	subs	r2, r2, r3
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009104 <prvHeapInit+0xb4>)
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	4a0a      	ldr	r2, [pc, #40]	@ (8009108 <prvHeapInit+0xb8>)
 80090de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	4a09      	ldr	r2, [pc, #36]	@ (800910c <prvHeapInit+0xbc>)
 80090e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090e8:	4b09      	ldr	r3, [pc, #36]	@ (8009110 <prvHeapInit+0xc0>)
 80090ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80090ee:	601a      	str	r2, [r3, #0]
}
 80090f0:	bf00      	nop
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr
 80090fc:	2000199c 	.word	0x2000199c
 8009100:	2000559c 	.word	0x2000559c
 8009104:	200055a4 	.word	0x200055a4
 8009108:	200055ac 	.word	0x200055ac
 800910c:	200055a8 	.word	0x200055a8
 8009110:	200055b8 	.word	0x200055b8

08009114 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800911c:	4b28      	ldr	r3, [pc, #160]	@ (80091c0 <prvInsertBlockIntoFreeList+0xac>)
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	e002      	b.n	8009128 <prvInsertBlockIntoFreeList+0x14>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	60fb      	str	r3, [r7, #12]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	429a      	cmp	r2, r3
 8009130:	d8f7      	bhi.n	8009122 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	4413      	add	r3, r2
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	429a      	cmp	r2, r3
 8009142:	d108      	bne.n	8009156 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	685a      	ldr	r2, [r3, #4]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	441a      	add	r2, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	441a      	add	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	429a      	cmp	r2, r3
 8009168:	d118      	bne.n	800919c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	4b15      	ldr	r3, [pc, #84]	@ (80091c4 <prvInsertBlockIntoFreeList+0xb0>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	429a      	cmp	r2, r3
 8009174:	d00d      	beq.n	8009192 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	441a      	add	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	601a      	str	r2, [r3, #0]
 8009190:	e008      	b.n	80091a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009192:	4b0c      	ldr	r3, [pc, #48]	@ (80091c4 <prvInsertBlockIntoFreeList+0xb0>)
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	601a      	str	r2, [r3, #0]
 800919a:	e003      	b.n	80091a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d002      	beq.n	80091b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091b2:	bf00      	nop
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	2000559c 	.word	0x2000559c
 80091c4:	200055a4 	.word	0x200055a4

080091c8 <sniprintf>:
 80091c8:	b40c      	push	{r2, r3}
 80091ca:	b530      	push	{r4, r5, lr}
 80091cc:	4b17      	ldr	r3, [pc, #92]	@ (800922c <sniprintf+0x64>)
 80091ce:	1e0c      	subs	r4, r1, #0
 80091d0:	681d      	ldr	r5, [r3, #0]
 80091d2:	b09d      	sub	sp, #116	@ 0x74
 80091d4:	da08      	bge.n	80091e8 <sniprintf+0x20>
 80091d6:	238b      	movs	r3, #139	@ 0x8b
 80091d8:	602b      	str	r3, [r5, #0]
 80091da:	f04f 30ff 	mov.w	r0, #4294967295
 80091de:	b01d      	add	sp, #116	@ 0x74
 80091e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091e4:	b002      	add	sp, #8
 80091e6:	4770      	bx	lr
 80091e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80091ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80091f0:	bf14      	ite	ne
 80091f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80091f6:	4623      	moveq	r3, r4
 80091f8:	9304      	str	r3, [sp, #16]
 80091fa:	9307      	str	r3, [sp, #28]
 80091fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009200:	9002      	str	r0, [sp, #8]
 8009202:	9006      	str	r0, [sp, #24]
 8009204:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009208:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800920a:	ab21      	add	r3, sp, #132	@ 0x84
 800920c:	a902      	add	r1, sp, #8
 800920e:	4628      	mov	r0, r5
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	f000 f9f9 	bl	8009608 <_svfiprintf_r>
 8009216:	1c43      	adds	r3, r0, #1
 8009218:	bfbc      	itt	lt
 800921a:	238b      	movlt	r3, #139	@ 0x8b
 800921c:	602b      	strlt	r3, [r5, #0]
 800921e:	2c00      	cmp	r4, #0
 8009220:	d0dd      	beq.n	80091de <sniprintf+0x16>
 8009222:	9b02      	ldr	r3, [sp, #8]
 8009224:	2200      	movs	r2, #0
 8009226:	701a      	strb	r2, [r3, #0]
 8009228:	e7d9      	b.n	80091de <sniprintf+0x16>
 800922a:	bf00      	nop
 800922c:	20000024 	.word	0x20000024

08009230 <memset>:
 8009230:	4402      	add	r2, r0
 8009232:	4603      	mov	r3, r0
 8009234:	4293      	cmp	r3, r2
 8009236:	d100      	bne.n	800923a <memset+0xa>
 8009238:	4770      	bx	lr
 800923a:	f803 1b01 	strb.w	r1, [r3], #1
 800923e:	e7f9      	b.n	8009234 <memset+0x4>

08009240 <_reclaim_reent>:
 8009240:	4b29      	ldr	r3, [pc, #164]	@ (80092e8 <_reclaim_reent+0xa8>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4283      	cmp	r3, r0
 8009246:	b570      	push	{r4, r5, r6, lr}
 8009248:	4604      	mov	r4, r0
 800924a:	d04b      	beq.n	80092e4 <_reclaim_reent+0xa4>
 800924c:	69c3      	ldr	r3, [r0, #28]
 800924e:	b1ab      	cbz	r3, 800927c <_reclaim_reent+0x3c>
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	b16b      	cbz	r3, 8009270 <_reclaim_reent+0x30>
 8009254:	2500      	movs	r5, #0
 8009256:	69e3      	ldr	r3, [r4, #28]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	5959      	ldr	r1, [r3, r5]
 800925c:	2900      	cmp	r1, #0
 800925e:	d13b      	bne.n	80092d8 <_reclaim_reent+0x98>
 8009260:	3504      	adds	r5, #4
 8009262:	2d80      	cmp	r5, #128	@ 0x80
 8009264:	d1f7      	bne.n	8009256 <_reclaim_reent+0x16>
 8009266:	69e3      	ldr	r3, [r4, #28]
 8009268:	4620      	mov	r0, r4
 800926a:	68d9      	ldr	r1, [r3, #12]
 800926c:	f000 f878 	bl	8009360 <_free_r>
 8009270:	69e3      	ldr	r3, [r4, #28]
 8009272:	6819      	ldr	r1, [r3, #0]
 8009274:	b111      	cbz	r1, 800927c <_reclaim_reent+0x3c>
 8009276:	4620      	mov	r0, r4
 8009278:	f000 f872 	bl	8009360 <_free_r>
 800927c:	6961      	ldr	r1, [r4, #20]
 800927e:	b111      	cbz	r1, 8009286 <_reclaim_reent+0x46>
 8009280:	4620      	mov	r0, r4
 8009282:	f000 f86d 	bl	8009360 <_free_r>
 8009286:	69e1      	ldr	r1, [r4, #28]
 8009288:	b111      	cbz	r1, 8009290 <_reclaim_reent+0x50>
 800928a:	4620      	mov	r0, r4
 800928c:	f000 f868 	bl	8009360 <_free_r>
 8009290:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009292:	b111      	cbz	r1, 800929a <_reclaim_reent+0x5a>
 8009294:	4620      	mov	r0, r4
 8009296:	f000 f863 	bl	8009360 <_free_r>
 800929a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800929c:	b111      	cbz	r1, 80092a4 <_reclaim_reent+0x64>
 800929e:	4620      	mov	r0, r4
 80092a0:	f000 f85e 	bl	8009360 <_free_r>
 80092a4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80092a6:	b111      	cbz	r1, 80092ae <_reclaim_reent+0x6e>
 80092a8:	4620      	mov	r0, r4
 80092aa:	f000 f859 	bl	8009360 <_free_r>
 80092ae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80092b0:	b111      	cbz	r1, 80092b8 <_reclaim_reent+0x78>
 80092b2:	4620      	mov	r0, r4
 80092b4:	f000 f854 	bl	8009360 <_free_r>
 80092b8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80092ba:	b111      	cbz	r1, 80092c2 <_reclaim_reent+0x82>
 80092bc:	4620      	mov	r0, r4
 80092be:	f000 f84f 	bl	8009360 <_free_r>
 80092c2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80092c4:	b111      	cbz	r1, 80092cc <_reclaim_reent+0x8c>
 80092c6:	4620      	mov	r0, r4
 80092c8:	f000 f84a 	bl	8009360 <_free_r>
 80092cc:	6a23      	ldr	r3, [r4, #32]
 80092ce:	b14b      	cbz	r3, 80092e4 <_reclaim_reent+0xa4>
 80092d0:	4620      	mov	r0, r4
 80092d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80092d6:	4718      	bx	r3
 80092d8:	680e      	ldr	r6, [r1, #0]
 80092da:	4620      	mov	r0, r4
 80092dc:	f000 f840 	bl	8009360 <_free_r>
 80092e0:	4631      	mov	r1, r6
 80092e2:	e7bb      	b.n	800925c <_reclaim_reent+0x1c>
 80092e4:	bd70      	pop	{r4, r5, r6, pc}
 80092e6:	bf00      	nop
 80092e8:	20000024 	.word	0x20000024

080092ec <__errno>:
 80092ec:	4b01      	ldr	r3, [pc, #4]	@ (80092f4 <__errno+0x8>)
 80092ee:	6818      	ldr	r0, [r3, #0]
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	20000024 	.word	0x20000024

080092f8 <__libc_init_array>:
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	4d0d      	ldr	r5, [pc, #52]	@ (8009330 <__libc_init_array+0x38>)
 80092fc:	4c0d      	ldr	r4, [pc, #52]	@ (8009334 <__libc_init_array+0x3c>)
 80092fe:	1b64      	subs	r4, r4, r5
 8009300:	10a4      	asrs	r4, r4, #2
 8009302:	2600      	movs	r6, #0
 8009304:	42a6      	cmp	r6, r4
 8009306:	d109      	bne.n	800931c <__libc_init_array+0x24>
 8009308:	4d0b      	ldr	r5, [pc, #44]	@ (8009338 <__libc_init_array+0x40>)
 800930a:	4c0c      	ldr	r4, [pc, #48]	@ (800933c <__libc_init_array+0x44>)
 800930c:	f001 fc98 	bl	800ac40 <_init>
 8009310:	1b64      	subs	r4, r4, r5
 8009312:	10a4      	asrs	r4, r4, #2
 8009314:	2600      	movs	r6, #0
 8009316:	42a6      	cmp	r6, r4
 8009318:	d105      	bne.n	8009326 <__libc_init_array+0x2e>
 800931a:	bd70      	pop	{r4, r5, r6, pc}
 800931c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009320:	4798      	blx	r3
 8009322:	3601      	adds	r6, #1
 8009324:	e7ee      	b.n	8009304 <__libc_init_array+0xc>
 8009326:	f855 3b04 	ldr.w	r3, [r5], #4
 800932a:	4798      	blx	r3
 800932c:	3601      	adds	r6, #1
 800932e:	e7f2      	b.n	8009316 <__libc_init_array+0x1e>
 8009330:	0800d138 	.word	0x0800d138
 8009334:	0800d138 	.word	0x0800d138
 8009338:	0800d138 	.word	0x0800d138
 800933c:	0800d13c 	.word	0x0800d13c

08009340 <__retarget_lock_acquire_recursive>:
 8009340:	4770      	bx	lr

08009342 <__retarget_lock_release_recursive>:
 8009342:	4770      	bx	lr

08009344 <memcpy>:
 8009344:	440a      	add	r2, r1
 8009346:	4291      	cmp	r1, r2
 8009348:	f100 33ff 	add.w	r3, r0, #4294967295
 800934c:	d100      	bne.n	8009350 <memcpy+0xc>
 800934e:	4770      	bx	lr
 8009350:	b510      	push	{r4, lr}
 8009352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800935a:	4291      	cmp	r1, r2
 800935c:	d1f9      	bne.n	8009352 <memcpy+0xe>
 800935e:	bd10      	pop	{r4, pc}

08009360 <_free_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4605      	mov	r5, r0
 8009364:	2900      	cmp	r1, #0
 8009366:	d041      	beq.n	80093ec <_free_r+0x8c>
 8009368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800936c:	1f0c      	subs	r4, r1, #4
 800936e:	2b00      	cmp	r3, #0
 8009370:	bfb8      	it	lt
 8009372:	18e4      	addlt	r4, r4, r3
 8009374:	f000 f8e0 	bl	8009538 <__malloc_lock>
 8009378:	4a1d      	ldr	r2, [pc, #116]	@ (80093f0 <_free_r+0x90>)
 800937a:	6813      	ldr	r3, [r2, #0]
 800937c:	b933      	cbnz	r3, 800938c <_free_r+0x2c>
 800937e:	6063      	str	r3, [r4, #4]
 8009380:	6014      	str	r4, [r2, #0]
 8009382:	4628      	mov	r0, r5
 8009384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009388:	f000 b8dc 	b.w	8009544 <__malloc_unlock>
 800938c:	42a3      	cmp	r3, r4
 800938e:	d908      	bls.n	80093a2 <_free_r+0x42>
 8009390:	6820      	ldr	r0, [r4, #0]
 8009392:	1821      	adds	r1, r4, r0
 8009394:	428b      	cmp	r3, r1
 8009396:	bf01      	itttt	eq
 8009398:	6819      	ldreq	r1, [r3, #0]
 800939a:	685b      	ldreq	r3, [r3, #4]
 800939c:	1809      	addeq	r1, r1, r0
 800939e:	6021      	streq	r1, [r4, #0]
 80093a0:	e7ed      	b.n	800937e <_free_r+0x1e>
 80093a2:	461a      	mov	r2, r3
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	b10b      	cbz	r3, 80093ac <_free_r+0x4c>
 80093a8:	42a3      	cmp	r3, r4
 80093aa:	d9fa      	bls.n	80093a2 <_free_r+0x42>
 80093ac:	6811      	ldr	r1, [r2, #0]
 80093ae:	1850      	adds	r0, r2, r1
 80093b0:	42a0      	cmp	r0, r4
 80093b2:	d10b      	bne.n	80093cc <_free_r+0x6c>
 80093b4:	6820      	ldr	r0, [r4, #0]
 80093b6:	4401      	add	r1, r0
 80093b8:	1850      	adds	r0, r2, r1
 80093ba:	4283      	cmp	r3, r0
 80093bc:	6011      	str	r1, [r2, #0]
 80093be:	d1e0      	bne.n	8009382 <_free_r+0x22>
 80093c0:	6818      	ldr	r0, [r3, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	6053      	str	r3, [r2, #4]
 80093c6:	4408      	add	r0, r1
 80093c8:	6010      	str	r0, [r2, #0]
 80093ca:	e7da      	b.n	8009382 <_free_r+0x22>
 80093cc:	d902      	bls.n	80093d4 <_free_r+0x74>
 80093ce:	230c      	movs	r3, #12
 80093d0:	602b      	str	r3, [r5, #0]
 80093d2:	e7d6      	b.n	8009382 <_free_r+0x22>
 80093d4:	6820      	ldr	r0, [r4, #0]
 80093d6:	1821      	adds	r1, r4, r0
 80093d8:	428b      	cmp	r3, r1
 80093da:	bf04      	itt	eq
 80093dc:	6819      	ldreq	r1, [r3, #0]
 80093de:	685b      	ldreq	r3, [r3, #4]
 80093e0:	6063      	str	r3, [r4, #4]
 80093e2:	bf04      	itt	eq
 80093e4:	1809      	addeq	r1, r1, r0
 80093e6:	6021      	streq	r1, [r4, #0]
 80093e8:	6054      	str	r4, [r2, #4]
 80093ea:	e7ca      	b.n	8009382 <_free_r+0x22>
 80093ec:	bd38      	pop	{r3, r4, r5, pc}
 80093ee:	bf00      	nop
 80093f0:	20005700 	.word	0x20005700

080093f4 <sbrk_aligned>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	4e0f      	ldr	r6, [pc, #60]	@ (8009434 <sbrk_aligned+0x40>)
 80093f8:	460c      	mov	r4, r1
 80093fa:	6831      	ldr	r1, [r6, #0]
 80093fc:	4605      	mov	r5, r0
 80093fe:	b911      	cbnz	r1, 8009406 <sbrk_aligned+0x12>
 8009400:	f000 fba6 	bl	8009b50 <_sbrk_r>
 8009404:	6030      	str	r0, [r6, #0]
 8009406:	4621      	mov	r1, r4
 8009408:	4628      	mov	r0, r5
 800940a:	f000 fba1 	bl	8009b50 <_sbrk_r>
 800940e:	1c43      	adds	r3, r0, #1
 8009410:	d103      	bne.n	800941a <sbrk_aligned+0x26>
 8009412:	f04f 34ff 	mov.w	r4, #4294967295
 8009416:	4620      	mov	r0, r4
 8009418:	bd70      	pop	{r4, r5, r6, pc}
 800941a:	1cc4      	adds	r4, r0, #3
 800941c:	f024 0403 	bic.w	r4, r4, #3
 8009420:	42a0      	cmp	r0, r4
 8009422:	d0f8      	beq.n	8009416 <sbrk_aligned+0x22>
 8009424:	1a21      	subs	r1, r4, r0
 8009426:	4628      	mov	r0, r5
 8009428:	f000 fb92 	bl	8009b50 <_sbrk_r>
 800942c:	3001      	adds	r0, #1
 800942e:	d1f2      	bne.n	8009416 <sbrk_aligned+0x22>
 8009430:	e7ef      	b.n	8009412 <sbrk_aligned+0x1e>
 8009432:	bf00      	nop
 8009434:	200056fc 	.word	0x200056fc

08009438 <_malloc_r>:
 8009438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800943c:	1ccd      	adds	r5, r1, #3
 800943e:	f025 0503 	bic.w	r5, r5, #3
 8009442:	3508      	adds	r5, #8
 8009444:	2d0c      	cmp	r5, #12
 8009446:	bf38      	it	cc
 8009448:	250c      	movcc	r5, #12
 800944a:	2d00      	cmp	r5, #0
 800944c:	4606      	mov	r6, r0
 800944e:	db01      	blt.n	8009454 <_malloc_r+0x1c>
 8009450:	42a9      	cmp	r1, r5
 8009452:	d904      	bls.n	800945e <_malloc_r+0x26>
 8009454:	230c      	movs	r3, #12
 8009456:	6033      	str	r3, [r6, #0]
 8009458:	2000      	movs	r0, #0
 800945a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800945e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009534 <_malloc_r+0xfc>
 8009462:	f000 f869 	bl	8009538 <__malloc_lock>
 8009466:	f8d8 3000 	ldr.w	r3, [r8]
 800946a:	461c      	mov	r4, r3
 800946c:	bb44      	cbnz	r4, 80094c0 <_malloc_r+0x88>
 800946e:	4629      	mov	r1, r5
 8009470:	4630      	mov	r0, r6
 8009472:	f7ff ffbf 	bl	80093f4 <sbrk_aligned>
 8009476:	1c43      	adds	r3, r0, #1
 8009478:	4604      	mov	r4, r0
 800947a:	d158      	bne.n	800952e <_malloc_r+0xf6>
 800947c:	f8d8 4000 	ldr.w	r4, [r8]
 8009480:	4627      	mov	r7, r4
 8009482:	2f00      	cmp	r7, #0
 8009484:	d143      	bne.n	800950e <_malloc_r+0xd6>
 8009486:	2c00      	cmp	r4, #0
 8009488:	d04b      	beq.n	8009522 <_malloc_r+0xea>
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	4639      	mov	r1, r7
 800948e:	4630      	mov	r0, r6
 8009490:	eb04 0903 	add.w	r9, r4, r3
 8009494:	f000 fb5c 	bl	8009b50 <_sbrk_r>
 8009498:	4581      	cmp	r9, r0
 800949a:	d142      	bne.n	8009522 <_malloc_r+0xea>
 800949c:	6821      	ldr	r1, [r4, #0]
 800949e:	1a6d      	subs	r5, r5, r1
 80094a0:	4629      	mov	r1, r5
 80094a2:	4630      	mov	r0, r6
 80094a4:	f7ff ffa6 	bl	80093f4 <sbrk_aligned>
 80094a8:	3001      	adds	r0, #1
 80094aa:	d03a      	beq.n	8009522 <_malloc_r+0xea>
 80094ac:	6823      	ldr	r3, [r4, #0]
 80094ae:	442b      	add	r3, r5
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	f8d8 3000 	ldr.w	r3, [r8]
 80094b6:	685a      	ldr	r2, [r3, #4]
 80094b8:	bb62      	cbnz	r2, 8009514 <_malloc_r+0xdc>
 80094ba:	f8c8 7000 	str.w	r7, [r8]
 80094be:	e00f      	b.n	80094e0 <_malloc_r+0xa8>
 80094c0:	6822      	ldr	r2, [r4, #0]
 80094c2:	1b52      	subs	r2, r2, r5
 80094c4:	d420      	bmi.n	8009508 <_malloc_r+0xd0>
 80094c6:	2a0b      	cmp	r2, #11
 80094c8:	d917      	bls.n	80094fa <_malloc_r+0xc2>
 80094ca:	1961      	adds	r1, r4, r5
 80094cc:	42a3      	cmp	r3, r4
 80094ce:	6025      	str	r5, [r4, #0]
 80094d0:	bf18      	it	ne
 80094d2:	6059      	strne	r1, [r3, #4]
 80094d4:	6863      	ldr	r3, [r4, #4]
 80094d6:	bf08      	it	eq
 80094d8:	f8c8 1000 	streq.w	r1, [r8]
 80094dc:	5162      	str	r2, [r4, r5]
 80094de:	604b      	str	r3, [r1, #4]
 80094e0:	4630      	mov	r0, r6
 80094e2:	f000 f82f 	bl	8009544 <__malloc_unlock>
 80094e6:	f104 000b 	add.w	r0, r4, #11
 80094ea:	1d23      	adds	r3, r4, #4
 80094ec:	f020 0007 	bic.w	r0, r0, #7
 80094f0:	1ac2      	subs	r2, r0, r3
 80094f2:	bf1c      	itt	ne
 80094f4:	1a1b      	subne	r3, r3, r0
 80094f6:	50a3      	strne	r3, [r4, r2]
 80094f8:	e7af      	b.n	800945a <_malloc_r+0x22>
 80094fa:	6862      	ldr	r2, [r4, #4]
 80094fc:	42a3      	cmp	r3, r4
 80094fe:	bf0c      	ite	eq
 8009500:	f8c8 2000 	streq.w	r2, [r8]
 8009504:	605a      	strne	r2, [r3, #4]
 8009506:	e7eb      	b.n	80094e0 <_malloc_r+0xa8>
 8009508:	4623      	mov	r3, r4
 800950a:	6864      	ldr	r4, [r4, #4]
 800950c:	e7ae      	b.n	800946c <_malloc_r+0x34>
 800950e:	463c      	mov	r4, r7
 8009510:	687f      	ldr	r7, [r7, #4]
 8009512:	e7b6      	b.n	8009482 <_malloc_r+0x4a>
 8009514:	461a      	mov	r2, r3
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	42a3      	cmp	r3, r4
 800951a:	d1fb      	bne.n	8009514 <_malloc_r+0xdc>
 800951c:	2300      	movs	r3, #0
 800951e:	6053      	str	r3, [r2, #4]
 8009520:	e7de      	b.n	80094e0 <_malloc_r+0xa8>
 8009522:	230c      	movs	r3, #12
 8009524:	6033      	str	r3, [r6, #0]
 8009526:	4630      	mov	r0, r6
 8009528:	f000 f80c 	bl	8009544 <__malloc_unlock>
 800952c:	e794      	b.n	8009458 <_malloc_r+0x20>
 800952e:	6005      	str	r5, [r0, #0]
 8009530:	e7d6      	b.n	80094e0 <_malloc_r+0xa8>
 8009532:	bf00      	nop
 8009534:	20005700 	.word	0x20005700

08009538 <__malloc_lock>:
 8009538:	4801      	ldr	r0, [pc, #4]	@ (8009540 <__malloc_lock+0x8>)
 800953a:	f7ff bf01 	b.w	8009340 <__retarget_lock_acquire_recursive>
 800953e:	bf00      	nop
 8009540:	200056f8 	.word	0x200056f8

08009544 <__malloc_unlock>:
 8009544:	4801      	ldr	r0, [pc, #4]	@ (800954c <__malloc_unlock+0x8>)
 8009546:	f7ff befc 	b.w	8009342 <__retarget_lock_release_recursive>
 800954a:	bf00      	nop
 800954c:	200056f8 	.word	0x200056f8

08009550 <__ssputs_r>:
 8009550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009554:	688e      	ldr	r6, [r1, #8]
 8009556:	461f      	mov	r7, r3
 8009558:	42be      	cmp	r6, r7
 800955a:	680b      	ldr	r3, [r1, #0]
 800955c:	4682      	mov	sl, r0
 800955e:	460c      	mov	r4, r1
 8009560:	4690      	mov	r8, r2
 8009562:	d82d      	bhi.n	80095c0 <__ssputs_r+0x70>
 8009564:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009568:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800956c:	d026      	beq.n	80095bc <__ssputs_r+0x6c>
 800956e:	6965      	ldr	r5, [r4, #20]
 8009570:	6909      	ldr	r1, [r1, #16]
 8009572:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009576:	eba3 0901 	sub.w	r9, r3, r1
 800957a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800957e:	1c7b      	adds	r3, r7, #1
 8009580:	444b      	add	r3, r9
 8009582:	106d      	asrs	r5, r5, #1
 8009584:	429d      	cmp	r5, r3
 8009586:	bf38      	it	cc
 8009588:	461d      	movcc	r5, r3
 800958a:	0553      	lsls	r3, r2, #21
 800958c:	d527      	bpl.n	80095de <__ssputs_r+0x8e>
 800958e:	4629      	mov	r1, r5
 8009590:	f7ff ff52 	bl	8009438 <_malloc_r>
 8009594:	4606      	mov	r6, r0
 8009596:	b360      	cbz	r0, 80095f2 <__ssputs_r+0xa2>
 8009598:	6921      	ldr	r1, [r4, #16]
 800959a:	464a      	mov	r2, r9
 800959c:	f7ff fed2 	bl	8009344 <memcpy>
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80095a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095aa:	81a3      	strh	r3, [r4, #12]
 80095ac:	6126      	str	r6, [r4, #16]
 80095ae:	6165      	str	r5, [r4, #20]
 80095b0:	444e      	add	r6, r9
 80095b2:	eba5 0509 	sub.w	r5, r5, r9
 80095b6:	6026      	str	r6, [r4, #0]
 80095b8:	60a5      	str	r5, [r4, #8]
 80095ba:	463e      	mov	r6, r7
 80095bc:	42be      	cmp	r6, r7
 80095be:	d900      	bls.n	80095c2 <__ssputs_r+0x72>
 80095c0:	463e      	mov	r6, r7
 80095c2:	6820      	ldr	r0, [r4, #0]
 80095c4:	4632      	mov	r2, r6
 80095c6:	4641      	mov	r1, r8
 80095c8:	f000 faa8 	bl	8009b1c <memmove>
 80095cc:	68a3      	ldr	r3, [r4, #8]
 80095ce:	1b9b      	subs	r3, r3, r6
 80095d0:	60a3      	str	r3, [r4, #8]
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	4433      	add	r3, r6
 80095d6:	6023      	str	r3, [r4, #0]
 80095d8:	2000      	movs	r0, #0
 80095da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095de:	462a      	mov	r2, r5
 80095e0:	f000 fac6 	bl	8009b70 <_realloc_r>
 80095e4:	4606      	mov	r6, r0
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d1e0      	bne.n	80095ac <__ssputs_r+0x5c>
 80095ea:	6921      	ldr	r1, [r4, #16]
 80095ec:	4650      	mov	r0, sl
 80095ee:	f7ff feb7 	bl	8009360 <_free_r>
 80095f2:	230c      	movs	r3, #12
 80095f4:	f8ca 3000 	str.w	r3, [sl]
 80095f8:	89a3      	ldrh	r3, [r4, #12]
 80095fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095fe:	81a3      	strh	r3, [r4, #12]
 8009600:	f04f 30ff 	mov.w	r0, #4294967295
 8009604:	e7e9      	b.n	80095da <__ssputs_r+0x8a>
	...

08009608 <_svfiprintf_r>:
 8009608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960c:	4698      	mov	r8, r3
 800960e:	898b      	ldrh	r3, [r1, #12]
 8009610:	061b      	lsls	r3, r3, #24
 8009612:	b09d      	sub	sp, #116	@ 0x74
 8009614:	4607      	mov	r7, r0
 8009616:	460d      	mov	r5, r1
 8009618:	4614      	mov	r4, r2
 800961a:	d510      	bpl.n	800963e <_svfiprintf_r+0x36>
 800961c:	690b      	ldr	r3, [r1, #16]
 800961e:	b973      	cbnz	r3, 800963e <_svfiprintf_r+0x36>
 8009620:	2140      	movs	r1, #64	@ 0x40
 8009622:	f7ff ff09 	bl	8009438 <_malloc_r>
 8009626:	6028      	str	r0, [r5, #0]
 8009628:	6128      	str	r0, [r5, #16]
 800962a:	b930      	cbnz	r0, 800963a <_svfiprintf_r+0x32>
 800962c:	230c      	movs	r3, #12
 800962e:	603b      	str	r3, [r7, #0]
 8009630:	f04f 30ff 	mov.w	r0, #4294967295
 8009634:	b01d      	add	sp, #116	@ 0x74
 8009636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963a:	2340      	movs	r3, #64	@ 0x40
 800963c:	616b      	str	r3, [r5, #20]
 800963e:	2300      	movs	r3, #0
 8009640:	9309      	str	r3, [sp, #36]	@ 0x24
 8009642:	2320      	movs	r3, #32
 8009644:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009648:	f8cd 800c 	str.w	r8, [sp, #12]
 800964c:	2330      	movs	r3, #48	@ 0x30
 800964e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80097ec <_svfiprintf_r+0x1e4>
 8009652:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009656:	f04f 0901 	mov.w	r9, #1
 800965a:	4623      	mov	r3, r4
 800965c:	469a      	mov	sl, r3
 800965e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009662:	b10a      	cbz	r2, 8009668 <_svfiprintf_r+0x60>
 8009664:	2a25      	cmp	r2, #37	@ 0x25
 8009666:	d1f9      	bne.n	800965c <_svfiprintf_r+0x54>
 8009668:	ebba 0b04 	subs.w	fp, sl, r4
 800966c:	d00b      	beq.n	8009686 <_svfiprintf_r+0x7e>
 800966e:	465b      	mov	r3, fp
 8009670:	4622      	mov	r2, r4
 8009672:	4629      	mov	r1, r5
 8009674:	4638      	mov	r0, r7
 8009676:	f7ff ff6b 	bl	8009550 <__ssputs_r>
 800967a:	3001      	adds	r0, #1
 800967c:	f000 80a7 	beq.w	80097ce <_svfiprintf_r+0x1c6>
 8009680:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009682:	445a      	add	r2, fp
 8009684:	9209      	str	r2, [sp, #36]	@ 0x24
 8009686:	f89a 3000 	ldrb.w	r3, [sl]
 800968a:	2b00      	cmp	r3, #0
 800968c:	f000 809f 	beq.w	80097ce <_svfiprintf_r+0x1c6>
 8009690:	2300      	movs	r3, #0
 8009692:	f04f 32ff 	mov.w	r2, #4294967295
 8009696:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800969a:	f10a 0a01 	add.w	sl, sl, #1
 800969e:	9304      	str	r3, [sp, #16]
 80096a0:	9307      	str	r3, [sp, #28]
 80096a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80096a8:	4654      	mov	r4, sl
 80096aa:	2205      	movs	r2, #5
 80096ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b0:	484e      	ldr	r0, [pc, #312]	@ (80097ec <_svfiprintf_r+0x1e4>)
 80096b2:	f7f6 fd95 	bl	80001e0 <memchr>
 80096b6:	9a04      	ldr	r2, [sp, #16]
 80096b8:	b9d8      	cbnz	r0, 80096f2 <_svfiprintf_r+0xea>
 80096ba:	06d0      	lsls	r0, r2, #27
 80096bc:	bf44      	itt	mi
 80096be:	2320      	movmi	r3, #32
 80096c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096c4:	0711      	lsls	r1, r2, #28
 80096c6:	bf44      	itt	mi
 80096c8:	232b      	movmi	r3, #43	@ 0x2b
 80096ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096ce:	f89a 3000 	ldrb.w	r3, [sl]
 80096d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80096d4:	d015      	beq.n	8009702 <_svfiprintf_r+0xfa>
 80096d6:	9a07      	ldr	r2, [sp, #28]
 80096d8:	4654      	mov	r4, sl
 80096da:	2000      	movs	r0, #0
 80096dc:	f04f 0c0a 	mov.w	ip, #10
 80096e0:	4621      	mov	r1, r4
 80096e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096e6:	3b30      	subs	r3, #48	@ 0x30
 80096e8:	2b09      	cmp	r3, #9
 80096ea:	d94b      	bls.n	8009784 <_svfiprintf_r+0x17c>
 80096ec:	b1b0      	cbz	r0, 800971c <_svfiprintf_r+0x114>
 80096ee:	9207      	str	r2, [sp, #28]
 80096f0:	e014      	b.n	800971c <_svfiprintf_r+0x114>
 80096f2:	eba0 0308 	sub.w	r3, r0, r8
 80096f6:	fa09 f303 	lsl.w	r3, r9, r3
 80096fa:	4313      	orrs	r3, r2
 80096fc:	9304      	str	r3, [sp, #16]
 80096fe:	46a2      	mov	sl, r4
 8009700:	e7d2      	b.n	80096a8 <_svfiprintf_r+0xa0>
 8009702:	9b03      	ldr	r3, [sp, #12]
 8009704:	1d19      	adds	r1, r3, #4
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	9103      	str	r1, [sp, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	bfbb      	ittet	lt
 800970e:	425b      	neglt	r3, r3
 8009710:	f042 0202 	orrlt.w	r2, r2, #2
 8009714:	9307      	strge	r3, [sp, #28]
 8009716:	9307      	strlt	r3, [sp, #28]
 8009718:	bfb8      	it	lt
 800971a:	9204      	strlt	r2, [sp, #16]
 800971c:	7823      	ldrb	r3, [r4, #0]
 800971e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009720:	d10a      	bne.n	8009738 <_svfiprintf_r+0x130>
 8009722:	7863      	ldrb	r3, [r4, #1]
 8009724:	2b2a      	cmp	r3, #42	@ 0x2a
 8009726:	d132      	bne.n	800978e <_svfiprintf_r+0x186>
 8009728:	9b03      	ldr	r3, [sp, #12]
 800972a:	1d1a      	adds	r2, r3, #4
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	9203      	str	r2, [sp, #12]
 8009730:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009734:	3402      	adds	r4, #2
 8009736:	9305      	str	r3, [sp, #20]
 8009738:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80097fc <_svfiprintf_r+0x1f4>
 800973c:	7821      	ldrb	r1, [r4, #0]
 800973e:	2203      	movs	r2, #3
 8009740:	4650      	mov	r0, sl
 8009742:	f7f6 fd4d 	bl	80001e0 <memchr>
 8009746:	b138      	cbz	r0, 8009758 <_svfiprintf_r+0x150>
 8009748:	9b04      	ldr	r3, [sp, #16]
 800974a:	eba0 000a 	sub.w	r0, r0, sl
 800974e:	2240      	movs	r2, #64	@ 0x40
 8009750:	4082      	lsls	r2, r0
 8009752:	4313      	orrs	r3, r2
 8009754:	3401      	adds	r4, #1
 8009756:	9304      	str	r3, [sp, #16]
 8009758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975c:	4824      	ldr	r0, [pc, #144]	@ (80097f0 <_svfiprintf_r+0x1e8>)
 800975e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009762:	2206      	movs	r2, #6
 8009764:	f7f6 fd3c 	bl	80001e0 <memchr>
 8009768:	2800      	cmp	r0, #0
 800976a:	d036      	beq.n	80097da <_svfiprintf_r+0x1d2>
 800976c:	4b21      	ldr	r3, [pc, #132]	@ (80097f4 <_svfiprintf_r+0x1ec>)
 800976e:	bb1b      	cbnz	r3, 80097b8 <_svfiprintf_r+0x1b0>
 8009770:	9b03      	ldr	r3, [sp, #12]
 8009772:	3307      	adds	r3, #7
 8009774:	f023 0307 	bic.w	r3, r3, #7
 8009778:	3308      	adds	r3, #8
 800977a:	9303      	str	r3, [sp, #12]
 800977c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800977e:	4433      	add	r3, r6
 8009780:	9309      	str	r3, [sp, #36]	@ 0x24
 8009782:	e76a      	b.n	800965a <_svfiprintf_r+0x52>
 8009784:	fb0c 3202 	mla	r2, ip, r2, r3
 8009788:	460c      	mov	r4, r1
 800978a:	2001      	movs	r0, #1
 800978c:	e7a8      	b.n	80096e0 <_svfiprintf_r+0xd8>
 800978e:	2300      	movs	r3, #0
 8009790:	3401      	adds	r4, #1
 8009792:	9305      	str	r3, [sp, #20]
 8009794:	4619      	mov	r1, r3
 8009796:	f04f 0c0a 	mov.w	ip, #10
 800979a:	4620      	mov	r0, r4
 800979c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097a0:	3a30      	subs	r2, #48	@ 0x30
 80097a2:	2a09      	cmp	r2, #9
 80097a4:	d903      	bls.n	80097ae <_svfiprintf_r+0x1a6>
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d0c6      	beq.n	8009738 <_svfiprintf_r+0x130>
 80097aa:	9105      	str	r1, [sp, #20]
 80097ac:	e7c4      	b.n	8009738 <_svfiprintf_r+0x130>
 80097ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80097b2:	4604      	mov	r4, r0
 80097b4:	2301      	movs	r3, #1
 80097b6:	e7f0      	b.n	800979a <_svfiprintf_r+0x192>
 80097b8:	ab03      	add	r3, sp, #12
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	462a      	mov	r2, r5
 80097be:	4b0e      	ldr	r3, [pc, #56]	@ (80097f8 <_svfiprintf_r+0x1f0>)
 80097c0:	a904      	add	r1, sp, #16
 80097c2:	4638      	mov	r0, r7
 80097c4:	f3af 8000 	nop.w
 80097c8:	1c42      	adds	r2, r0, #1
 80097ca:	4606      	mov	r6, r0
 80097cc:	d1d6      	bne.n	800977c <_svfiprintf_r+0x174>
 80097ce:	89ab      	ldrh	r3, [r5, #12]
 80097d0:	065b      	lsls	r3, r3, #25
 80097d2:	f53f af2d 	bmi.w	8009630 <_svfiprintf_r+0x28>
 80097d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097d8:	e72c      	b.n	8009634 <_svfiprintf_r+0x2c>
 80097da:	ab03      	add	r3, sp, #12
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	462a      	mov	r2, r5
 80097e0:	4b05      	ldr	r3, [pc, #20]	@ (80097f8 <_svfiprintf_r+0x1f0>)
 80097e2:	a904      	add	r1, sp, #16
 80097e4:	4638      	mov	r0, r7
 80097e6:	f000 f879 	bl	80098dc <_printf_i>
 80097ea:	e7ed      	b.n	80097c8 <_svfiprintf_r+0x1c0>
 80097ec:	0800cf20 	.word	0x0800cf20
 80097f0:	0800cf2a 	.word	0x0800cf2a
 80097f4:	00000000 	.word	0x00000000
 80097f8:	08009551 	.word	0x08009551
 80097fc:	0800cf26 	.word	0x0800cf26

08009800 <_printf_common>:
 8009800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009804:	4616      	mov	r6, r2
 8009806:	4698      	mov	r8, r3
 8009808:	688a      	ldr	r2, [r1, #8]
 800980a:	690b      	ldr	r3, [r1, #16]
 800980c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009810:	4293      	cmp	r3, r2
 8009812:	bfb8      	it	lt
 8009814:	4613      	movlt	r3, r2
 8009816:	6033      	str	r3, [r6, #0]
 8009818:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800981c:	4607      	mov	r7, r0
 800981e:	460c      	mov	r4, r1
 8009820:	b10a      	cbz	r2, 8009826 <_printf_common+0x26>
 8009822:	3301      	adds	r3, #1
 8009824:	6033      	str	r3, [r6, #0]
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	0699      	lsls	r1, r3, #26
 800982a:	bf42      	ittt	mi
 800982c:	6833      	ldrmi	r3, [r6, #0]
 800982e:	3302      	addmi	r3, #2
 8009830:	6033      	strmi	r3, [r6, #0]
 8009832:	6825      	ldr	r5, [r4, #0]
 8009834:	f015 0506 	ands.w	r5, r5, #6
 8009838:	d106      	bne.n	8009848 <_printf_common+0x48>
 800983a:	f104 0a19 	add.w	sl, r4, #25
 800983e:	68e3      	ldr	r3, [r4, #12]
 8009840:	6832      	ldr	r2, [r6, #0]
 8009842:	1a9b      	subs	r3, r3, r2
 8009844:	42ab      	cmp	r3, r5
 8009846:	dc26      	bgt.n	8009896 <_printf_common+0x96>
 8009848:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800984c:	6822      	ldr	r2, [r4, #0]
 800984e:	3b00      	subs	r3, #0
 8009850:	bf18      	it	ne
 8009852:	2301      	movne	r3, #1
 8009854:	0692      	lsls	r2, r2, #26
 8009856:	d42b      	bmi.n	80098b0 <_printf_common+0xb0>
 8009858:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800985c:	4641      	mov	r1, r8
 800985e:	4638      	mov	r0, r7
 8009860:	47c8      	blx	r9
 8009862:	3001      	adds	r0, #1
 8009864:	d01e      	beq.n	80098a4 <_printf_common+0xa4>
 8009866:	6823      	ldr	r3, [r4, #0]
 8009868:	6922      	ldr	r2, [r4, #16]
 800986a:	f003 0306 	and.w	r3, r3, #6
 800986e:	2b04      	cmp	r3, #4
 8009870:	bf02      	ittt	eq
 8009872:	68e5      	ldreq	r5, [r4, #12]
 8009874:	6833      	ldreq	r3, [r6, #0]
 8009876:	1aed      	subeq	r5, r5, r3
 8009878:	68a3      	ldr	r3, [r4, #8]
 800987a:	bf0c      	ite	eq
 800987c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009880:	2500      	movne	r5, #0
 8009882:	4293      	cmp	r3, r2
 8009884:	bfc4      	itt	gt
 8009886:	1a9b      	subgt	r3, r3, r2
 8009888:	18ed      	addgt	r5, r5, r3
 800988a:	2600      	movs	r6, #0
 800988c:	341a      	adds	r4, #26
 800988e:	42b5      	cmp	r5, r6
 8009890:	d11a      	bne.n	80098c8 <_printf_common+0xc8>
 8009892:	2000      	movs	r0, #0
 8009894:	e008      	b.n	80098a8 <_printf_common+0xa8>
 8009896:	2301      	movs	r3, #1
 8009898:	4652      	mov	r2, sl
 800989a:	4641      	mov	r1, r8
 800989c:	4638      	mov	r0, r7
 800989e:	47c8      	blx	r9
 80098a0:	3001      	adds	r0, #1
 80098a2:	d103      	bne.n	80098ac <_printf_common+0xac>
 80098a4:	f04f 30ff 	mov.w	r0, #4294967295
 80098a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ac:	3501      	adds	r5, #1
 80098ae:	e7c6      	b.n	800983e <_printf_common+0x3e>
 80098b0:	18e1      	adds	r1, r4, r3
 80098b2:	1c5a      	adds	r2, r3, #1
 80098b4:	2030      	movs	r0, #48	@ 0x30
 80098b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80098ba:	4422      	add	r2, r4
 80098bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80098c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80098c4:	3302      	adds	r3, #2
 80098c6:	e7c7      	b.n	8009858 <_printf_common+0x58>
 80098c8:	2301      	movs	r3, #1
 80098ca:	4622      	mov	r2, r4
 80098cc:	4641      	mov	r1, r8
 80098ce:	4638      	mov	r0, r7
 80098d0:	47c8      	blx	r9
 80098d2:	3001      	adds	r0, #1
 80098d4:	d0e6      	beq.n	80098a4 <_printf_common+0xa4>
 80098d6:	3601      	adds	r6, #1
 80098d8:	e7d9      	b.n	800988e <_printf_common+0x8e>
	...

080098dc <_printf_i>:
 80098dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098e0:	7e0f      	ldrb	r7, [r1, #24]
 80098e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80098e4:	2f78      	cmp	r7, #120	@ 0x78
 80098e6:	4691      	mov	r9, r2
 80098e8:	4680      	mov	r8, r0
 80098ea:	460c      	mov	r4, r1
 80098ec:	469a      	mov	sl, r3
 80098ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80098f2:	d807      	bhi.n	8009904 <_printf_i+0x28>
 80098f4:	2f62      	cmp	r7, #98	@ 0x62
 80098f6:	d80a      	bhi.n	800990e <_printf_i+0x32>
 80098f8:	2f00      	cmp	r7, #0
 80098fa:	f000 80d2 	beq.w	8009aa2 <_printf_i+0x1c6>
 80098fe:	2f58      	cmp	r7, #88	@ 0x58
 8009900:	f000 80b9 	beq.w	8009a76 <_printf_i+0x19a>
 8009904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009908:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800990c:	e03a      	b.n	8009984 <_printf_i+0xa8>
 800990e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009912:	2b15      	cmp	r3, #21
 8009914:	d8f6      	bhi.n	8009904 <_printf_i+0x28>
 8009916:	a101      	add	r1, pc, #4	@ (adr r1, 800991c <_printf_i+0x40>)
 8009918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800991c:	08009975 	.word	0x08009975
 8009920:	08009989 	.word	0x08009989
 8009924:	08009905 	.word	0x08009905
 8009928:	08009905 	.word	0x08009905
 800992c:	08009905 	.word	0x08009905
 8009930:	08009905 	.word	0x08009905
 8009934:	08009989 	.word	0x08009989
 8009938:	08009905 	.word	0x08009905
 800993c:	08009905 	.word	0x08009905
 8009940:	08009905 	.word	0x08009905
 8009944:	08009905 	.word	0x08009905
 8009948:	08009a89 	.word	0x08009a89
 800994c:	080099b3 	.word	0x080099b3
 8009950:	08009a43 	.word	0x08009a43
 8009954:	08009905 	.word	0x08009905
 8009958:	08009905 	.word	0x08009905
 800995c:	08009aab 	.word	0x08009aab
 8009960:	08009905 	.word	0x08009905
 8009964:	080099b3 	.word	0x080099b3
 8009968:	08009905 	.word	0x08009905
 800996c:	08009905 	.word	0x08009905
 8009970:	08009a4b 	.word	0x08009a4b
 8009974:	6833      	ldr	r3, [r6, #0]
 8009976:	1d1a      	adds	r2, r3, #4
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	6032      	str	r2, [r6, #0]
 800997c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009980:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009984:	2301      	movs	r3, #1
 8009986:	e09d      	b.n	8009ac4 <_printf_i+0x1e8>
 8009988:	6833      	ldr	r3, [r6, #0]
 800998a:	6820      	ldr	r0, [r4, #0]
 800998c:	1d19      	adds	r1, r3, #4
 800998e:	6031      	str	r1, [r6, #0]
 8009990:	0606      	lsls	r6, r0, #24
 8009992:	d501      	bpl.n	8009998 <_printf_i+0xbc>
 8009994:	681d      	ldr	r5, [r3, #0]
 8009996:	e003      	b.n	80099a0 <_printf_i+0xc4>
 8009998:	0645      	lsls	r5, r0, #25
 800999a:	d5fb      	bpl.n	8009994 <_printf_i+0xb8>
 800999c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80099a0:	2d00      	cmp	r5, #0
 80099a2:	da03      	bge.n	80099ac <_printf_i+0xd0>
 80099a4:	232d      	movs	r3, #45	@ 0x2d
 80099a6:	426d      	negs	r5, r5
 80099a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099ac:	4859      	ldr	r0, [pc, #356]	@ (8009b14 <_printf_i+0x238>)
 80099ae:	230a      	movs	r3, #10
 80099b0:	e011      	b.n	80099d6 <_printf_i+0xfa>
 80099b2:	6821      	ldr	r1, [r4, #0]
 80099b4:	6833      	ldr	r3, [r6, #0]
 80099b6:	0608      	lsls	r0, r1, #24
 80099b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80099bc:	d402      	bmi.n	80099c4 <_printf_i+0xe8>
 80099be:	0649      	lsls	r1, r1, #25
 80099c0:	bf48      	it	mi
 80099c2:	b2ad      	uxthmi	r5, r5
 80099c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80099c6:	4853      	ldr	r0, [pc, #332]	@ (8009b14 <_printf_i+0x238>)
 80099c8:	6033      	str	r3, [r6, #0]
 80099ca:	bf14      	ite	ne
 80099cc:	230a      	movne	r3, #10
 80099ce:	2308      	moveq	r3, #8
 80099d0:	2100      	movs	r1, #0
 80099d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80099d6:	6866      	ldr	r6, [r4, #4]
 80099d8:	60a6      	str	r6, [r4, #8]
 80099da:	2e00      	cmp	r6, #0
 80099dc:	bfa2      	ittt	ge
 80099de:	6821      	ldrge	r1, [r4, #0]
 80099e0:	f021 0104 	bicge.w	r1, r1, #4
 80099e4:	6021      	strge	r1, [r4, #0]
 80099e6:	b90d      	cbnz	r5, 80099ec <_printf_i+0x110>
 80099e8:	2e00      	cmp	r6, #0
 80099ea:	d04b      	beq.n	8009a84 <_printf_i+0x1a8>
 80099ec:	4616      	mov	r6, r2
 80099ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80099f2:	fb03 5711 	mls	r7, r3, r1, r5
 80099f6:	5dc7      	ldrb	r7, [r0, r7]
 80099f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80099fc:	462f      	mov	r7, r5
 80099fe:	42bb      	cmp	r3, r7
 8009a00:	460d      	mov	r5, r1
 8009a02:	d9f4      	bls.n	80099ee <_printf_i+0x112>
 8009a04:	2b08      	cmp	r3, #8
 8009a06:	d10b      	bne.n	8009a20 <_printf_i+0x144>
 8009a08:	6823      	ldr	r3, [r4, #0]
 8009a0a:	07df      	lsls	r7, r3, #31
 8009a0c:	d508      	bpl.n	8009a20 <_printf_i+0x144>
 8009a0e:	6923      	ldr	r3, [r4, #16]
 8009a10:	6861      	ldr	r1, [r4, #4]
 8009a12:	4299      	cmp	r1, r3
 8009a14:	bfde      	ittt	le
 8009a16:	2330      	movle	r3, #48	@ 0x30
 8009a18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a20:	1b92      	subs	r2, r2, r6
 8009a22:	6122      	str	r2, [r4, #16]
 8009a24:	f8cd a000 	str.w	sl, [sp]
 8009a28:	464b      	mov	r3, r9
 8009a2a:	aa03      	add	r2, sp, #12
 8009a2c:	4621      	mov	r1, r4
 8009a2e:	4640      	mov	r0, r8
 8009a30:	f7ff fee6 	bl	8009800 <_printf_common>
 8009a34:	3001      	adds	r0, #1
 8009a36:	d14a      	bne.n	8009ace <_printf_i+0x1f2>
 8009a38:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3c:	b004      	add	sp, #16
 8009a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a42:	6823      	ldr	r3, [r4, #0]
 8009a44:	f043 0320 	orr.w	r3, r3, #32
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	4833      	ldr	r0, [pc, #204]	@ (8009b18 <_printf_i+0x23c>)
 8009a4c:	2778      	movs	r7, #120	@ 0x78
 8009a4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	6831      	ldr	r1, [r6, #0]
 8009a56:	061f      	lsls	r7, r3, #24
 8009a58:	f851 5b04 	ldr.w	r5, [r1], #4
 8009a5c:	d402      	bmi.n	8009a64 <_printf_i+0x188>
 8009a5e:	065f      	lsls	r7, r3, #25
 8009a60:	bf48      	it	mi
 8009a62:	b2ad      	uxthmi	r5, r5
 8009a64:	6031      	str	r1, [r6, #0]
 8009a66:	07d9      	lsls	r1, r3, #31
 8009a68:	bf44      	itt	mi
 8009a6a:	f043 0320 	orrmi.w	r3, r3, #32
 8009a6e:	6023      	strmi	r3, [r4, #0]
 8009a70:	b11d      	cbz	r5, 8009a7a <_printf_i+0x19e>
 8009a72:	2310      	movs	r3, #16
 8009a74:	e7ac      	b.n	80099d0 <_printf_i+0xf4>
 8009a76:	4827      	ldr	r0, [pc, #156]	@ (8009b14 <_printf_i+0x238>)
 8009a78:	e7e9      	b.n	8009a4e <_printf_i+0x172>
 8009a7a:	6823      	ldr	r3, [r4, #0]
 8009a7c:	f023 0320 	bic.w	r3, r3, #32
 8009a80:	6023      	str	r3, [r4, #0]
 8009a82:	e7f6      	b.n	8009a72 <_printf_i+0x196>
 8009a84:	4616      	mov	r6, r2
 8009a86:	e7bd      	b.n	8009a04 <_printf_i+0x128>
 8009a88:	6833      	ldr	r3, [r6, #0]
 8009a8a:	6825      	ldr	r5, [r4, #0]
 8009a8c:	6961      	ldr	r1, [r4, #20]
 8009a8e:	1d18      	adds	r0, r3, #4
 8009a90:	6030      	str	r0, [r6, #0]
 8009a92:	062e      	lsls	r6, r5, #24
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	d501      	bpl.n	8009a9c <_printf_i+0x1c0>
 8009a98:	6019      	str	r1, [r3, #0]
 8009a9a:	e002      	b.n	8009aa2 <_printf_i+0x1c6>
 8009a9c:	0668      	lsls	r0, r5, #25
 8009a9e:	d5fb      	bpl.n	8009a98 <_printf_i+0x1bc>
 8009aa0:	8019      	strh	r1, [r3, #0]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	6123      	str	r3, [r4, #16]
 8009aa6:	4616      	mov	r6, r2
 8009aa8:	e7bc      	b.n	8009a24 <_printf_i+0x148>
 8009aaa:	6833      	ldr	r3, [r6, #0]
 8009aac:	1d1a      	adds	r2, r3, #4
 8009aae:	6032      	str	r2, [r6, #0]
 8009ab0:	681e      	ldr	r6, [r3, #0]
 8009ab2:	6862      	ldr	r2, [r4, #4]
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	f7f6 fb92 	bl	80001e0 <memchr>
 8009abc:	b108      	cbz	r0, 8009ac2 <_printf_i+0x1e6>
 8009abe:	1b80      	subs	r0, r0, r6
 8009ac0:	6060      	str	r0, [r4, #4]
 8009ac2:	6863      	ldr	r3, [r4, #4]
 8009ac4:	6123      	str	r3, [r4, #16]
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009acc:	e7aa      	b.n	8009a24 <_printf_i+0x148>
 8009ace:	6923      	ldr	r3, [r4, #16]
 8009ad0:	4632      	mov	r2, r6
 8009ad2:	4649      	mov	r1, r9
 8009ad4:	4640      	mov	r0, r8
 8009ad6:	47d0      	blx	sl
 8009ad8:	3001      	adds	r0, #1
 8009ada:	d0ad      	beq.n	8009a38 <_printf_i+0x15c>
 8009adc:	6823      	ldr	r3, [r4, #0]
 8009ade:	079b      	lsls	r3, r3, #30
 8009ae0:	d413      	bmi.n	8009b0a <_printf_i+0x22e>
 8009ae2:	68e0      	ldr	r0, [r4, #12]
 8009ae4:	9b03      	ldr	r3, [sp, #12]
 8009ae6:	4298      	cmp	r0, r3
 8009ae8:	bfb8      	it	lt
 8009aea:	4618      	movlt	r0, r3
 8009aec:	e7a6      	b.n	8009a3c <_printf_i+0x160>
 8009aee:	2301      	movs	r3, #1
 8009af0:	4632      	mov	r2, r6
 8009af2:	4649      	mov	r1, r9
 8009af4:	4640      	mov	r0, r8
 8009af6:	47d0      	blx	sl
 8009af8:	3001      	adds	r0, #1
 8009afa:	d09d      	beq.n	8009a38 <_printf_i+0x15c>
 8009afc:	3501      	adds	r5, #1
 8009afe:	68e3      	ldr	r3, [r4, #12]
 8009b00:	9903      	ldr	r1, [sp, #12]
 8009b02:	1a5b      	subs	r3, r3, r1
 8009b04:	42ab      	cmp	r3, r5
 8009b06:	dcf2      	bgt.n	8009aee <_printf_i+0x212>
 8009b08:	e7eb      	b.n	8009ae2 <_printf_i+0x206>
 8009b0a:	2500      	movs	r5, #0
 8009b0c:	f104 0619 	add.w	r6, r4, #25
 8009b10:	e7f5      	b.n	8009afe <_printf_i+0x222>
 8009b12:	bf00      	nop
 8009b14:	0800cf31 	.word	0x0800cf31
 8009b18:	0800cf42 	.word	0x0800cf42

08009b1c <memmove>:
 8009b1c:	4288      	cmp	r0, r1
 8009b1e:	b510      	push	{r4, lr}
 8009b20:	eb01 0402 	add.w	r4, r1, r2
 8009b24:	d902      	bls.n	8009b2c <memmove+0x10>
 8009b26:	4284      	cmp	r4, r0
 8009b28:	4623      	mov	r3, r4
 8009b2a:	d807      	bhi.n	8009b3c <memmove+0x20>
 8009b2c:	1e43      	subs	r3, r0, #1
 8009b2e:	42a1      	cmp	r1, r4
 8009b30:	d008      	beq.n	8009b44 <memmove+0x28>
 8009b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b3a:	e7f8      	b.n	8009b2e <memmove+0x12>
 8009b3c:	4402      	add	r2, r0
 8009b3e:	4601      	mov	r1, r0
 8009b40:	428a      	cmp	r2, r1
 8009b42:	d100      	bne.n	8009b46 <memmove+0x2a>
 8009b44:	bd10      	pop	{r4, pc}
 8009b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b4e:	e7f7      	b.n	8009b40 <memmove+0x24>

08009b50 <_sbrk_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d06      	ldr	r5, [pc, #24]	@ (8009b6c <_sbrk_r+0x1c>)
 8009b54:	2300      	movs	r3, #0
 8009b56:	4604      	mov	r4, r0
 8009b58:	4608      	mov	r0, r1
 8009b5a:	602b      	str	r3, [r5, #0]
 8009b5c:	f7f8 fd12 	bl	8002584 <_sbrk>
 8009b60:	1c43      	adds	r3, r0, #1
 8009b62:	d102      	bne.n	8009b6a <_sbrk_r+0x1a>
 8009b64:	682b      	ldr	r3, [r5, #0]
 8009b66:	b103      	cbz	r3, 8009b6a <_sbrk_r+0x1a>
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	bd38      	pop	{r3, r4, r5, pc}
 8009b6c:	200056f4 	.word	0x200056f4

08009b70 <_realloc_r>:
 8009b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b74:	4680      	mov	r8, r0
 8009b76:	4615      	mov	r5, r2
 8009b78:	460c      	mov	r4, r1
 8009b7a:	b921      	cbnz	r1, 8009b86 <_realloc_r+0x16>
 8009b7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b80:	4611      	mov	r1, r2
 8009b82:	f7ff bc59 	b.w	8009438 <_malloc_r>
 8009b86:	b92a      	cbnz	r2, 8009b94 <_realloc_r+0x24>
 8009b88:	f7ff fbea 	bl	8009360 <_free_r>
 8009b8c:	2400      	movs	r4, #0
 8009b8e:	4620      	mov	r0, r4
 8009b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b94:	f000 f81a 	bl	8009bcc <_malloc_usable_size_r>
 8009b98:	4285      	cmp	r5, r0
 8009b9a:	4606      	mov	r6, r0
 8009b9c:	d802      	bhi.n	8009ba4 <_realloc_r+0x34>
 8009b9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009ba2:	d8f4      	bhi.n	8009b8e <_realloc_r+0x1e>
 8009ba4:	4629      	mov	r1, r5
 8009ba6:	4640      	mov	r0, r8
 8009ba8:	f7ff fc46 	bl	8009438 <_malloc_r>
 8009bac:	4607      	mov	r7, r0
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d0ec      	beq.n	8009b8c <_realloc_r+0x1c>
 8009bb2:	42b5      	cmp	r5, r6
 8009bb4:	462a      	mov	r2, r5
 8009bb6:	4621      	mov	r1, r4
 8009bb8:	bf28      	it	cs
 8009bba:	4632      	movcs	r2, r6
 8009bbc:	f7ff fbc2 	bl	8009344 <memcpy>
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	4640      	mov	r0, r8
 8009bc4:	f7ff fbcc 	bl	8009360 <_free_r>
 8009bc8:	463c      	mov	r4, r7
 8009bca:	e7e0      	b.n	8009b8e <_realloc_r+0x1e>

08009bcc <_malloc_usable_size_r>:
 8009bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bd0:	1f18      	subs	r0, r3, #4
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	bfbc      	itt	lt
 8009bd6:	580b      	ldrlt	r3, [r1, r0]
 8009bd8:	18c0      	addlt	r0, r0, r3
 8009bda:	4770      	bx	lr
 8009bdc:	0000      	movs	r0, r0
	...

08009be0 <sin>:
 8009be0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009be2:	ec53 2b10 	vmov	r2, r3, d0
 8009be6:	4826      	ldr	r0, [pc, #152]	@ (8009c80 <sin+0xa0>)
 8009be8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009bec:	4281      	cmp	r1, r0
 8009bee:	d807      	bhi.n	8009c00 <sin+0x20>
 8009bf0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009c78 <sin+0x98>
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	b005      	add	sp, #20
 8009bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bfc:	f000 b90c 	b.w	8009e18 <__kernel_sin>
 8009c00:	4820      	ldr	r0, [pc, #128]	@ (8009c84 <sin+0xa4>)
 8009c02:	4281      	cmp	r1, r0
 8009c04:	d908      	bls.n	8009c18 <sin+0x38>
 8009c06:	4610      	mov	r0, r2
 8009c08:	4619      	mov	r1, r3
 8009c0a:	f7f6 fb3d 	bl	8000288 <__aeabi_dsub>
 8009c0e:	ec41 0b10 	vmov	d0, r0, r1
 8009c12:	b005      	add	sp, #20
 8009c14:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c18:	4668      	mov	r0, sp
 8009c1a:	f000 f9b9 	bl	8009f90 <__ieee754_rem_pio2>
 8009c1e:	f000 0003 	and.w	r0, r0, #3
 8009c22:	2801      	cmp	r0, #1
 8009c24:	d00c      	beq.n	8009c40 <sin+0x60>
 8009c26:	2802      	cmp	r0, #2
 8009c28:	d011      	beq.n	8009c4e <sin+0x6e>
 8009c2a:	b9e8      	cbnz	r0, 8009c68 <sin+0x88>
 8009c2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c30:	ed9d 0b00 	vldr	d0, [sp]
 8009c34:	2001      	movs	r0, #1
 8009c36:	f000 f8ef 	bl	8009e18 <__kernel_sin>
 8009c3a:	ec51 0b10 	vmov	r0, r1, d0
 8009c3e:	e7e6      	b.n	8009c0e <sin+0x2e>
 8009c40:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c44:	ed9d 0b00 	vldr	d0, [sp]
 8009c48:	f000 f81e 	bl	8009c88 <__kernel_cos>
 8009c4c:	e7f5      	b.n	8009c3a <sin+0x5a>
 8009c4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c52:	ed9d 0b00 	vldr	d0, [sp]
 8009c56:	2001      	movs	r0, #1
 8009c58:	f000 f8de 	bl	8009e18 <__kernel_sin>
 8009c5c:	ec53 2b10 	vmov	r2, r3, d0
 8009c60:	4610      	mov	r0, r2
 8009c62:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009c66:	e7d2      	b.n	8009c0e <sin+0x2e>
 8009c68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c6c:	ed9d 0b00 	vldr	d0, [sp]
 8009c70:	f000 f80a 	bl	8009c88 <__kernel_cos>
 8009c74:	e7f2      	b.n	8009c5c <sin+0x7c>
 8009c76:	bf00      	nop
	...
 8009c80:	3fe921fb 	.word	0x3fe921fb
 8009c84:	7fefffff 	.word	0x7fefffff

08009c88 <__kernel_cos>:
 8009c88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8c:	ec57 6b10 	vmov	r6, r7, d0
 8009c90:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009c94:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8009c98:	ed8d 1b00 	vstr	d1, [sp]
 8009c9c:	d206      	bcs.n	8009cac <__kernel_cos+0x24>
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	4639      	mov	r1, r7
 8009ca2:	f7f6 ff43 	bl	8000b2c <__aeabi_d2iz>
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	f000 8088 	beq.w	8009dbc <__kernel_cos+0x134>
 8009cac:	4632      	mov	r2, r6
 8009cae:	463b      	mov	r3, r7
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	4639      	mov	r1, r7
 8009cb4:	f7f6 fca0 	bl	80005f8 <__aeabi_dmul>
 8009cb8:	4b51      	ldr	r3, [pc, #324]	@ (8009e00 <__kernel_cos+0x178>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	460d      	mov	r5, r1
 8009cc0:	f7f6 fc9a 	bl	80005f8 <__aeabi_dmul>
 8009cc4:	a340      	add	r3, pc, #256	@ (adr r3, 8009dc8 <__kernel_cos+0x140>)
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	4682      	mov	sl, r0
 8009ccc:	468b      	mov	fp, r1
 8009cce:	4620      	mov	r0, r4
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	f7f6 fc91 	bl	80005f8 <__aeabi_dmul>
 8009cd6:	a33e      	add	r3, pc, #248	@ (adr r3, 8009dd0 <__kernel_cos+0x148>)
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	f7f6 fad6 	bl	800028c <__adddf3>
 8009ce0:	4622      	mov	r2, r4
 8009ce2:	462b      	mov	r3, r5
 8009ce4:	f7f6 fc88 	bl	80005f8 <__aeabi_dmul>
 8009ce8:	a33b      	add	r3, pc, #236	@ (adr r3, 8009dd8 <__kernel_cos+0x150>)
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	f7f6 facb 	bl	8000288 <__aeabi_dsub>
 8009cf2:	4622      	mov	r2, r4
 8009cf4:	462b      	mov	r3, r5
 8009cf6:	f7f6 fc7f 	bl	80005f8 <__aeabi_dmul>
 8009cfa:	a339      	add	r3, pc, #228	@ (adr r3, 8009de0 <__kernel_cos+0x158>)
 8009cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d00:	f7f6 fac4 	bl	800028c <__adddf3>
 8009d04:	4622      	mov	r2, r4
 8009d06:	462b      	mov	r3, r5
 8009d08:	f7f6 fc76 	bl	80005f8 <__aeabi_dmul>
 8009d0c:	a336      	add	r3, pc, #216	@ (adr r3, 8009de8 <__kernel_cos+0x160>)
 8009d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d12:	f7f6 fab9 	bl	8000288 <__aeabi_dsub>
 8009d16:	4622      	mov	r2, r4
 8009d18:	462b      	mov	r3, r5
 8009d1a:	f7f6 fc6d 	bl	80005f8 <__aeabi_dmul>
 8009d1e:	a334      	add	r3, pc, #208	@ (adr r3, 8009df0 <__kernel_cos+0x168>)
 8009d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d24:	f7f6 fab2 	bl	800028c <__adddf3>
 8009d28:	4622      	mov	r2, r4
 8009d2a:	462b      	mov	r3, r5
 8009d2c:	f7f6 fc64 	bl	80005f8 <__aeabi_dmul>
 8009d30:	4622      	mov	r2, r4
 8009d32:	462b      	mov	r3, r5
 8009d34:	f7f6 fc60 	bl	80005f8 <__aeabi_dmul>
 8009d38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	460d      	mov	r5, r1
 8009d40:	4630      	mov	r0, r6
 8009d42:	4639      	mov	r1, r7
 8009d44:	f7f6 fc58 	bl	80005f8 <__aeabi_dmul>
 8009d48:	460b      	mov	r3, r1
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	4629      	mov	r1, r5
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f7f6 fa9a 	bl	8000288 <__aeabi_dsub>
 8009d54:	4b2b      	ldr	r3, [pc, #172]	@ (8009e04 <__kernel_cos+0x17c>)
 8009d56:	4598      	cmp	r8, r3
 8009d58:	4606      	mov	r6, r0
 8009d5a:	460f      	mov	r7, r1
 8009d5c:	d810      	bhi.n	8009d80 <__kernel_cos+0xf8>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	460b      	mov	r3, r1
 8009d62:	4650      	mov	r0, sl
 8009d64:	4659      	mov	r1, fp
 8009d66:	f7f6 fa8f 	bl	8000288 <__aeabi_dsub>
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	4926      	ldr	r1, [pc, #152]	@ (8009e08 <__kernel_cos+0x180>)
 8009d6e:	4602      	mov	r2, r0
 8009d70:	2000      	movs	r0, #0
 8009d72:	f7f6 fa89 	bl	8000288 <__aeabi_dsub>
 8009d76:	ec41 0b10 	vmov	d0, r0, r1
 8009d7a:	b003      	add	sp, #12
 8009d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d80:	4b22      	ldr	r3, [pc, #136]	@ (8009e0c <__kernel_cos+0x184>)
 8009d82:	4921      	ldr	r1, [pc, #132]	@ (8009e08 <__kernel_cos+0x180>)
 8009d84:	4598      	cmp	r8, r3
 8009d86:	bf8c      	ite	hi
 8009d88:	4d21      	ldrhi	r5, [pc, #132]	@ (8009e10 <__kernel_cos+0x188>)
 8009d8a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8009d8e:	2400      	movs	r4, #0
 8009d90:	4622      	mov	r2, r4
 8009d92:	462b      	mov	r3, r5
 8009d94:	2000      	movs	r0, #0
 8009d96:	f7f6 fa77 	bl	8000288 <__aeabi_dsub>
 8009d9a:	4622      	mov	r2, r4
 8009d9c:	4680      	mov	r8, r0
 8009d9e:	4689      	mov	r9, r1
 8009da0:	462b      	mov	r3, r5
 8009da2:	4650      	mov	r0, sl
 8009da4:	4659      	mov	r1, fp
 8009da6:	f7f6 fa6f 	bl	8000288 <__aeabi_dsub>
 8009daa:	4632      	mov	r2, r6
 8009dac:	463b      	mov	r3, r7
 8009dae:	f7f6 fa6b 	bl	8000288 <__aeabi_dsub>
 8009db2:	4602      	mov	r2, r0
 8009db4:	460b      	mov	r3, r1
 8009db6:	4640      	mov	r0, r8
 8009db8:	4649      	mov	r1, r9
 8009dba:	e7da      	b.n	8009d72 <__kernel_cos+0xea>
 8009dbc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009df8 <__kernel_cos+0x170>
 8009dc0:	e7db      	b.n	8009d7a <__kernel_cos+0xf2>
 8009dc2:	bf00      	nop
 8009dc4:	f3af 8000 	nop.w
 8009dc8:	be8838d4 	.word	0xbe8838d4
 8009dcc:	bda8fae9 	.word	0xbda8fae9
 8009dd0:	bdb4b1c4 	.word	0xbdb4b1c4
 8009dd4:	3e21ee9e 	.word	0x3e21ee9e
 8009dd8:	809c52ad 	.word	0x809c52ad
 8009ddc:	3e927e4f 	.word	0x3e927e4f
 8009de0:	19cb1590 	.word	0x19cb1590
 8009de4:	3efa01a0 	.word	0x3efa01a0
 8009de8:	16c15177 	.word	0x16c15177
 8009dec:	3f56c16c 	.word	0x3f56c16c
 8009df0:	5555554c 	.word	0x5555554c
 8009df4:	3fa55555 	.word	0x3fa55555
 8009df8:	00000000 	.word	0x00000000
 8009dfc:	3ff00000 	.word	0x3ff00000
 8009e00:	3fe00000 	.word	0x3fe00000
 8009e04:	3fd33332 	.word	0x3fd33332
 8009e08:	3ff00000 	.word	0x3ff00000
 8009e0c:	3fe90000 	.word	0x3fe90000
 8009e10:	3fd20000 	.word	0x3fd20000
 8009e14:	00000000 	.word	0x00000000

08009e18 <__kernel_sin>:
 8009e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1c:	ec55 4b10 	vmov	r4, r5, d0
 8009e20:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009e24:	b085      	sub	sp, #20
 8009e26:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009e2a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009e2e:	4680      	mov	r8, r0
 8009e30:	d205      	bcs.n	8009e3e <__kernel_sin+0x26>
 8009e32:	4620      	mov	r0, r4
 8009e34:	4629      	mov	r1, r5
 8009e36:	f7f6 fe79 	bl	8000b2c <__aeabi_d2iz>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d052      	beq.n	8009ee4 <__kernel_sin+0xcc>
 8009e3e:	4622      	mov	r2, r4
 8009e40:	462b      	mov	r3, r5
 8009e42:	4620      	mov	r0, r4
 8009e44:	4629      	mov	r1, r5
 8009e46:	f7f6 fbd7 	bl	80005f8 <__aeabi_dmul>
 8009e4a:	4682      	mov	sl, r0
 8009e4c:	468b      	mov	fp, r1
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	4620      	mov	r0, r4
 8009e54:	4629      	mov	r1, r5
 8009e56:	f7f6 fbcf 	bl	80005f8 <__aeabi_dmul>
 8009e5a:	a342      	add	r3, pc, #264	@ (adr r3, 8009f64 <__kernel_sin+0x14c>)
 8009e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e60:	e9cd 0100 	strd	r0, r1, [sp]
 8009e64:	4650      	mov	r0, sl
 8009e66:	4659      	mov	r1, fp
 8009e68:	f7f6 fbc6 	bl	80005f8 <__aeabi_dmul>
 8009e6c:	a33f      	add	r3, pc, #252	@ (adr r3, 8009f6c <__kernel_sin+0x154>)
 8009e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e72:	f7f6 fa09 	bl	8000288 <__aeabi_dsub>
 8009e76:	4652      	mov	r2, sl
 8009e78:	465b      	mov	r3, fp
 8009e7a:	f7f6 fbbd 	bl	80005f8 <__aeabi_dmul>
 8009e7e:	a33d      	add	r3, pc, #244	@ (adr r3, 8009f74 <__kernel_sin+0x15c>)
 8009e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e84:	f7f6 fa02 	bl	800028c <__adddf3>
 8009e88:	4652      	mov	r2, sl
 8009e8a:	465b      	mov	r3, fp
 8009e8c:	f7f6 fbb4 	bl	80005f8 <__aeabi_dmul>
 8009e90:	a33a      	add	r3, pc, #232	@ (adr r3, 8009f7c <__kernel_sin+0x164>)
 8009e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e96:	f7f6 f9f7 	bl	8000288 <__aeabi_dsub>
 8009e9a:	4652      	mov	r2, sl
 8009e9c:	465b      	mov	r3, fp
 8009e9e:	f7f6 fbab 	bl	80005f8 <__aeabi_dmul>
 8009ea2:	a338      	add	r3, pc, #224	@ (adr r3, 8009f84 <__kernel_sin+0x16c>)
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	f7f6 f9f0 	bl	800028c <__adddf3>
 8009eac:	4606      	mov	r6, r0
 8009eae:	460f      	mov	r7, r1
 8009eb0:	f1b8 0f00 	cmp.w	r8, #0
 8009eb4:	d11b      	bne.n	8009eee <__kernel_sin+0xd6>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	460b      	mov	r3, r1
 8009eba:	4650      	mov	r0, sl
 8009ebc:	4659      	mov	r1, fp
 8009ebe:	f7f6 fb9b 	bl	80005f8 <__aeabi_dmul>
 8009ec2:	a325      	add	r3, pc, #148	@ (adr r3, 8009f58 <__kernel_sin+0x140>)
 8009ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec8:	f7f6 f9de 	bl	8000288 <__aeabi_dsub>
 8009ecc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ed0:	f7f6 fb92 	bl	80005f8 <__aeabi_dmul>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	4620      	mov	r0, r4
 8009eda:	4629      	mov	r1, r5
 8009edc:	f7f6 f9d6 	bl	800028c <__adddf3>
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	460d      	mov	r5, r1
 8009ee4:	ec45 4b10 	vmov	d0, r4, r5
 8009ee8:	b005      	add	sp, #20
 8009eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8009f60 <__kernel_sin+0x148>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f7f6 fb7f 	bl	80005f8 <__aeabi_dmul>
 8009efa:	4632      	mov	r2, r6
 8009efc:	4680      	mov	r8, r0
 8009efe:	4689      	mov	r9, r1
 8009f00:	463b      	mov	r3, r7
 8009f02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f06:	f7f6 fb77 	bl	80005f8 <__aeabi_dmul>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	4640      	mov	r0, r8
 8009f10:	4649      	mov	r1, r9
 8009f12:	f7f6 f9b9 	bl	8000288 <__aeabi_dsub>
 8009f16:	4652      	mov	r2, sl
 8009f18:	465b      	mov	r3, fp
 8009f1a:	f7f6 fb6d 	bl	80005f8 <__aeabi_dmul>
 8009f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f22:	f7f6 f9b1 	bl	8000288 <__aeabi_dsub>
 8009f26:	a30c      	add	r3, pc, #48	@ (adr r3, 8009f58 <__kernel_sin+0x140>)
 8009f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2c:	4606      	mov	r6, r0
 8009f2e:	460f      	mov	r7, r1
 8009f30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f34:	f7f6 fb60 	bl	80005f8 <__aeabi_dmul>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	4639      	mov	r1, r7
 8009f40:	f7f6 f9a4 	bl	800028c <__adddf3>
 8009f44:	4602      	mov	r2, r0
 8009f46:	460b      	mov	r3, r1
 8009f48:	4620      	mov	r0, r4
 8009f4a:	4629      	mov	r1, r5
 8009f4c:	f7f6 f99c 	bl	8000288 <__aeabi_dsub>
 8009f50:	e7c6      	b.n	8009ee0 <__kernel_sin+0xc8>
 8009f52:	bf00      	nop
 8009f54:	f3af 8000 	nop.w
 8009f58:	55555549 	.word	0x55555549
 8009f5c:	3fc55555 	.word	0x3fc55555
 8009f60:	3fe00000 	.word	0x3fe00000
 8009f64:	5acfd57c 	.word	0x5acfd57c
 8009f68:	3de5d93a 	.word	0x3de5d93a
 8009f6c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009f70:	3e5ae5e6 	.word	0x3e5ae5e6
 8009f74:	57b1fe7d 	.word	0x57b1fe7d
 8009f78:	3ec71de3 	.word	0x3ec71de3
 8009f7c:	19c161d5 	.word	0x19c161d5
 8009f80:	3f2a01a0 	.word	0x3f2a01a0
 8009f84:	1110f8a6 	.word	0x1110f8a6
 8009f88:	3f811111 	.word	0x3f811111
 8009f8c:	00000000 	.word	0x00000000

08009f90 <__ieee754_rem_pio2>:
 8009f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f94:	ec57 6b10 	vmov	r6, r7, d0
 8009f98:	4bc5      	ldr	r3, [pc, #788]	@ (800a2b0 <__ieee754_rem_pio2+0x320>)
 8009f9a:	b08d      	sub	sp, #52	@ 0x34
 8009f9c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009fa0:	4598      	cmp	r8, r3
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	9704      	str	r7, [sp, #16]
 8009fa6:	d807      	bhi.n	8009fb8 <__ieee754_rem_pio2+0x28>
 8009fa8:	2200      	movs	r2, #0
 8009faa:	2300      	movs	r3, #0
 8009fac:	ed80 0b00 	vstr	d0, [r0]
 8009fb0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009fb4:	2500      	movs	r5, #0
 8009fb6:	e028      	b.n	800a00a <__ieee754_rem_pio2+0x7a>
 8009fb8:	4bbe      	ldr	r3, [pc, #760]	@ (800a2b4 <__ieee754_rem_pio2+0x324>)
 8009fba:	4598      	cmp	r8, r3
 8009fbc:	d878      	bhi.n	800a0b0 <__ieee754_rem_pio2+0x120>
 8009fbe:	9b04      	ldr	r3, [sp, #16]
 8009fc0:	4dbd      	ldr	r5, [pc, #756]	@ (800a2b8 <__ieee754_rem_pio2+0x328>)
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800a278 <__ieee754_rem_pio2+0x2e8>)
 8009fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fcc:	4639      	mov	r1, r7
 8009fce:	dd38      	ble.n	800a042 <__ieee754_rem_pio2+0xb2>
 8009fd0:	f7f6 f95a 	bl	8000288 <__aeabi_dsub>
 8009fd4:	45a8      	cmp	r8, r5
 8009fd6:	4606      	mov	r6, r0
 8009fd8:	460f      	mov	r7, r1
 8009fda:	d01a      	beq.n	800a012 <__ieee754_rem_pio2+0x82>
 8009fdc:	a3a8      	add	r3, pc, #672	@ (adr r3, 800a280 <__ieee754_rem_pio2+0x2f0>)
 8009fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe2:	f7f6 f951 	bl	8000288 <__aeabi_dsub>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	460b      	mov	r3, r1
 8009fea:	4680      	mov	r8, r0
 8009fec:	4689      	mov	r9, r1
 8009fee:	4630      	mov	r0, r6
 8009ff0:	4639      	mov	r1, r7
 8009ff2:	f7f6 f949 	bl	8000288 <__aeabi_dsub>
 8009ff6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800a280 <__ieee754_rem_pio2+0x2f0>)
 8009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffc:	f7f6 f944 	bl	8000288 <__aeabi_dsub>
 800a000:	e9c4 8900 	strd	r8, r9, [r4]
 800a004:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a008:	2501      	movs	r5, #1
 800a00a:	4628      	mov	r0, r5
 800a00c:	b00d      	add	sp, #52	@ 0x34
 800a00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a012:	a39d      	add	r3, pc, #628	@ (adr r3, 800a288 <__ieee754_rem_pio2+0x2f8>)
 800a014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a018:	f7f6 f936 	bl	8000288 <__aeabi_dsub>
 800a01c:	a39c      	add	r3, pc, #624	@ (adr r3, 800a290 <__ieee754_rem_pio2+0x300>)
 800a01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a022:	4606      	mov	r6, r0
 800a024:	460f      	mov	r7, r1
 800a026:	f7f6 f92f 	bl	8000288 <__aeabi_dsub>
 800a02a:	4602      	mov	r2, r0
 800a02c:	460b      	mov	r3, r1
 800a02e:	4680      	mov	r8, r0
 800a030:	4689      	mov	r9, r1
 800a032:	4630      	mov	r0, r6
 800a034:	4639      	mov	r1, r7
 800a036:	f7f6 f927 	bl	8000288 <__aeabi_dsub>
 800a03a:	a395      	add	r3, pc, #596	@ (adr r3, 800a290 <__ieee754_rem_pio2+0x300>)
 800a03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a040:	e7dc      	b.n	8009ffc <__ieee754_rem_pio2+0x6c>
 800a042:	f7f6 f923 	bl	800028c <__adddf3>
 800a046:	45a8      	cmp	r8, r5
 800a048:	4606      	mov	r6, r0
 800a04a:	460f      	mov	r7, r1
 800a04c:	d018      	beq.n	800a080 <__ieee754_rem_pio2+0xf0>
 800a04e:	a38c      	add	r3, pc, #560	@ (adr r3, 800a280 <__ieee754_rem_pio2+0x2f0>)
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	f7f6 f91a 	bl	800028c <__adddf3>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	4680      	mov	r8, r0
 800a05e:	4689      	mov	r9, r1
 800a060:	4630      	mov	r0, r6
 800a062:	4639      	mov	r1, r7
 800a064:	f7f6 f910 	bl	8000288 <__aeabi_dsub>
 800a068:	a385      	add	r3, pc, #532	@ (adr r3, 800a280 <__ieee754_rem_pio2+0x2f0>)
 800a06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06e:	f7f6 f90d 	bl	800028c <__adddf3>
 800a072:	f04f 35ff 	mov.w	r5, #4294967295
 800a076:	e9c4 8900 	strd	r8, r9, [r4]
 800a07a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a07e:	e7c4      	b.n	800a00a <__ieee754_rem_pio2+0x7a>
 800a080:	a381      	add	r3, pc, #516	@ (adr r3, 800a288 <__ieee754_rem_pio2+0x2f8>)
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	f7f6 f901 	bl	800028c <__adddf3>
 800a08a:	a381      	add	r3, pc, #516	@ (adr r3, 800a290 <__ieee754_rem_pio2+0x300>)
 800a08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a090:	4606      	mov	r6, r0
 800a092:	460f      	mov	r7, r1
 800a094:	f7f6 f8fa 	bl	800028c <__adddf3>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	4680      	mov	r8, r0
 800a09e:	4689      	mov	r9, r1
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	4639      	mov	r1, r7
 800a0a4:	f7f6 f8f0 	bl	8000288 <__aeabi_dsub>
 800a0a8:	a379      	add	r3, pc, #484	@ (adr r3, 800a290 <__ieee754_rem_pio2+0x300>)
 800a0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ae:	e7de      	b.n	800a06e <__ieee754_rem_pio2+0xde>
 800a0b0:	4b82      	ldr	r3, [pc, #520]	@ (800a2bc <__ieee754_rem_pio2+0x32c>)
 800a0b2:	4598      	cmp	r8, r3
 800a0b4:	f200 80d1 	bhi.w	800a25a <__ieee754_rem_pio2+0x2ca>
 800a0b8:	f000 f966 	bl	800a388 <fabs>
 800a0bc:	ec57 6b10 	vmov	r6, r7, d0
 800a0c0:	a375      	add	r3, pc, #468	@ (adr r3, 800a298 <__ieee754_rem_pio2+0x308>)
 800a0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	4639      	mov	r1, r7
 800a0ca:	f7f6 fa95 	bl	80005f8 <__aeabi_dmul>
 800a0ce:	4b7c      	ldr	r3, [pc, #496]	@ (800a2c0 <__ieee754_rem_pio2+0x330>)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f7f6 f8db 	bl	800028c <__adddf3>
 800a0d6:	f7f6 fd29 	bl	8000b2c <__aeabi_d2iz>
 800a0da:	4605      	mov	r5, r0
 800a0dc:	f7f6 fa22 	bl	8000524 <__aeabi_i2d>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a0e8:	a363      	add	r3, pc, #396	@ (adr r3, 800a278 <__ieee754_rem_pio2+0x2e8>)
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	f7f6 fa83 	bl	80005f8 <__aeabi_dmul>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	4630      	mov	r0, r6
 800a0f8:	4639      	mov	r1, r7
 800a0fa:	f7f6 f8c5 	bl	8000288 <__aeabi_dsub>
 800a0fe:	a360      	add	r3, pc, #384	@ (adr r3, 800a280 <__ieee754_rem_pio2+0x2f0>)
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	4682      	mov	sl, r0
 800a106:	468b      	mov	fp, r1
 800a108:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a10c:	f7f6 fa74 	bl	80005f8 <__aeabi_dmul>
 800a110:	2d1f      	cmp	r5, #31
 800a112:	4606      	mov	r6, r0
 800a114:	460f      	mov	r7, r1
 800a116:	dc0c      	bgt.n	800a132 <__ieee754_rem_pio2+0x1a2>
 800a118:	4b6a      	ldr	r3, [pc, #424]	@ (800a2c4 <__ieee754_rem_pio2+0x334>)
 800a11a:	1e6a      	subs	r2, r5, #1
 800a11c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a120:	4543      	cmp	r3, r8
 800a122:	d006      	beq.n	800a132 <__ieee754_rem_pio2+0x1a2>
 800a124:	4632      	mov	r2, r6
 800a126:	463b      	mov	r3, r7
 800a128:	4650      	mov	r0, sl
 800a12a:	4659      	mov	r1, fp
 800a12c:	f7f6 f8ac 	bl	8000288 <__aeabi_dsub>
 800a130:	e00e      	b.n	800a150 <__ieee754_rem_pio2+0x1c0>
 800a132:	463b      	mov	r3, r7
 800a134:	4632      	mov	r2, r6
 800a136:	4650      	mov	r0, sl
 800a138:	4659      	mov	r1, fp
 800a13a:	f7f6 f8a5 	bl	8000288 <__aeabi_dsub>
 800a13e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a142:	9305      	str	r3, [sp, #20]
 800a144:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a148:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a14c:	2b10      	cmp	r3, #16
 800a14e:	dc02      	bgt.n	800a156 <__ieee754_rem_pio2+0x1c6>
 800a150:	e9c4 0100 	strd	r0, r1, [r4]
 800a154:	e039      	b.n	800a1ca <__ieee754_rem_pio2+0x23a>
 800a156:	a34c      	add	r3, pc, #304	@ (adr r3, 800a288 <__ieee754_rem_pio2+0x2f8>)
 800a158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a160:	f7f6 fa4a 	bl	80005f8 <__aeabi_dmul>
 800a164:	4606      	mov	r6, r0
 800a166:	460f      	mov	r7, r1
 800a168:	4602      	mov	r2, r0
 800a16a:	460b      	mov	r3, r1
 800a16c:	4650      	mov	r0, sl
 800a16e:	4659      	mov	r1, fp
 800a170:	f7f6 f88a 	bl	8000288 <__aeabi_dsub>
 800a174:	4602      	mov	r2, r0
 800a176:	460b      	mov	r3, r1
 800a178:	4680      	mov	r8, r0
 800a17a:	4689      	mov	r9, r1
 800a17c:	4650      	mov	r0, sl
 800a17e:	4659      	mov	r1, fp
 800a180:	f7f6 f882 	bl	8000288 <__aeabi_dsub>
 800a184:	4632      	mov	r2, r6
 800a186:	463b      	mov	r3, r7
 800a188:	f7f6 f87e 	bl	8000288 <__aeabi_dsub>
 800a18c:	a340      	add	r3, pc, #256	@ (adr r3, 800a290 <__ieee754_rem_pio2+0x300>)
 800a18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a192:	4606      	mov	r6, r0
 800a194:	460f      	mov	r7, r1
 800a196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a19a:	f7f6 fa2d 	bl	80005f8 <__aeabi_dmul>
 800a19e:	4632      	mov	r2, r6
 800a1a0:	463b      	mov	r3, r7
 800a1a2:	f7f6 f871 	bl	8000288 <__aeabi_dsub>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	4606      	mov	r6, r0
 800a1ac:	460f      	mov	r7, r1
 800a1ae:	4640      	mov	r0, r8
 800a1b0:	4649      	mov	r1, r9
 800a1b2:	f7f6 f869 	bl	8000288 <__aeabi_dsub>
 800a1b6:	9a05      	ldr	r2, [sp, #20]
 800a1b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a1bc:	1ad3      	subs	r3, r2, r3
 800a1be:	2b31      	cmp	r3, #49	@ 0x31
 800a1c0:	dc20      	bgt.n	800a204 <__ieee754_rem_pio2+0x274>
 800a1c2:	e9c4 0100 	strd	r0, r1, [r4]
 800a1c6:	46c2      	mov	sl, r8
 800a1c8:	46cb      	mov	fp, r9
 800a1ca:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a1ce:	4650      	mov	r0, sl
 800a1d0:	4642      	mov	r2, r8
 800a1d2:	464b      	mov	r3, r9
 800a1d4:	4659      	mov	r1, fp
 800a1d6:	f7f6 f857 	bl	8000288 <__aeabi_dsub>
 800a1da:	463b      	mov	r3, r7
 800a1dc:	4632      	mov	r2, r6
 800a1de:	f7f6 f853 	bl	8000288 <__aeabi_dsub>
 800a1e2:	9b04      	ldr	r3, [sp, #16]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a1ea:	f6bf af0e 	bge.w	800a00a <__ieee754_rem_pio2+0x7a>
 800a1ee:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a1f2:	6063      	str	r3, [r4, #4]
 800a1f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a1f8:	f8c4 8000 	str.w	r8, [r4]
 800a1fc:	60a0      	str	r0, [r4, #8]
 800a1fe:	60e3      	str	r3, [r4, #12]
 800a200:	426d      	negs	r5, r5
 800a202:	e702      	b.n	800a00a <__ieee754_rem_pio2+0x7a>
 800a204:	a326      	add	r3, pc, #152	@ (adr r3, 800a2a0 <__ieee754_rem_pio2+0x310>)
 800a206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a20e:	f7f6 f9f3 	bl	80005f8 <__aeabi_dmul>
 800a212:	4606      	mov	r6, r0
 800a214:	460f      	mov	r7, r1
 800a216:	4602      	mov	r2, r0
 800a218:	460b      	mov	r3, r1
 800a21a:	4640      	mov	r0, r8
 800a21c:	4649      	mov	r1, r9
 800a21e:	f7f6 f833 	bl	8000288 <__aeabi_dsub>
 800a222:	4602      	mov	r2, r0
 800a224:	460b      	mov	r3, r1
 800a226:	4682      	mov	sl, r0
 800a228:	468b      	mov	fp, r1
 800a22a:	4640      	mov	r0, r8
 800a22c:	4649      	mov	r1, r9
 800a22e:	f7f6 f82b 	bl	8000288 <__aeabi_dsub>
 800a232:	4632      	mov	r2, r6
 800a234:	463b      	mov	r3, r7
 800a236:	f7f6 f827 	bl	8000288 <__aeabi_dsub>
 800a23a:	a31b      	add	r3, pc, #108	@ (adr r3, 800a2a8 <__ieee754_rem_pio2+0x318>)
 800a23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a240:	4606      	mov	r6, r0
 800a242:	460f      	mov	r7, r1
 800a244:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a248:	f7f6 f9d6 	bl	80005f8 <__aeabi_dmul>
 800a24c:	4632      	mov	r2, r6
 800a24e:	463b      	mov	r3, r7
 800a250:	f7f6 f81a 	bl	8000288 <__aeabi_dsub>
 800a254:	4606      	mov	r6, r0
 800a256:	460f      	mov	r7, r1
 800a258:	e764      	b.n	800a124 <__ieee754_rem_pio2+0x194>
 800a25a:	4b1b      	ldr	r3, [pc, #108]	@ (800a2c8 <__ieee754_rem_pio2+0x338>)
 800a25c:	4598      	cmp	r8, r3
 800a25e:	d935      	bls.n	800a2cc <__ieee754_rem_pio2+0x33c>
 800a260:	4632      	mov	r2, r6
 800a262:	463b      	mov	r3, r7
 800a264:	4630      	mov	r0, r6
 800a266:	4639      	mov	r1, r7
 800a268:	f7f6 f80e 	bl	8000288 <__aeabi_dsub>
 800a26c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a270:	e9c4 0100 	strd	r0, r1, [r4]
 800a274:	e69e      	b.n	8009fb4 <__ieee754_rem_pio2+0x24>
 800a276:	bf00      	nop
 800a278:	54400000 	.word	0x54400000
 800a27c:	3ff921fb 	.word	0x3ff921fb
 800a280:	1a626331 	.word	0x1a626331
 800a284:	3dd0b461 	.word	0x3dd0b461
 800a288:	1a600000 	.word	0x1a600000
 800a28c:	3dd0b461 	.word	0x3dd0b461
 800a290:	2e037073 	.word	0x2e037073
 800a294:	3ba3198a 	.word	0x3ba3198a
 800a298:	6dc9c883 	.word	0x6dc9c883
 800a29c:	3fe45f30 	.word	0x3fe45f30
 800a2a0:	2e000000 	.word	0x2e000000
 800a2a4:	3ba3198a 	.word	0x3ba3198a
 800a2a8:	252049c1 	.word	0x252049c1
 800a2ac:	397b839a 	.word	0x397b839a
 800a2b0:	3fe921fb 	.word	0x3fe921fb
 800a2b4:	4002d97b 	.word	0x4002d97b
 800a2b8:	3ff921fb 	.word	0x3ff921fb
 800a2bc:	413921fb 	.word	0x413921fb
 800a2c0:	3fe00000 	.word	0x3fe00000
 800a2c4:	0800cf54 	.word	0x0800cf54
 800a2c8:	7fefffff 	.word	0x7fefffff
 800a2cc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a2d0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a2d4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a2d8:	4630      	mov	r0, r6
 800a2da:	460f      	mov	r7, r1
 800a2dc:	f7f6 fc26 	bl	8000b2c <__aeabi_d2iz>
 800a2e0:	f7f6 f920 	bl	8000524 <__aeabi_i2d>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	4639      	mov	r1, r7
 800a2ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a2f0:	f7f5 ffca 	bl	8000288 <__aeabi_dsub>
 800a2f4:	4b22      	ldr	r3, [pc, #136]	@ (800a380 <__ieee754_rem_pio2+0x3f0>)
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f7f6 f97e 	bl	80005f8 <__aeabi_dmul>
 800a2fc:	460f      	mov	r7, r1
 800a2fe:	4606      	mov	r6, r0
 800a300:	f7f6 fc14 	bl	8000b2c <__aeabi_d2iz>
 800a304:	f7f6 f90e 	bl	8000524 <__aeabi_i2d>
 800a308:	4602      	mov	r2, r0
 800a30a:	460b      	mov	r3, r1
 800a30c:	4630      	mov	r0, r6
 800a30e:	4639      	mov	r1, r7
 800a310:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a314:	f7f5 ffb8 	bl	8000288 <__aeabi_dsub>
 800a318:	4b19      	ldr	r3, [pc, #100]	@ (800a380 <__ieee754_rem_pio2+0x3f0>)
 800a31a:	2200      	movs	r2, #0
 800a31c:	f7f6 f96c 	bl	80005f8 <__aeabi_dmul>
 800a320:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a324:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a328:	f04f 0803 	mov.w	r8, #3
 800a32c:	2600      	movs	r6, #0
 800a32e:	2700      	movs	r7, #0
 800a330:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a334:	4632      	mov	r2, r6
 800a336:	463b      	mov	r3, r7
 800a338:	46c2      	mov	sl, r8
 800a33a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a33e:	f7f6 fbc3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a342:	2800      	cmp	r0, #0
 800a344:	d1f4      	bne.n	800a330 <__ieee754_rem_pio2+0x3a0>
 800a346:	4b0f      	ldr	r3, [pc, #60]	@ (800a384 <__ieee754_rem_pio2+0x3f4>)
 800a348:	9301      	str	r3, [sp, #4]
 800a34a:	2302      	movs	r3, #2
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	462a      	mov	r2, r5
 800a350:	4653      	mov	r3, sl
 800a352:	4621      	mov	r1, r4
 800a354:	a806      	add	r0, sp, #24
 800a356:	f000 f81f 	bl	800a398 <__kernel_rem_pio2>
 800a35a:	9b04      	ldr	r3, [sp, #16]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	4605      	mov	r5, r0
 800a360:	f6bf ae53 	bge.w	800a00a <__ieee754_rem_pio2+0x7a>
 800a364:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a368:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a36c:	e9c4 2300 	strd	r2, r3, [r4]
 800a370:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a374:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a378:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a37c:	e740      	b.n	800a200 <__ieee754_rem_pio2+0x270>
 800a37e:	bf00      	nop
 800a380:	41700000 	.word	0x41700000
 800a384:	0800cfd4 	.word	0x0800cfd4

0800a388 <fabs>:
 800a388:	ec51 0b10 	vmov	r0, r1, d0
 800a38c:	4602      	mov	r2, r0
 800a38e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a392:	ec43 2b10 	vmov	d0, r2, r3
 800a396:	4770      	bx	lr

0800a398 <__kernel_rem_pio2>:
 800a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39c:	ed2d 8b02 	vpush	{d8}
 800a3a0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a3a4:	f112 0f14 	cmn.w	r2, #20
 800a3a8:	9306      	str	r3, [sp, #24]
 800a3aa:	9104      	str	r1, [sp, #16]
 800a3ac:	4bbe      	ldr	r3, [pc, #760]	@ (800a6a8 <__kernel_rem_pio2+0x310>)
 800a3ae:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800a3b0:	9008      	str	r0, [sp, #32]
 800a3b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	9b06      	ldr	r3, [sp, #24]
 800a3ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3be:	bfa8      	it	ge
 800a3c0:	1ed4      	subge	r4, r2, #3
 800a3c2:	9305      	str	r3, [sp, #20]
 800a3c4:	bfb2      	itee	lt
 800a3c6:	2400      	movlt	r4, #0
 800a3c8:	2318      	movge	r3, #24
 800a3ca:	fb94 f4f3 	sdivge	r4, r4, r3
 800a3ce:	f06f 0317 	mvn.w	r3, #23
 800a3d2:	fb04 3303 	mla	r3, r4, r3, r3
 800a3d6:	eb03 0b02 	add.w	fp, r3, r2
 800a3da:	9b00      	ldr	r3, [sp, #0]
 800a3dc:	9a05      	ldr	r2, [sp, #20]
 800a3de:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800a698 <__kernel_rem_pio2+0x300>
 800a3e2:	eb03 0802 	add.w	r8, r3, r2
 800a3e6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a3e8:	1aa7      	subs	r7, r4, r2
 800a3ea:	ae20      	add	r6, sp, #128	@ 0x80
 800a3ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a3f0:	2500      	movs	r5, #0
 800a3f2:	4545      	cmp	r5, r8
 800a3f4:	dd13      	ble.n	800a41e <__kernel_rem_pio2+0x86>
 800a3f6:	9b06      	ldr	r3, [sp, #24]
 800a3f8:	aa20      	add	r2, sp, #128	@ 0x80
 800a3fa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a3fe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800a402:	f04f 0800 	mov.w	r8, #0
 800a406:	9b00      	ldr	r3, [sp, #0]
 800a408:	4598      	cmp	r8, r3
 800a40a:	dc31      	bgt.n	800a470 <__kernel_rem_pio2+0xd8>
 800a40c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800a698 <__kernel_rem_pio2+0x300>
 800a410:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a414:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a418:	462f      	mov	r7, r5
 800a41a:	2600      	movs	r6, #0
 800a41c:	e01b      	b.n	800a456 <__kernel_rem_pio2+0xbe>
 800a41e:	42ef      	cmn	r7, r5
 800a420:	d407      	bmi.n	800a432 <__kernel_rem_pio2+0x9a>
 800a422:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a426:	f7f6 f87d 	bl	8000524 <__aeabi_i2d>
 800a42a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a42e:	3501      	adds	r5, #1
 800a430:	e7df      	b.n	800a3f2 <__kernel_rem_pio2+0x5a>
 800a432:	ec51 0b18 	vmov	r0, r1, d8
 800a436:	e7f8      	b.n	800a42a <__kernel_rem_pio2+0x92>
 800a438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a43c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a440:	f7f6 f8da 	bl	80005f8 <__aeabi_dmul>
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a44c:	f7f5 ff1e 	bl	800028c <__adddf3>
 800a450:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a454:	3601      	adds	r6, #1
 800a456:	9b05      	ldr	r3, [sp, #20]
 800a458:	429e      	cmp	r6, r3
 800a45a:	f1a7 0708 	sub.w	r7, r7, #8
 800a45e:	ddeb      	ble.n	800a438 <__kernel_rem_pio2+0xa0>
 800a460:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a464:	f108 0801 	add.w	r8, r8, #1
 800a468:	ecaa 7b02 	vstmia	sl!, {d7}
 800a46c:	3508      	adds	r5, #8
 800a46e:	e7ca      	b.n	800a406 <__kernel_rem_pio2+0x6e>
 800a470:	9b00      	ldr	r3, [sp, #0]
 800a472:	f8dd 8000 	ldr.w	r8, [sp]
 800a476:	aa0c      	add	r2, sp, #48	@ 0x30
 800a478:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a47c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a47e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a480:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a484:	9309      	str	r3, [sp, #36]	@ 0x24
 800a486:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800a48a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a48c:	ab98      	add	r3, sp, #608	@ 0x260
 800a48e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a492:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800a496:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a49a:	ac0c      	add	r4, sp, #48	@ 0x30
 800a49c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a49e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800a4a2:	46a1      	mov	r9, r4
 800a4a4:	46c2      	mov	sl, r8
 800a4a6:	f1ba 0f00 	cmp.w	sl, #0
 800a4aa:	f1a5 0508 	sub.w	r5, r5, #8
 800a4ae:	dc77      	bgt.n	800a5a0 <__kernel_rem_pio2+0x208>
 800a4b0:	4658      	mov	r0, fp
 800a4b2:	ed9d 0b02 	vldr	d0, [sp, #8]
 800a4b6:	f000 fac7 	bl	800aa48 <scalbn>
 800a4ba:	ec57 6b10 	vmov	r6, r7, d0
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	4639      	mov	r1, r7
 800a4c8:	f7f6 f896 	bl	80005f8 <__aeabi_dmul>
 800a4cc:	ec41 0b10 	vmov	d0, r0, r1
 800a4d0:	f000 fb3a 	bl	800ab48 <floor>
 800a4d4:	4b75      	ldr	r3, [pc, #468]	@ (800a6ac <__kernel_rem_pio2+0x314>)
 800a4d6:	ec51 0b10 	vmov	r0, r1, d0
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f7f6 f88c 	bl	80005f8 <__aeabi_dmul>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	4639      	mov	r1, r7
 800a4e8:	f7f5 fece 	bl	8000288 <__aeabi_dsub>
 800a4ec:	460f      	mov	r7, r1
 800a4ee:	4606      	mov	r6, r0
 800a4f0:	f7f6 fb1c 	bl	8000b2c <__aeabi_d2iz>
 800a4f4:	9002      	str	r0, [sp, #8]
 800a4f6:	f7f6 f815 	bl	8000524 <__aeabi_i2d>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	4630      	mov	r0, r6
 800a500:	4639      	mov	r1, r7
 800a502:	f7f5 fec1 	bl	8000288 <__aeabi_dsub>
 800a506:	f1bb 0f00 	cmp.w	fp, #0
 800a50a:	4606      	mov	r6, r0
 800a50c:	460f      	mov	r7, r1
 800a50e:	dd6c      	ble.n	800a5ea <__kernel_rem_pio2+0x252>
 800a510:	f108 31ff 	add.w	r1, r8, #4294967295
 800a514:	ab0c      	add	r3, sp, #48	@ 0x30
 800a516:	9d02      	ldr	r5, [sp, #8]
 800a518:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a51c:	f1cb 0018 	rsb	r0, fp, #24
 800a520:	fa43 f200 	asr.w	r2, r3, r0
 800a524:	4415      	add	r5, r2
 800a526:	4082      	lsls	r2, r0
 800a528:	1a9b      	subs	r3, r3, r2
 800a52a:	aa0c      	add	r2, sp, #48	@ 0x30
 800a52c:	9502      	str	r5, [sp, #8]
 800a52e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a532:	f1cb 0217 	rsb	r2, fp, #23
 800a536:	fa43 f902 	asr.w	r9, r3, r2
 800a53a:	f1b9 0f00 	cmp.w	r9, #0
 800a53e:	dd64      	ble.n	800a60a <__kernel_rem_pio2+0x272>
 800a540:	9b02      	ldr	r3, [sp, #8]
 800a542:	2200      	movs	r2, #0
 800a544:	3301      	adds	r3, #1
 800a546:	9302      	str	r3, [sp, #8]
 800a548:	4615      	mov	r5, r2
 800a54a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800a54e:	4590      	cmp	r8, r2
 800a550:	f300 80b8 	bgt.w	800a6c4 <__kernel_rem_pio2+0x32c>
 800a554:	f1bb 0f00 	cmp.w	fp, #0
 800a558:	dd07      	ble.n	800a56a <__kernel_rem_pio2+0x1d2>
 800a55a:	f1bb 0f01 	cmp.w	fp, #1
 800a55e:	f000 80bf 	beq.w	800a6e0 <__kernel_rem_pio2+0x348>
 800a562:	f1bb 0f02 	cmp.w	fp, #2
 800a566:	f000 80c6 	beq.w	800a6f6 <__kernel_rem_pio2+0x35e>
 800a56a:	f1b9 0f02 	cmp.w	r9, #2
 800a56e:	d14c      	bne.n	800a60a <__kernel_rem_pio2+0x272>
 800a570:	4632      	mov	r2, r6
 800a572:	463b      	mov	r3, r7
 800a574:	494e      	ldr	r1, [pc, #312]	@ (800a6b0 <__kernel_rem_pio2+0x318>)
 800a576:	2000      	movs	r0, #0
 800a578:	f7f5 fe86 	bl	8000288 <__aeabi_dsub>
 800a57c:	4606      	mov	r6, r0
 800a57e:	460f      	mov	r7, r1
 800a580:	2d00      	cmp	r5, #0
 800a582:	d042      	beq.n	800a60a <__kernel_rem_pio2+0x272>
 800a584:	4658      	mov	r0, fp
 800a586:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800a6a0 <__kernel_rem_pio2+0x308>
 800a58a:	f000 fa5d 	bl	800aa48 <scalbn>
 800a58e:	4630      	mov	r0, r6
 800a590:	4639      	mov	r1, r7
 800a592:	ec53 2b10 	vmov	r2, r3, d0
 800a596:	f7f5 fe77 	bl	8000288 <__aeabi_dsub>
 800a59a:	4606      	mov	r6, r0
 800a59c:	460f      	mov	r7, r1
 800a59e:	e034      	b.n	800a60a <__kernel_rem_pio2+0x272>
 800a5a0:	4b44      	ldr	r3, [pc, #272]	@ (800a6b4 <__kernel_rem_pio2+0x31c>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5a8:	f7f6 f826 	bl	80005f8 <__aeabi_dmul>
 800a5ac:	f7f6 fabe 	bl	8000b2c <__aeabi_d2iz>
 800a5b0:	f7f5 ffb8 	bl	8000524 <__aeabi_i2d>
 800a5b4:	4b40      	ldr	r3, [pc, #256]	@ (800a6b8 <__kernel_rem_pio2+0x320>)
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	4606      	mov	r6, r0
 800a5ba:	460f      	mov	r7, r1
 800a5bc:	f7f6 f81c 	bl	80005f8 <__aeabi_dmul>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5c8:	f7f5 fe5e 	bl	8000288 <__aeabi_dsub>
 800a5cc:	f7f6 faae 	bl	8000b2c <__aeabi_d2iz>
 800a5d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5d4:	f849 0b04 	str.w	r0, [r9], #4
 800a5d8:	4639      	mov	r1, r7
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f7f5 fe56 	bl	800028c <__adddf3>
 800a5e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5e8:	e75d      	b.n	800a4a6 <__kernel_rem_pio2+0x10e>
 800a5ea:	d107      	bne.n	800a5fc <__kernel_rem_pio2+0x264>
 800a5ec:	f108 33ff 	add.w	r3, r8, #4294967295
 800a5f0:	aa0c      	add	r2, sp, #48	@ 0x30
 800a5f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5f6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800a5fa:	e79e      	b.n	800a53a <__kernel_rem_pio2+0x1a2>
 800a5fc:	4b2f      	ldr	r3, [pc, #188]	@ (800a6bc <__kernel_rem_pio2+0x324>)
 800a5fe:	2200      	movs	r2, #0
 800a600:	f7f6 fa80 	bl	8000b04 <__aeabi_dcmpge>
 800a604:	2800      	cmp	r0, #0
 800a606:	d143      	bne.n	800a690 <__kernel_rem_pio2+0x2f8>
 800a608:	4681      	mov	r9, r0
 800a60a:	2200      	movs	r2, #0
 800a60c:	2300      	movs	r3, #0
 800a60e:	4630      	mov	r0, r6
 800a610:	4639      	mov	r1, r7
 800a612:	f7f6 fa59 	bl	8000ac8 <__aeabi_dcmpeq>
 800a616:	2800      	cmp	r0, #0
 800a618:	f000 80bf 	beq.w	800a79a <__kernel_rem_pio2+0x402>
 800a61c:	f108 33ff 	add.w	r3, r8, #4294967295
 800a620:	2200      	movs	r2, #0
 800a622:	9900      	ldr	r1, [sp, #0]
 800a624:	428b      	cmp	r3, r1
 800a626:	da6e      	bge.n	800a706 <__kernel_rem_pio2+0x36e>
 800a628:	2a00      	cmp	r2, #0
 800a62a:	f000 8089 	beq.w	800a740 <__kernel_rem_pio2+0x3a8>
 800a62e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a632:	ab0c      	add	r3, sp, #48	@ 0x30
 800a634:	f1ab 0b18 	sub.w	fp, fp, #24
 800a638:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d0f6      	beq.n	800a62e <__kernel_rem_pio2+0x296>
 800a640:	4658      	mov	r0, fp
 800a642:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800a6a0 <__kernel_rem_pio2+0x308>
 800a646:	f000 f9ff 	bl	800aa48 <scalbn>
 800a64a:	f108 0301 	add.w	r3, r8, #1
 800a64e:	00da      	lsls	r2, r3, #3
 800a650:	9205      	str	r2, [sp, #20]
 800a652:	ec55 4b10 	vmov	r4, r5, d0
 800a656:	aa70      	add	r2, sp, #448	@ 0x1c0
 800a658:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800a6b4 <__kernel_rem_pio2+0x31c>
 800a65c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800a660:	4646      	mov	r6, r8
 800a662:	f04f 0a00 	mov.w	sl, #0
 800a666:	2e00      	cmp	r6, #0
 800a668:	f280 80cf 	bge.w	800a80a <__kernel_rem_pio2+0x472>
 800a66c:	4644      	mov	r4, r8
 800a66e:	2c00      	cmp	r4, #0
 800a670:	f2c0 80fd 	blt.w	800a86e <__kernel_rem_pio2+0x4d6>
 800a674:	4b12      	ldr	r3, [pc, #72]	@ (800a6c0 <__kernel_rem_pio2+0x328>)
 800a676:	461f      	mov	r7, r3
 800a678:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a67a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a67e:	9306      	str	r3, [sp, #24]
 800a680:	f04f 0a00 	mov.w	sl, #0
 800a684:	f04f 0b00 	mov.w	fp, #0
 800a688:	2600      	movs	r6, #0
 800a68a:	eba8 0504 	sub.w	r5, r8, r4
 800a68e:	e0e2      	b.n	800a856 <__kernel_rem_pio2+0x4be>
 800a690:	f04f 0902 	mov.w	r9, #2
 800a694:	e754      	b.n	800a540 <__kernel_rem_pio2+0x1a8>
 800a696:	bf00      	nop
	...
 800a6a4:	3ff00000 	.word	0x3ff00000
 800a6a8:	0800d120 	.word	0x0800d120
 800a6ac:	40200000 	.word	0x40200000
 800a6b0:	3ff00000 	.word	0x3ff00000
 800a6b4:	3e700000 	.word	0x3e700000
 800a6b8:	41700000 	.word	0x41700000
 800a6bc:	3fe00000 	.word	0x3fe00000
 800a6c0:	0800d0e0 	.word	0x0800d0e0
 800a6c4:	f854 3b04 	ldr.w	r3, [r4], #4
 800a6c8:	b945      	cbnz	r5, 800a6dc <__kernel_rem_pio2+0x344>
 800a6ca:	b123      	cbz	r3, 800a6d6 <__kernel_rem_pio2+0x33e>
 800a6cc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800a6d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	3201      	adds	r2, #1
 800a6d8:	461d      	mov	r5, r3
 800a6da:	e738      	b.n	800a54e <__kernel_rem_pio2+0x1b6>
 800a6dc:	1acb      	subs	r3, r1, r3
 800a6de:	e7f7      	b.n	800a6d0 <__kernel_rem_pio2+0x338>
 800a6e0:	f108 32ff 	add.w	r2, r8, #4294967295
 800a6e4:	ab0c      	add	r3, sp, #48	@ 0x30
 800a6e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a6ee:	a90c      	add	r1, sp, #48	@ 0x30
 800a6f0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a6f4:	e739      	b.n	800a56a <__kernel_rem_pio2+0x1d2>
 800a6f6:	f108 32ff 	add.w	r2, r8, #4294967295
 800a6fa:	ab0c      	add	r3, sp, #48	@ 0x30
 800a6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a700:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a704:	e7f3      	b.n	800a6ee <__kernel_rem_pio2+0x356>
 800a706:	a90c      	add	r1, sp, #48	@ 0x30
 800a708:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a70c:	3b01      	subs	r3, #1
 800a70e:	430a      	orrs	r2, r1
 800a710:	e787      	b.n	800a622 <__kernel_rem_pio2+0x28a>
 800a712:	3401      	adds	r4, #1
 800a714:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a718:	2a00      	cmp	r2, #0
 800a71a:	d0fa      	beq.n	800a712 <__kernel_rem_pio2+0x37a>
 800a71c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a71e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a722:	eb0d 0503 	add.w	r5, sp, r3
 800a726:	9b06      	ldr	r3, [sp, #24]
 800a728:	aa20      	add	r2, sp, #128	@ 0x80
 800a72a:	4443      	add	r3, r8
 800a72c:	f108 0701 	add.w	r7, r8, #1
 800a730:	3d98      	subs	r5, #152	@ 0x98
 800a732:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800a736:	4444      	add	r4, r8
 800a738:	42bc      	cmp	r4, r7
 800a73a:	da04      	bge.n	800a746 <__kernel_rem_pio2+0x3ae>
 800a73c:	46a0      	mov	r8, r4
 800a73e:	e6a2      	b.n	800a486 <__kernel_rem_pio2+0xee>
 800a740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a742:	2401      	movs	r4, #1
 800a744:	e7e6      	b.n	800a714 <__kernel_rem_pio2+0x37c>
 800a746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a748:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a74c:	f7f5 feea 	bl	8000524 <__aeabi_i2d>
 800a750:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800aa18 <__kernel_rem_pio2+0x680>
 800a754:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a758:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a75c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a760:	46b2      	mov	sl, r6
 800a762:	f04f 0800 	mov.w	r8, #0
 800a766:	9b05      	ldr	r3, [sp, #20]
 800a768:	4598      	cmp	r8, r3
 800a76a:	dd05      	ble.n	800a778 <__kernel_rem_pio2+0x3e0>
 800a76c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a770:	3701      	adds	r7, #1
 800a772:	eca5 7b02 	vstmia	r5!, {d7}
 800a776:	e7df      	b.n	800a738 <__kernel_rem_pio2+0x3a0>
 800a778:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800a77c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a780:	f7f5 ff3a 	bl	80005f8 <__aeabi_dmul>
 800a784:	4602      	mov	r2, r0
 800a786:	460b      	mov	r3, r1
 800a788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a78c:	f7f5 fd7e 	bl	800028c <__adddf3>
 800a790:	f108 0801 	add.w	r8, r8, #1
 800a794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a798:	e7e5      	b.n	800a766 <__kernel_rem_pio2+0x3ce>
 800a79a:	f1cb 0000 	rsb	r0, fp, #0
 800a79e:	ec47 6b10 	vmov	d0, r6, r7
 800a7a2:	f000 f951 	bl	800aa48 <scalbn>
 800a7a6:	ec55 4b10 	vmov	r4, r5, d0
 800a7aa:	4b9d      	ldr	r3, [pc, #628]	@ (800aa20 <__kernel_rem_pio2+0x688>)
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	f7f6 f9a7 	bl	8000b04 <__aeabi_dcmpge>
 800a7b6:	b300      	cbz	r0, 800a7fa <__kernel_rem_pio2+0x462>
 800a7b8:	4b9a      	ldr	r3, [pc, #616]	@ (800aa24 <__kernel_rem_pio2+0x68c>)
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	4620      	mov	r0, r4
 800a7be:	4629      	mov	r1, r5
 800a7c0:	f7f5 ff1a 	bl	80005f8 <__aeabi_dmul>
 800a7c4:	f7f6 f9b2 	bl	8000b2c <__aeabi_d2iz>
 800a7c8:	4606      	mov	r6, r0
 800a7ca:	f7f5 feab 	bl	8000524 <__aeabi_i2d>
 800a7ce:	4b94      	ldr	r3, [pc, #592]	@ (800aa20 <__kernel_rem_pio2+0x688>)
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f7f5 ff11 	bl	80005f8 <__aeabi_dmul>
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4602      	mov	r2, r0
 800a7da:	4629      	mov	r1, r5
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f7f5 fd53 	bl	8000288 <__aeabi_dsub>
 800a7e2:	f7f6 f9a3 	bl	8000b2c <__aeabi_d2iz>
 800a7e6:	ab0c      	add	r3, sp, #48	@ 0x30
 800a7e8:	f10b 0b18 	add.w	fp, fp, #24
 800a7ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a7f0:	f108 0801 	add.w	r8, r8, #1
 800a7f4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800a7f8:	e722      	b.n	800a640 <__kernel_rem_pio2+0x2a8>
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	f7f6 f995 	bl	8000b2c <__aeabi_d2iz>
 800a802:	ab0c      	add	r3, sp, #48	@ 0x30
 800a804:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a808:	e71a      	b.n	800a640 <__kernel_rem_pio2+0x2a8>
 800a80a:	ab0c      	add	r3, sp, #48	@ 0x30
 800a80c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a810:	f7f5 fe88 	bl	8000524 <__aeabi_i2d>
 800a814:	4622      	mov	r2, r4
 800a816:	462b      	mov	r3, r5
 800a818:	f7f5 feee 	bl	80005f8 <__aeabi_dmul>
 800a81c:	4652      	mov	r2, sl
 800a81e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800a822:	465b      	mov	r3, fp
 800a824:	4620      	mov	r0, r4
 800a826:	4629      	mov	r1, r5
 800a828:	f7f5 fee6 	bl	80005f8 <__aeabi_dmul>
 800a82c:	3e01      	subs	r6, #1
 800a82e:	4604      	mov	r4, r0
 800a830:	460d      	mov	r5, r1
 800a832:	e718      	b.n	800a666 <__kernel_rem_pio2+0x2ce>
 800a834:	9906      	ldr	r1, [sp, #24]
 800a836:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800a83a:	9106      	str	r1, [sp, #24]
 800a83c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800a840:	f7f5 feda 	bl	80005f8 <__aeabi_dmul>
 800a844:	4602      	mov	r2, r0
 800a846:	460b      	mov	r3, r1
 800a848:	4650      	mov	r0, sl
 800a84a:	4659      	mov	r1, fp
 800a84c:	f7f5 fd1e 	bl	800028c <__adddf3>
 800a850:	3601      	adds	r6, #1
 800a852:	4682      	mov	sl, r0
 800a854:	468b      	mov	fp, r1
 800a856:	9b00      	ldr	r3, [sp, #0]
 800a858:	429e      	cmp	r6, r3
 800a85a:	dc01      	bgt.n	800a860 <__kernel_rem_pio2+0x4c8>
 800a85c:	42b5      	cmp	r5, r6
 800a85e:	dae9      	bge.n	800a834 <__kernel_rem_pio2+0x49c>
 800a860:	ab48      	add	r3, sp, #288	@ 0x120
 800a862:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a866:	e9c5 ab00 	strd	sl, fp, [r5]
 800a86a:	3c01      	subs	r4, #1
 800a86c:	e6ff      	b.n	800a66e <__kernel_rem_pio2+0x2d6>
 800a86e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a870:	2b02      	cmp	r3, #2
 800a872:	dc0b      	bgt.n	800a88c <__kernel_rem_pio2+0x4f4>
 800a874:	2b00      	cmp	r3, #0
 800a876:	dc39      	bgt.n	800a8ec <__kernel_rem_pio2+0x554>
 800a878:	d05d      	beq.n	800a936 <__kernel_rem_pio2+0x59e>
 800a87a:	9b02      	ldr	r3, [sp, #8]
 800a87c:	f003 0007 	and.w	r0, r3, #7
 800a880:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800a884:	ecbd 8b02 	vpop	{d8}
 800a888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a88e:	2b03      	cmp	r3, #3
 800a890:	d1f3      	bne.n	800a87a <__kernel_rem_pio2+0x4e2>
 800a892:	9b05      	ldr	r3, [sp, #20]
 800a894:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a898:	eb0d 0403 	add.w	r4, sp, r3
 800a89c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800a8a0:	4625      	mov	r5, r4
 800a8a2:	46c2      	mov	sl, r8
 800a8a4:	f1ba 0f00 	cmp.w	sl, #0
 800a8a8:	f1a5 0508 	sub.w	r5, r5, #8
 800a8ac:	dc6b      	bgt.n	800a986 <__kernel_rem_pio2+0x5ee>
 800a8ae:	4645      	mov	r5, r8
 800a8b0:	2d01      	cmp	r5, #1
 800a8b2:	f1a4 0408 	sub.w	r4, r4, #8
 800a8b6:	f300 8087 	bgt.w	800a9c8 <__kernel_rem_pio2+0x630>
 800a8ba:	9c05      	ldr	r4, [sp, #20]
 800a8bc:	ab48      	add	r3, sp, #288	@ 0x120
 800a8be:	441c      	add	r4, r3
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	f1b8 0f01 	cmp.w	r8, #1
 800a8c8:	f300 809c 	bgt.w	800aa04 <__kernel_rem_pio2+0x66c>
 800a8cc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800a8d0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800a8d4:	f1b9 0f00 	cmp.w	r9, #0
 800a8d8:	f040 80a6 	bne.w	800aa28 <__kernel_rem_pio2+0x690>
 800a8dc:	9b04      	ldr	r3, [sp, #16]
 800a8de:	e9c3 7800 	strd	r7, r8, [r3]
 800a8e2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a8e6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a8ea:	e7c6      	b.n	800a87a <__kernel_rem_pio2+0x4e2>
 800a8ec:	9d05      	ldr	r5, [sp, #20]
 800a8ee:	ab48      	add	r3, sp, #288	@ 0x120
 800a8f0:	441d      	add	r5, r3
 800a8f2:	4644      	mov	r4, r8
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	2c00      	cmp	r4, #0
 800a8fa:	da35      	bge.n	800a968 <__kernel_rem_pio2+0x5d0>
 800a8fc:	f1b9 0f00 	cmp.w	r9, #0
 800a900:	d038      	beq.n	800a974 <__kernel_rem_pio2+0x5dc>
 800a902:	4602      	mov	r2, r0
 800a904:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a908:	9c04      	ldr	r4, [sp, #16]
 800a90a:	e9c4 2300 	strd	r2, r3, [r4]
 800a90e:	4602      	mov	r2, r0
 800a910:	460b      	mov	r3, r1
 800a912:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800a916:	f7f5 fcb7 	bl	8000288 <__aeabi_dsub>
 800a91a:	ad4a      	add	r5, sp, #296	@ 0x128
 800a91c:	2401      	movs	r4, #1
 800a91e:	45a0      	cmp	r8, r4
 800a920:	da2b      	bge.n	800a97a <__kernel_rem_pio2+0x5e2>
 800a922:	f1b9 0f00 	cmp.w	r9, #0
 800a926:	d002      	beq.n	800a92e <__kernel_rem_pio2+0x596>
 800a928:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a92c:	4619      	mov	r1, r3
 800a92e:	9b04      	ldr	r3, [sp, #16]
 800a930:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a934:	e7a1      	b.n	800a87a <__kernel_rem_pio2+0x4e2>
 800a936:	9c05      	ldr	r4, [sp, #20]
 800a938:	ab48      	add	r3, sp, #288	@ 0x120
 800a93a:	441c      	add	r4, r3
 800a93c:	2000      	movs	r0, #0
 800a93e:	2100      	movs	r1, #0
 800a940:	f1b8 0f00 	cmp.w	r8, #0
 800a944:	da09      	bge.n	800a95a <__kernel_rem_pio2+0x5c2>
 800a946:	f1b9 0f00 	cmp.w	r9, #0
 800a94a:	d002      	beq.n	800a952 <__kernel_rem_pio2+0x5ba>
 800a94c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a950:	4619      	mov	r1, r3
 800a952:	9b04      	ldr	r3, [sp, #16]
 800a954:	e9c3 0100 	strd	r0, r1, [r3]
 800a958:	e78f      	b.n	800a87a <__kernel_rem_pio2+0x4e2>
 800a95a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a95e:	f7f5 fc95 	bl	800028c <__adddf3>
 800a962:	f108 38ff 	add.w	r8, r8, #4294967295
 800a966:	e7eb      	b.n	800a940 <__kernel_rem_pio2+0x5a8>
 800a968:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a96c:	f7f5 fc8e 	bl	800028c <__adddf3>
 800a970:	3c01      	subs	r4, #1
 800a972:	e7c1      	b.n	800a8f8 <__kernel_rem_pio2+0x560>
 800a974:	4602      	mov	r2, r0
 800a976:	460b      	mov	r3, r1
 800a978:	e7c6      	b.n	800a908 <__kernel_rem_pio2+0x570>
 800a97a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a97e:	f7f5 fc85 	bl	800028c <__adddf3>
 800a982:	3401      	adds	r4, #1
 800a984:	e7cb      	b.n	800a91e <__kernel_rem_pio2+0x586>
 800a986:	ed95 7b00 	vldr	d7, [r5]
 800a98a:	ed8d 7b00 	vstr	d7, [sp]
 800a98e:	ed95 7b02 	vldr	d7, [r5, #8]
 800a992:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a996:	ec53 2b17 	vmov	r2, r3, d7
 800a99a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a99e:	f7f5 fc75 	bl	800028c <__adddf3>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	4606      	mov	r6, r0
 800a9a8:	460f      	mov	r7, r1
 800a9aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9ae:	f7f5 fc6b 	bl	8000288 <__aeabi_dsub>
 800a9b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a9b6:	f7f5 fc69 	bl	800028c <__adddf3>
 800a9ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9be:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a9c2:	e9c5 6700 	strd	r6, r7, [r5]
 800a9c6:	e76d      	b.n	800a8a4 <__kernel_rem_pio2+0x50c>
 800a9c8:	ed94 7b00 	vldr	d7, [r4]
 800a9cc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800a9d0:	ec51 0b17 	vmov	r0, r1, d7
 800a9d4:	4652      	mov	r2, sl
 800a9d6:	465b      	mov	r3, fp
 800a9d8:	ed8d 7b00 	vstr	d7, [sp]
 800a9dc:	f7f5 fc56 	bl	800028c <__adddf3>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	4606      	mov	r6, r0
 800a9e6:	460f      	mov	r7, r1
 800a9e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9ec:	f7f5 fc4c 	bl	8000288 <__aeabi_dsub>
 800a9f0:	4652      	mov	r2, sl
 800a9f2:	465b      	mov	r3, fp
 800a9f4:	f7f5 fc4a 	bl	800028c <__adddf3>
 800a9f8:	3d01      	subs	r5, #1
 800a9fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a9fe:	e9c4 6700 	strd	r6, r7, [r4]
 800aa02:	e755      	b.n	800a8b0 <__kernel_rem_pio2+0x518>
 800aa04:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa08:	f7f5 fc40 	bl	800028c <__adddf3>
 800aa0c:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa10:	e758      	b.n	800a8c4 <__kernel_rem_pio2+0x52c>
 800aa12:	bf00      	nop
 800aa14:	f3af 8000 	nop.w
	...
 800aa20:	41700000 	.word	0x41700000
 800aa24:	3e700000 	.word	0x3e700000
 800aa28:	9b04      	ldr	r3, [sp, #16]
 800aa2a:	9a04      	ldr	r2, [sp, #16]
 800aa2c:	601f      	str	r7, [r3, #0]
 800aa2e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800aa32:	605c      	str	r4, [r3, #4]
 800aa34:	609d      	str	r5, [r3, #8]
 800aa36:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aa3a:	60d3      	str	r3, [r2, #12]
 800aa3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa40:	6110      	str	r0, [r2, #16]
 800aa42:	6153      	str	r3, [r2, #20]
 800aa44:	e719      	b.n	800a87a <__kernel_rem_pio2+0x4e2>
 800aa46:	bf00      	nop

0800aa48 <scalbn>:
 800aa48:	b570      	push	{r4, r5, r6, lr}
 800aa4a:	ec55 4b10 	vmov	r4, r5, d0
 800aa4e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800aa52:	4606      	mov	r6, r0
 800aa54:	462b      	mov	r3, r5
 800aa56:	b991      	cbnz	r1, 800aa7e <scalbn+0x36>
 800aa58:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800aa5c:	4323      	orrs	r3, r4
 800aa5e:	d03d      	beq.n	800aadc <scalbn+0x94>
 800aa60:	4b35      	ldr	r3, [pc, #212]	@ (800ab38 <scalbn+0xf0>)
 800aa62:	4620      	mov	r0, r4
 800aa64:	4629      	mov	r1, r5
 800aa66:	2200      	movs	r2, #0
 800aa68:	f7f5 fdc6 	bl	80005f8 <__aeabi_dmul>
 800aa6c:	4b33      	ldr	r3, [pc, #204]	@ (800ab3c <scalbn+0xf4>)
 800aa6e:	429e      	cmp	r6, r3
 800aa70:	4604      	mov	r4, r0
 800aa72:	460d      	mov	r5, r1
 800aa74:	da0f      	bge.n	800aa96 <scalbn+0x4e>
 800aa76:	a328      	add	r3, pc, #160	@ (adr r3, 800ab18 <scalbn+0xd0>)
 800aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7c:	e01e      	b.n	800aabc <scalbn+0x74>
 800aa7e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800aa82:	4291      	cmp	r1, r2
 800aa84:	d10b      	bne.n	800aa9e <scalbn+0x56>
 800aa86:	4622      	mov	r2, r4
 800aa88:	4620      	mov	r0, r4
 800aa8a:	4629      	mov	r1, r5
 800aa8c:	f7f5 fbfe 	bl	800028c <__adddf3>
 800aa90:	4604      	mov	r4, r0
 800aa92:	460d      	mov	r5, r1
 800aa94:	e022      	b.n	800aadc <scalbn+0x94>
 800aa96:	460b      	mov	r3, r1
 800aa98:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800aa9c:	3936      	subs	r1, #54	@ 0x36
 800aa9e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800aaa2:	4296      	cmp	r6, r2
 800aaa4:	dd0d      	ble.n	800aac2 <scalbn+0x7a>
 800aaa6:	2d00      	cmp	r5, #0
 800aaa8:	a11d      	add	r1, pc, #116	@ (adr r1, 800ab20 <scalbn+0xd8>)
 800aaaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaae:	da02      	bge.n	800aab6 <scalbn+0x6e>
 800aab0:	a11d      	add	r1, pc, #116	@ (adr r1, 800ab28 <scalbn+0xe0>)
 800aab2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aab6:	a31a      	add	r3, pc, #104	@ (adr r3, 800ab20 <scalbn+0xd8>)
 800aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabc:	f7f5 fd9c 	bl	80005f8 <__aeabi_dmul>
 800aac0:	e7e6      	b.n	800aa90 <scalbn+0x48>
 800aac2:	1872      	adds	r2, r6, r1
 800aac4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800aac8:	428a      	cmp	r2, r1
 800aaca:	dcec      	bgt.n	800aaa6 <scalbn+0x5e>
 800aacc:	2a00      	cmp	r2, #0
 800aace:	dd08      	ble.n	800aae2 <scalbn+0x9a>
 800aad0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800aad4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800aad8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aadc:	ec45 4b10 	vmov	d0, r4, r5
 800aae0:	bd70      	pop	{r4, r5, r6, pc}
 800aae2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800aae6:	da08      	bge.n	800aafa <scalbn+0xb2>
 800aae8:	2d00      	cmp	r5, #0
 800aaea:	a10b      	add	r1, pc, #44	@ (adr r1, 800ab18 <scalbn+0xd0>)
 800aaec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaf0:	dac1      	bge.n	800aa76 <scalbn+0x2e>
 800aaf2:	a10f      	add	r1, pc, #60	@ (adr r1, 800ab30 <scalbn+0xe8>)
 800aaf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaf8:	e7bd      	b.n	800aa76 <scalbn+0x2e>
 800aafa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800aafe:	3236      	adds	r2, #54	@ 0x36
 800ab00:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ab04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ab08:	4620      	mov	r0, r4
 800ab0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab40 <scalbn+0xf8>)
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	2200      	movs	r2, #0
 800ab10:	e7d4      	b.n	800aabc <scalbn+0x74>
 800ab12:	bf00      	nop
 800ab14:	f3af 8000 	nop.w
 800ab18:	c2f8f359 	.word	0xc2f8f359
 800ab1c:	01a56e1f 	.word	0x01a56e1f
 800ab20:	8800759c 	.word	0x8800759c
 800ab24:	7e37e43c 	.word	0x7e37e43c
 800ab28:	8800759c 	.word	0x8800759c
 800ab2c:	fe37e43c 	.word	0xfe37e43c
 800ab30:	c2f8f359 	.word	0xc2f8f359
 800ab34:	81a56e1f 	.word	0x81a56e1f
 800ab38:	43500000 	.word	0x43500000
 800ab3c:	ffff3cb0 	.word	0xffff3cb0
 800ab40:	3c900000 	.word	0x3c900000
 800ab44:	00000000 	.word	0x00000000

0800ab48 <floor>:
 800ab48:	ec51 0b10 	vmov	r0, r1, d0
 800ab4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ab50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab54:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800ab58:	2e13      	cmp	r6, #19
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	4605      	mov	r5, r0
 800ab5e:	4680      	mov	r8, r0
 800ab60:	dc34      	bgt.n	800abcc <floor+0x84>
 800ab62:	2e00      	cmp	r6, #0
 800ab64:	da17      	bge.n	800ab96 <floor+0x4e>
 800ab66:	a332      	add	r3, pc, #200	@ (adr r3, 800ac30 <floor+0xe8>)
 800ab68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6c:	f7f5 fb8e 	bl	800028c <__adddf3>
 800ab70:	2200      	movs	r2, #0
 800ab72:	2300      	movs	r3, #0
 800ab74:	f7f5 ffd0 	bl	8000b18 <__aeabi_dcmpgt>
 800ab78:	b150      	cbz	r0, 800ab90 <floor+0x48>
 800ab7a:	2c00      	cmp	r4, #0
 800ab7c:	da55      	bge.n	800ac2a <floor+0xe2>
 800ab7e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800ab82:	432c      	orrs	r4, r5
 800ab84:	2500      	movs	r5, #0
 800ab86:	42ac      	cmp	r4, r5
 800ab88:	4c2b      	ldr	r4, [pc, #172]	@ (800ac38 <floor+0xf0>)
 800ab8a:	bf08      	it	eq
 800ab8c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800ab90:	4621      	mov	r1, r4
 800ab92:	4628      	mov	r0, r5
 800ab94:	e023      	b.n	800abde <floor+0x96>
 800ab96:	4f29      	ldr	r7, [pc, #164]	@ (800ac3c <floor+0xf4>)
 800ab98:	4137      	asrs	r7, r6
 800ab9a:	ea01 0307 	and.w	r3, r1, r7
 800ab9e:	4303      	orrs	r3, r0
 800aba0:	d01d      	beq.n	800abde <floor+0x96>
 800aba2:	a323      	add	r3, pc, #140	@ (adr r3, 800ac30 <floor+0xe8>)
 800aba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba8:	f7f5 fb70 	bl	800028c <__adddf3>
 800abac:	2200      	movs	r2, #0
 800abae:	2300      	movs	r3, #0
 800abb0:	f7f5 ffb2 	bl	8000b18 <__aeabi_dcmpgt>
 800abb4:	2800      	cmp	r0, #0
 800abb6:	d0eb      	beq.n	800ab90 <floor+0x48>
 800abb8:	2c00      	cmp	r4, #0
 800abba:	bfbe      	ittt	lt
 800abbc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800abc0:	4133      	asrlt	r3, r6
 800abc2:	18e4      	addlt	r4, r4, r3
 800abc4:	ea24 0407 	bic.w	r4, r4, r7
 800abc8:	2500      	movs	r5, #0
 800abca:	e7e1      	b.n	800ab90 <floor+0x48>
 800abcc:	2e33      	cmp	r6, #51	@ 0x33
 800abce:	dd0a      	ble.n	800abe6 <floor+0x9e>
 800abd0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800abd4:	d103      	bne.n	800abde <floor+0x96>
 800abd6:	4602      	mov	r2, r0
 800abd8:	460b      	mov	r3, r1
 800abda:	f7f5 fb57 	bl	800028c <__adddf3>
 800abde:	ec41 0b10 	vmov	d0, r0, r1
 800abe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800abea:	f04f 37ff 	mov.w	r7, #4294967295
 800abee:	40df      	lsrs	r7, r3
 800abf0:	4207      	tst	r7, r0
 800abf2:	d0f4      	beq.n	800abde <floor+0x96>
 800abf4:	a30e      	add	r3, pc, #56	@ (adr r3, 800ac30 <floor+0xe8>)
 800abf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfa:	f7f5 fb47 	bl	800028c <__adddf3>
 800abfe:	2200      	movs	r2, #0
 800ac00:	2300      	movs	r3, #0
 800ac02:	f7f5 ff89 	bl	8000b18 <__aeabi_dcmpgt>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	d0c2      	beq.n	800ab90 <floor+0x48>
 800ac0a:	2c00      	cmp	r4, #0
 800ac0c:	da0a      	bge.n	800ac24 <floor+0xdc>
 800ac0e:	2e14      	cmp	r6, #20
 800ac10:	d101      	bne.n	800ac16 <floor+0xce>
 800ac12:	3401      	adds	r4, #1
 800ac14:	e006      	b.n	800ac24 <floor+0xdc>
 800ac16:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	40b3      	lsls	r3, r6
 800ac1e:	441d      	add	r5, r3
 800ac20:	4545      	cmp	r5, r8
 800ac22:	d3f6      	bcc.n	800ac12 <floor+0xca>
 800ac24:	ea25 0507 	bic.w	r5, r5, r7
 800ac28:	e7b2      	b.n	800ab90 <floor+0x48>
 800ac2a:	2500      	movs	r5, #0
 800ac2c:	462c      	mov	r4, r5
 800ac2e:	e7af      	b.n	800ab90 <floor+0x48>
 800ac30:	8800759c 	.word	0x8800759c
 800ac34:	7e37e43c 	.word	0x7e37e43c
 800ac38:	bff00000 	.word	0xbff00000
 800ac3c:	000fffff 	.word	0x000fffff

0800ac40 <_init>:
 800ac40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac42:	bf00      	nop
 800ac44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac46:	bc08      	pop	{r3}
 800ac48:	469e      	mov	lr, r3
 800ac4a:	4770      	bx	lr

0800ac4c <_fini>:
 800ac4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac4e:	bf00      	nop
 800ac50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac52:	bc08      	pop	{r3}
 800ac54:	469e      	mov	lr, r3
 800ac56:	4770      	bx	lr
